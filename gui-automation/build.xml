<?xml version="1.0" encoding="UTF-8"?>
<project name="robots" default="jar" basedir=".">
	<property name="minAntVersion" value="1.7.0"/>
	<echo>
	
		Type ant help to get an overview of tasks in this build.xml file.
		
		At least Ant ${minAntVersion} is required. You have ${ant.version}
		
	</echo>
	<!-- Set basic directory properties -->
	<property name="tmpDir" value="${basedir}\tmp"/>
	<property name="dataDir" value="./data"/>
	<property name="docDir" value="../robotsapi"/>
	<property name="jarFile" value="robots.jar"/>
	<property name="junit.path" value="C:\Java\junit4.3\junit-4.3.jar;C:\Java\junit4.2\junit-4.2.jar;C:\java\junit4.1\junit-4.1.jar"/>
	<property name="functional-regression" value="../umodel/regression-tests"/>
	<property name="functional-regression-src" value="${functional-regression}/source"/>
	<property name="xercesImpl" value="${functional-regression-src}/xercesImpl.jar"/>
	<property name="functional-dependencies" value="S:\QA\Internal\Test-Cases\Automated_GUI_Tests\dependencies"/>
	<!--get rid of this when I get S: drive access-->
	<!--property name="functional-dependencies" value="C:\Program Files\Altova\AltovaXML2013\OldJavaAPI_deprecated"/-->
	<!-- Get system user name, to use with CVS login -->
	<property environment="env"/>
	<!-- property name="user" value="${env.USERNAME}"/ -->
	<!-- Setup Java classpath to be used for compile, javarun and junittest -->
	<path id="classpath">
		<pathelement location="${jarFile}"/>
		<pathelement location="${xercesImpl}"/>
		<pathelement path="${junit.path}"/>
		<pathelement path="."/>
		<pathelement path="${java.class.path}"/>
		<pathelement location="${functional-dependencies}\AltovaXML.jar"/>
		<pathelement location="${functional-dependencies}\XMLSpyInterface.jar"/>
		<pathelement location="${functional-regression-src}\removeCRLF.bat"/>
		<pathelement location="${functional-regression-src}\diff.exe"/>
		<pathelement location="${functional-regression-src}\DOSSR.EXE"/>
		<pathelement location="${functional-regression-src}\UMPSort.xml"/>
		<pathelement location="${functional-regression-src}\ump_operator_overloader.xsl"/>
		<pathelement location="${functional-regression-src}\ump_strip_sort.xsl"/>				
	</path>
	<!-- Get system environment variables and collect them in a propertyset used for the robot test and runs -->
	<property name="reportDir" value="S:\QA\Internal\Test-Cases\Automated_GUI_Tests\reports"/>
	<property name="java.util.logging.config.file" value="${env.ROBOTS_LOGGING_FILE}"/>
	<property name="out" value="c:\temp\robots_temp"/>
	<propertyset id="robots.settings">
		<propertyref name="java.util.logging.config.file"/>
		<propertyref name="automation.config.file"/>
		<propertyref name="usage"/>
	</propertyset>
	<target name="help">
		<echo>
	* compile
        Task to compile the robot classes
        Usage: ant compile

	* doc
        Task to generate JavaDoc for robot classes in ${docDir}
        Usage: ant doc
        
	* update
        Task to update source code from CVS (does not commit anything)
        Usage: ant update
        
	* ant jar (or just ant)
        Task to create the robots.jar. Will first update from CVS and then compile
        Usage: ant (or ant jar)

	* find
        Task to find the fully qualified Java class name, based a file name (without the .java extension)
        Usage: ant find -Dclassname=&lt;MyJavaClass&gt;
        Sets the property ${classfile}
        
	* run
        Task to run a Java class based a file name (without the .java extension)
        The JVM will get the robot properties as set in the ${robots.settings}
        Usage: ant run -Dclassname=&lt;MyJavaClass&gt;
        Example: ant run -Dclassname=LaunchTest
        
	* javarun
        Task to run a Java class based the fully qualified package+class name
        The JVM will get the robot properties as set in the ${robots.settings}
        Ant usage: see the usage in the task launch
        Usage: ant javarun -Dclass=&lt;com.altova.MyJavaClass&gt;
        Example: ant javarun -Dclass=com.altova.common.testcases.LaunchTest
        
	* test
        Task to run a JUnit class based a file name (without the .java extension)
        The JVM will get the robot properties as set in the ${robots.settings}
        Usage: ant test -Dclassname=&lt;MyJavaClass&gt;
        Example: ant test -Dclassname=StylesTest

	* junittest
        Task to run a JUnit class based the fully qualified package+class name
        The JVM will get the robot properties as set in the ${robots.settings}
        Ant usage: see the usage in the task stylestest
        Usage: ant junittest -Dclass=&lt;com.altova.MyJavaClass&gt;
        Example: ant junittest -Dclass=com.altova.umodel.regression.testcases.StylesTest
        
	* report
        Creates a summary report in HTML format in the directory set in ${reportDir}
        Usage: ant report
        
	* stylestest
        Task to run the UModel StylesTest JUnit test class
        Usage: ant stylestest
        
	* scrollbar
        Task to run the ExcelRobot class, to get scrollbar icons for your OS/system theme
        Excel has to be installed, but not running for this to work.
        Usage: ant scrollbar
        
	* rc
        Task to run the RobotsCenter application.
		Usage: ant rc
        
		</echo>
	</target>
	<!-- Task to check that correct version of Java, Ant and JUnit is installed -->
	<target name="checkEnvironment">
		<!-- Check for correct Ant version -->
		<echo message="At least Ant ${minAntVersion} is required. You have ${ant.version}"/>
		<fail message="Check correct Apache Ant version. At least Ant ${minAntVersion} is required. You have ${ant.version}">
			<condition>
				<not>
					<antversion atleast="${minAntVersion}"/>
				</not>
			</condition>
		</fail>
		<!-- Check for correct Java version -->
		<property name="minJavaVersion" value="1.6.0"/>
		<condition property="javaVersion">
			<matches pattern="1\.[6-9]\.[0-9]" string="${java.version}"/>
		</condition>
		<fail message="Check correct Java version. At least JDK ${minJavaVersion} is required." unless="javaVersion"/>
		<echo message="At least JDK ${minJavaVersion} is required. You have ${java.version}"/>
		<!-- Check for JUnit on classpath -->
		<!-- Check for JUnit 4.3, can use: org.junit.samples.money.MoneyTest -->
		<available classname="org.junit.After" property="After.present">
			<classpath refid="classpath"/>
		</available>
		<fail message="Check correct JUnit. JUnit 4.2 or higher was not detected." unless="After.present"/>
		<echo message="At least JUnit 4.2 is required. You seem to have that."/>
		<!-- All OK -->
		<echo message="The runtime environment seems to be up to date."/>
	</target>
	<!-- Task to compile the robot classes -->
	<!-- CLI usage: ant compile -->
	<target name="compile" depends="checkEnvironment">
		<delete dir="${tmpDir}"/>
		<mkdir dir="${tmpDir}"/>
		<javac srcdir="src:test:${functional-regression-src}" destdir="${tmpDir}" debug="true">
			<classpath refid="classpath"/>
		</javac>
	</target>
	<!-- Task to generate JavaDoc for robot classes -->
	<!-- Contains the URLs to the external APIs which is linked in the documentation produced -->
	<!-- CLI usage: ant doc -->
	<target name="doc">
		<delete dir="${docDir}"/>
		<mkdir dir="${docDir}"/>
		<property name="javaApiURL" value="http://java.sun.com/javase/6/docs/api"/>
		<property name="junitApiURL" value="http://www.junit.org/junit/javadoc/4.3"/>
		<javadoc sourcepath="src" destdir="${docDir}" windowtitle="QA test automation framework" nodeprecated="true" access="protected">
			<classpath refid="classpath"/>
			<link href="${javaApiURL}"/>
			<link href="${junitApiURL}"/>
		</javadoc>
	</target>
	<!-- Task to try to find out about the CVS user -->
	<!-- CLI usage: ant compile -->
	<!-- 
	<target name="getCVSUser">
		<property name="cvsRootFile" value="./CVS/Root"/>
		<property name="userFile" value="user.txt"/>
		<delete file="${userFile}"/>
		<copy file="${cvsRootFile}" tofile="${userFile}"/>
		<replaceregexp file="${userFile}" match=".*:(.*)@.*" replace="user=\1"/>
		<property file="${userFile}"/>
		<echo message="Found CVS user in file ${cvsRootFile}: ${user}"/>
		<delete file="${userFile}"/>
	</target> 
	-->
	
	<!-- Task to update source code from CVS (does not commit anything)  -->
	<!-- CLI usage: ant update  -->
	<!--
	<target name="update" depends="getCVSUser">
		<property name="cvsroot" value=":pserver:${user}@viepcvs01.vie.altova.com:/cvs/qa"/>
		<echo message="Updating from CVSROOT=${cvsroot}"/>
		<cvs cvsRoot="${cvsroot}" command="update -d"/>
		<cvs cvsRoot="${cvsroot}" command="update -d" dest="${functional-regression-src}"/>
	</target>
	<target name="update-func-test-cases" depends="getCVSUser">
		<cvs cvsRoot=":pserver:${user}@viepcvs01.vie.altova.com:/cvs/qa" command="-n -t update -d" dest="${functional-regression}/test-cases"/>
	</target>
	-->
	<!-- Task to create the robots.jar. Will first update from CVS and then compile -->
	<!-- CLI usage: ant (or ant jar) -->
	
	<target name="jar" depends="compile">
		<delete file="${File}"/>
		<jar destfile="${jarFile}">
			<fileset dir="${tmpDir}"/>
			<fileset dir="${dataDir}"/>
		</jar>
	</target>
	
	<!-- Task to find the fully qualified Java class name, based a file name (without the .java extension)  -->
	<!-- CLI usage: ant find -Dclassname=<MyJavaClass>  -->
	<!-- Sets the property ${classfile}  -->
	<target name="find">
		<fail message="Property classname has to be set. E.g 'ant {test | run | find}  -Dclassname=UModelRobotTest'" unless="classname"/>
		<!-- First search the tmp dir (where the compiled class files are) for a matching filename -->
		<fileset dir="${tmpDir}" id="src.files">
			<include name="**/${classname}.class"/>
		</fileset>
		<!-- Based on this full path+filename, convert it into a Java package+classname using the package mapper -->
		<pathconvert property="classfile" refid="src.files">
				<mapper type="package" from="${tmpDir}\*.class" to="*"/>
		</pathconvert>
		<echo>classfile: '${classfile}'</echo>
		<!-- If we did not find a match, fail and stop the run here -->
		<property name="failMsg" value="Failed to find class containing name '${classname}'. Or duplicate classes where found. Please make sure the class exists and that you have typed 'ant' to update and compile, and possibly include more of the package path, e.g. -Dclassname=spy/FileMenuTest"/>
		<condition property="foundClass">
			<matches pattern="[a-zA-Z]" string="${classfile}"/>
		</condition>
		<fail message="${failMsg}" unless="foundClass"/>
		<!-- Otherwise, verify where the actual class resource can be found -->
		<whichresource property="c" class="${classfile}">
			<classpath refid="classpath"/>
		</whichresource>
		<available classname="${classfile}" property="class.present">
			<classpath refid="classpath"/>
		</available>
		<!-- If it cannot be found after all (probably due to a classpath issue, fail here -->
		<fail message="${failMsg}" unless="class.present"/>
		<echo>Class found at: ${c}</echo>
	</target>
	<!-- Task to run a Java class based a file name (without the .java extension) -->
	<!-- The JVM will get the robot properties as set in the ${robots.settings} -->
	<!-- CLI usage: ant run -Dclassname=<MyJavaClass>  -->
	<!-- CLI example: ant run -Dclassname=LaunchTest  -->
	<target name="run" depends="find">
		<antcall target="javarun">
			<param name="class" value="${classfile}"/>
		</antcall>
	</target>
	<!-- Task to run a Java class based the fully qualified package+class name -->
	<!-- The JVM will get the robot properties as set in the ${robots.settings} -->
	<!-- Ant usage: see the usage in the task launch -->
	<!-- CLI usage: ant javarun -Dclass=<com.altova.MyJavaClass>  -->
	<!-- CLI example: ant javarun -Dclass=com.altova.common.testcases.LaunchTest  -->
	<target name="javarun" depends="checkEnvironment">
		<echo>Running ${class}</echo>
		<echo>
			Using Java log properties file: ${java.util.logging.config.file}.
			To set this, use the environment varialbe ROBOTS_LOGGING_FILE.
			A good valus is ROBOTS_LOGGING_FILE=testSuiteLog.properties
		</echo>
		<java classname="${class}" fork="true" maxmemory="200m">
			<classpath refid="classpath"/>
			<syspropertyset refid="robots.settings"/>
		</java>
	</target>
	<!-- Task to run a JUnit class based a file name (without the .java extension) -->
	<!-- The JVM will get the robot properties as set in the ${robots.settings} -->
	<!-- CLI usage: ant test -Dclassname=<MyJavaClass>  -->
	<!-- CLI example: ant test -Dclassname=StylesTest  -->
	<target name="test" depends="find">
		<antcall target="junittest">
			<param name="class" value="${classfile}"/>
		</antcall>
	</target>
	<!-- Task to run a JUnit class based the fully qualified package+class name -->
	<!-- The JVM will get the robot properties as set in the ${robots.settings} -->
	<!-- Ant usage: see the usage in the task stylestest -->
	<!-- CLI usage: ant junittest -Dclass=<com.altova.MyJavaClass>  -->
	<!-- CLI example: ant junittest -Dclass=com.altova.umodel.regression.testcases.StylesTest  -->
	<target name="junittest" depends="checkEnvironment">
		<property name="outTmpDir" value="${out}/tmp"/>
		<mkdir dir="${outTmpDir}"/>
		<mkdir dir="${outTmpDir}.old"/>
		<move todir="${outTmpDir}.old">
			<fileset dir="${outTmpDir}">
				<include name="*.*"/>
			</fileset>
		</move>
		<echo>
		   Called junittest.
			Using Java log properties file: ${java.util.logging.config.file}.
			To set this, use the environment varialbe ROBOTS_LOGGING_FILE.
			A good valus is ROBOTS_LOGGING_FILE=testSuiteLog.properties
		</echo>
		<junit printsummary="yes" fork="yes" forkmode="once" haltonfailure="no" showoutput="true" errorproperty="tazerror">
			<classpath refid="classpath"/>
			<syspropertyset refid="robots.settings"/>
			<formatter type="xml"/>
			<test name="${class}" todir="${outTmpDir}"/>
		</junit>
		<echo>End Test</echo>
		<!-- change the file name of the report to include the date and time-->
		<tstamp>
			<format property="time" pattern="yyyy-MM-dd_hh-mm"/>
		</tstamp>
		<echo>Date generated.</echo>
		<move todir="${outTmpDir}">
			<fileset dir="${outTmpDir}"/>
			<globmapper from="TEST-*.xml" to="TEST-*_${time}.xml"/>
		</move>
        <echo>File moved</echo>		
		<!-- change the iternal class name of the report to include the date and time-->
		<xslt basedir="${outTmpDir}" destdir="${reportDir}" extension=".xml" style="change_suite_name.xslt" includes="TEST-*${time}.xml"/>
        <echo>XSLT finisched.</echo>				
		<delete>
			<fileset dir="${outTmpDir}" includes="TEST-*.xml"/>
		</delete>
        <echo>Old File deleted</echo>				
		<!-- generate summary report -->
		<antcall target="report"/>
	</target>
	<!-- Create a summary report in HTML format in the directory set in reportDir -->
	<!-- CLI usage: ant report -->
	<target name="report">
	    <echo>Start generating report</echo>	
		<mkdir dir="${reportDir}"/>
		<delete dir="${reportDir}/html"/>
		<junitreport todir="${reportDir}">
			<fileset dir="${reportDir}">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="${reportDir}/html"/>
		</junitreport>
		<echo>End generating report</echo>	
	</target>
	<!-- Task to run the UModel StylesTest JUnit test class -->
	<!-- CLI usage: ant stylestest -->
	<target name="stylestest">
		<antcall target="junittest">
			<param name="class" value="com.altova.umodel.regression.testcases.StylesTest"/>
		</antcall>
	</target>
	<!-- Task to run the ExcelRobot class, to get scrollbar icons for your OS/system theme -->
	<!-- Excel has to be installed, but not running for this to work.-->
	<!-- CLI usage: ant scrollbar -->
	<target name="scrollbar">
		<echo message="Excel has to be installed, but not running for this to work."/>
		<antcall target="javarun">
			<param name="class" value="com.altova.robots.ExcelRobot"/>
		</antcall>
	</target>
	<!-- Task to run the RobotsCenter application. -->
	<!-- CLI usage: ant rc -->
	<target name="rc">
		<antcall target="javarun">
			<param name="class" value="com.altova.util.RobotsCenter"/>
		</antcall>
	</target>
	<echo>End of Ant</echo>
</project>
