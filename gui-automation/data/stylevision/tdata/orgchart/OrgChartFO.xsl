<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2011 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:ipo="http://www.altova.com/IPO" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="http://www.xmlspy.com/schemas/orgchart" xmlns:ts="http://www.xmlspy.com/schemas/textstate" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:altova="http://www.altova.com" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="#all">
	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>
	<xsl:param name="SV_OutputFormat" select="'PDF'"/>
	<xsl:param name="SV_GeneratedFileNameAmendment" as="xs:string?"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:import-schema schema-location="OrgChart.xsd" namespace="http://www.xmlspy.com/schemas/orgchart"/>
	<xsl:variable name="fo:layout-master-set">
		<fo:layout-master-set>
			<fo:simple-page-master master-name="page-master-164003520" margin-left="0.6in" margin-right="0.6in" page-height="11in" page-width="8.5in">
				<fo:region-body margin-top="0.79in" margin-bottom="0.79in" column-count="1" column-gap="0.50in"/>
			</fo:simple-page-master>
		</fo:layout-master-set>
	</xsl:variable>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:variable name="altova:design-xslt-tree-view-before-toc">
		<fo:root>
			<xsl:copy-of select="$fo:layout-master-set"/>
			<altova:bookmark-tree/>
			<fo:page-sequence master-reference="page-master-164003520" initial-page-number="1" format="1">
				<fo:flow flow-name="xsl-region-body">
					<fo:block>
						<xsl:for-each select="$XML">
							<xsl:for-each select="n1:OrgChart">
								<xsl:variable name="MapWidth" as="xs:integer" select="300"/>
								<xsl:for-each select="n1:CompanyLogo">
									<fo:block border-bottom-color="#0588BA" border-bottom-style="solid" border-bottom-width="medium" border-width="4pt" padding-bottom="0.10in" padding-left="0.10in" margin="0pt" space-before="6pt" space-after="6pt">
										<xsl:for-each select="@href">
											<fo:basic-link text-decoration="underline" color="blue">
												<xsl:choose>
													<xsl:when test="substring(string(&apos;http://www.nanonull.com/&apos;), 1, 1) = '#'">
														<xsl:attribute name="internal-destination">
															<xsl:value-of select="substring(string(&apos;http://www.nanonull.com/&apos;), 2)"/>
														</xsl:attribute>
													</xsl:when>
													<xsl:otherwise>
														<xsl:attribute name="external-destination">
															<xsl:text>url(</xsl:text>
															<xsl:call-template name="double-backslash">
																<xsl:with-param name="text">
																	<xsl:value-of select="string(&apos;http://www.nanonull.com/&apos;)"/>
																</xsl:with-param>
																<xsl:with-param name="text-length">
																	<xsl:value-of select="string-length(string(&apos;http://www.nanonull.com/&apos;))"/>
																</xsl:with-param>
															</xsl:call-template>
															<xsl:text>)</xsl:text>
														</xsl:attribute>
													</xsl:otherwise>
												</xsl:choose>
												<fo:external-graphic content-height="0.79in" content-width="1.59in">
													<xsl:attribute name="src">
														<xsl:text>url(</xsl:text>
														<xsl:call-template name="double-backslash">
															<xsl:with-param name="text">
																<xsl:value-of select="string(.)"/>
															</xsl:with-param>
															<xsl:with-param name="text-length">
																<xsl:value-of select="string-length(string(.))"/>
															</xsl:with-param>
														</xsl:call-template>
														<xsl:text>)</xsl:text>
													</xsl:attribute>
												</fo:external-graphic>
												<fo:inline>
													<xsl:text>&#x200B;</xsl:text>
												</fo:inline>
											</fo:basic-link>
										</xsl:for-each>
									</fo:block>
								</xsl:for-each>
								<altova:newline-handler/>
								<xsl:variable name="altova:table">
									<fo:table table-layout="fixed" width="100%" border-spacing="0">
										<fo:table-column column-width="40%"/>
										<fo:table-column column-width="60%"/>
										<xsl:variable name="altova:CurrContextGrid_09C4BCA0" select="."/>
										<xsl:variable name="altova:ColumnData">
											<altova:Internal/>
										</xsl:variable>
										<fo:table-body start-indent="0pt">
											<xsl:variable name="altova:tablerows">
												<fo:table-row>
													<fo:table-cell padding="0" display-align="before">
														<fo:block text-align="left">
															<xsl:for-each select="n1:Name">
																<altova:inline-container-substitute color="#0588BA" font-family="Arial" font-size="20pt" font-weight="bold">
																	<xsl:apply-templates/>
																</altova:inline-container-substitute>
															</xsl:for-each>
														</fo:block>
													</fo:table-cell>
													<fo:table-cell number-rows-spanned="2" padding="0" display-align="center">
														<fo:block text-align="right">
															<fo:external-graphic content-height="2.08in" content-width="4.17in">
																<xsl:attribute name="src">
																	<xsl:variable name="altova:nChartWidthPx" select="400"/>
																	<xsl:variable name="altova:nChartHeightPx" select="200"/>
																	<xsl:variable name="altova:extChartConfig" as="item()*">
																		<xsl:variable name="altova:ext-chart-settings" as="item()*">
																			<chart-config>
																				<General SettingsVersion="1" ChartKind="Pie3d" Title="Overall workforce split" ShowLegend="0"/>
																				<Pie AddPercentToLabels="1"/>
																			</chart-config>
																		</xsl:variable>
																		<xsl:sequence select="altovaext:create-chart-config-from-xml( $altova:ext-chart-settings )"/>
																	</xsl:variable>
																	<xsl:variable name="altova:chartDataSeries" as="item()*">
																		<xsl:variable name="altova:chartDataRows" as="item()*">
																			<xsl:for-each select="(distinct-values(n1:Office/n1:Department/n1:Name))">
																				<xsl:sequence select="altovaext:create-chart-data-row( (.),  (for $i in . return count($XML//n1:Department[n1:Name=$i]/n1:Person))  )"/>
																			</xsl:for-each>
																		</xsl:variable>
																		<xsl:variable name="altova:chartDataSeriesNames" as="xs:string*" select=" ( (&quot;Series 1&quot;), &apos;&apos; )[1]"/>
																		<xsl:sequence select="altovaext:create-chart-data-series-from-rows( $altova:chartDataSeriesNames, $altova:chartDataRows)"/>
																	</xsl:variable>
																	<xsl:variable name="altova:nodeChart" select="altovaext:create-chart( $altova:extChartConfig, ( $altova:chartDataSeries), false() )"/>
																	<xsl:variable name="altova:sChartFileName" select="concat( if ( exists( $SV_GeneratedFileNameAmendment) ) then $SV_GeneratedFileNameAmendment else &apos;OrgChart&apos;, &apos;_SVGeneratedChart&apos;, &apos;_&apos;, altovaext:generate-auto-number( &apos;sv_chart&apos;, 1, 1, &apos;&apos; ), &apos;.png&apos; )"/>
																	<xsl:variable name="altova:sChartFileNameNoPath" select="for $matchexpr in &apos;.*(\\|/)([^/\\]+)$&apos; return if ( matches( $altova:sChartFileName, $matchexpr ) ) then replace( $altova:sChartFileName, $matchexpr, &apos;$2&apos; ) else $altova:sChartFileName"/>
																	<xsl:text>url(</xsl:text>
																	<xsl:variable name="sChartUri" as="xs:string" select="$altova:sChartFileName, altovaext:save-chart-image( $altova:nodeChart, $altova:sChartFileName, $altova:nChartWidthPx, $altova:nChartHeightPx )"/>
																	<xsl:call-template name="double-backslash">
																		<xsl:with-param name="text" select="$sChartUri"/>
																		<xsl:with-param name="text-length" select="string-length(string($sChartUri))"/>
																	</xsl:call-template>
																	<xsl:text>)</xsl:text>
																</xsl:attribute>
															</fo:external-graphic>
															<fo:inline>
																<xsl:text>&#x200B;</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
												<fo:table-row>
													<fo:table-cell padding="0" display-align="after">
														<fo:block text-align="left">
															<altova:newline-handler/>
															<fo:inline font-family="Arial" font-size="14pt" font-weight="bold">
																<xsl:text>Quick Finder</xsl:text>
															</fo:inline>
															<altova:newline-handler/>
														</fo:block>
													</fo:table-cell>
												</fo:table-row>
											</xsl:variable>
											<xsl:choose>
												<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
													<xsl:copy-of select="$altova:tablerows"/>
												</xsl:when>
												<xsl:otherwise>
													<fo:table-row>
														<fo:table-cell>
															<fo:block/>
														</fo:table-cell>
													</fo:table-row>
												</xsl:otherwise>
											</xsl:choose>
										</fo:table-body>
									</fo:table>
								</xsl:variable>
								<xsl:choose>
									<xsl:when test="not($altova:table//fo:table-row)"/>
									<xsl:otherwise>
										<xsl:copy-of select="$altova:table"/>
									</xsl:otherwise>
								</xsl:choose>
								<altova:toc altova:name="toc"/>
								<xsl:for-each select="n1:Office">
									<xsl:variable name="Zoom" as="xs:integer" select="16"/>
									<xsl:variable name="MapType" as="xs:string" select="&apos;roadmap&apos;"/>
									<altova:level>
										<xsl:choose>
											<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
												<fo:block border-top-color="#0588ba" border-top-style="solid" border-top-width="2pt" margin="0pt" space-before="6pt" space-after="6pt">
													<altova:newline-handler/>
													<altova:marker altova:name="toc">
														<xsl:for-each select="n1:Name">
															<altova:inline-container-substitute color="#707070" font-family="Arial" font-size="15pt" font-weight="bold">
																<xsl:apply-templates/>
															</altova:inline-container-substitute>
														</xsl:for-each>
													</altova:marker>
													<altova:newline-handler/>
													<altova:newline-handler/>
													<fo:inline color="#808080" font-family="Arial" font-size="small" font-weight="bold">
														<xsl:text>Location: </xsl:text>
													</fo:inline>
													<xsl:choose>
														<xsl:when test="not(n1:Address or  n1:Address_EU)">
															<xsl:for-each select="n1:Location">
																<fo:inline border="solid 1pt black" padding="2pt">
																	<xsl:choose>
																		<xsl:when test="string(.)='US'">
																			<fo:inline>
																				<xsl:text>US</xsl:text>
																			</fo:inline>
																		</xsl:when>
																		<xsl:when test="string(.)='EU'">
																			<fo:inline>
																				<xsl:text>EU</xsl:text>
																			</fo:inline>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:text>US</xsl:text>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</fo:inline>
															</xsl:for-each>
														</xsl:when>
														<xsl:otherwise>
															<xsl:for-each select="n1:Location">
																<altova:inline-container-substitute color="#808080" font-weight="bold">
																	<xsl:apply-templates/>
																</altova:inline-container-substitute>
															</xsl:for-each>
														</xsl:otherwise>
													</xsl:choose>
												</fo:block>
											</xsl:when>
											<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
												<fo:block border-top-color="#0588ba" border-top-style="solid" border-top-width="2pt" margin="0pt" space-before="6pt" space-after="6pt">
													<altova:newline-handler/>
													<altova:marker altova:name="toc">
														<xsl:for-each select="n1:Name">
															<altova:inline-container-substitute color="#707070" font-family="Arial" font-size="15pt" font-weight="bold">
																<xsl:apply-templates/>
															</altova:inline-container-substitute>
														</xsl:for-each>
													</altova:marker>
													<altova:newline-handler/>
													<altova:newline-handler/>
													<fo:inline color="#808080" font-family="Arial" font-size="small" font-weight="bold">
														<xsl:text>Location: </xsl:text>
													</fo:inline>
													<xsl:choose>
														<xsl:when test="not(n1:Address or  n1:Address_EU)">
															<xsl:for-each select="n1:Location">
																<fo:inline border="solid 1pt black" padding="2pt">
																	<xsl:choose>
																		<xsl:when test="string(.)='US'">
																			<fo:inline>
																				<xsl:text>US</xsl:text>
																			</fo:inline>
																		</xsl:when>
																		<xsl:when test="string(.)='EU'">
																			<fo:inline>
																				<xsl:text>EU</xsl:text>
																			</fo:inline>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:text>US</xsl:text>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</fo:inline>
															</xsl:for-each>
														</xsl:when>
														<xsl:otherwise>
															<xsl:for-each select="n1:Location">
																<altova:inline-container-substitute color="#808080" font-weight="bold">
																	<xsl:apply-templates/>
																</altova:inline-container-substitute>
															</xsl:for-each>
														</xsl:otherwise>
													</xsl:choose>
												</fo:block>
											</xsl:when>
											<xsl:when test="$SV_OutputFormat = &apos;RTF&apos; or $SV_OutputFormat = &apos;Word2007&apos;">
												<fo:block break-after="page">
													<fo:leader leader-pattern="space"/>
												</fo:block>
												<fo:block margin="0pt" space-before="6pt" space-after="6pt">
													<altova:newline-handler/>
													<altova:marker altova:name="toc">
														<xsl:for-each select="n1:Name">
															<altova:inline-container-substitute color="#707070" font-family="Arial" font-size="15pt" font-weight="bold">
																<xsl:apply-templates/>
															</altova:inline-container-substitute>
														</xsl:for-each>
													</altova:marker>
													<altova:newline-handler/>
													<altova:newline-handler/>
													<fo:inline color="#808080" font-family="Arial" font-size="small" font-weight="bold">
														<xsl:text>Location: </xsl:text>
													</fo:inline>
													<xsl:choose>
														<xsl:when test="not(n1:Address or  n1:Address_EU)">
															<xsl:for-each select="n1:Location">
																<fo:inline border="solid 1pt black" padding="2pt">
																	<xsl:choose>
																		<xsl:when test="string(.)='US'">
																			<fo:inline>
																				<xsl:text>US</xsl:text>
																			</fo:inline>
																		</xsl:when>
																		<xsl:when test="string(.)='EU'">
																			<fo:inline>
																				<xsl:text>EU</xsl:text>
																			</fo:inline>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:text>US</xsl:text>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</fo:inline>
															</xsl:for-each>
														</xsl:when>
														<xsl:otherwise>
															<xsl:for-each select="n1:Location">
																<altova:inline-container-substitute color="#808080" font-weight="bold">
																	<xsl:apply-templates/>
																</altova:inline-container-substitute>
															</xsl:for-each>
														</xsl:otherwise>
													</xsl:choose>
												</fo:block>
											</xsl:when>
											<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
												<fo:block margin="0pt" space-before="6pt" space-after="6pt">
													<altova:newline-handler/>
													<altova:marker altova:name="toc">
														<xsl:for-each select="n1:Name">
															<altova:inline-container-substitute color="#707070" font-family="Arial" font-size="15pt" font-weight="bold">
																<xsl:apply-templates/>
															</altova:inline-container-substitute>
														</xsl:for-each>
													</altova:marker>
													<altova:newline-handler/>
													<altova:newline-handler/>
													<fo:inline color="#808080" font-family="Arial" font-size="small" font-weight="bold">
														<xsl:text>Location: </xsl:text>
													</fo:inline>
													<xsl:choose>
														<xsl:when test="not(n1:Address or  n1:Address_EU)">
															<xsl:for-each select="n1:Location">
																<fo:inline border="solid 1pt black" padding="2pt">
																	<xsl:choose>
																		<xsl:when test="string(.)='US'">
																			<fo:inline>
																				<xsl:text>US</xsl:text>
																			</fo:inline>
																		</xsl:when>
																		<xsl:when test="string(.)='EU'">
																			<fo:inline>
																				<xsl:text>EU</xsl:text>
																			</fo:inline>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline>
																				<xsl:text>US</xsl:text>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</fo:inline>
															</xsl:for-each>
														</xsl:when>
														<xsl:otherwise>
															<xsl:for-each select="n1:Location">
																<altova:inline-container-substitute color="#808080" font-weight="bold">
																	<xsl:apply-templates/>
																</altova:inline-container-substitute>
															</xsl:for-each>
														</xsl:otherwise>
													</xsl:choose>
												</fo:block>
											</xsl:when>
										</xsl:choose>
										<xsl:variable name="altova:table">
											<fo:table width="100%" table-layout="fixed" border="solid 1pt gray" border-spacing="-1pt">
												<fo:table-column column-width="35%"/>
												<fo:table-column column-width="65%"/>
												<xsl:variable name="altova:CurrContextGrid_09C875A8" select="."/>
												<xsl:variable name="altova:ColumnData">
													<altova:Internal/>
												</xsl:variable>
												<fo:table-body start-indent="0pt">
													<xsl:variable name="altova:tablerows">
														<fo:table-row>
															<fo:table-cell border="solid 1pt gray" padding="2pt" display-align="center">
																<fo:block text-align="left">
																	<xsl:choose>
																		<xsl:when test="n1:Location =&quot;US&quot;">
																			<xsl:for-each select="n1:Address">
																				<xsl:variable name="altova:table">
																					<fo:table width="100%" table-layout="fixed" border-spacing="4px">
																						<fo:table-column column-width="30%"/>
																						<fo:table-column column-width="70%"/>
																						<xsl:variable name="altova:CurrContextGrid_09C87728" select="."/>
																						<xsl:variable name="altova:ColumnData">
																							<altova:Internal/>
																						</xsl:variable>
																						<fo:table-body start-indent="0pt">
																							<xsl:variable name="altova:tablerows">
																								<fo:table-row>
																									<fo:table-cell padding="2pt" display-align="center">
																										<fo:block text-align="left">
																											<fo:inline font-weight="bold">
																												<xsl:text>Street: </xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																									<fo:table-cell padding="2pt" display-align="center">
																										<fo:block text-align="left">
																											<xsl:for-each select="ipo:street">
																												<altova:inline-container-substitute>
																													<xsl:apply-templates/>
																												</altova:inline-container-substitute>
																											</xsl:for-each>
																										</fo:block>
																									</fo:table-cell>
																								</fo:table-row>
																								<fo:table-row>
																									<fo:table-cell padding="2pt" display-align="center">
																										<fo:block text-align="left">
																											<fo:inline font-weight="bold">
																												<xsl:text>City:</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																									<fo:table-cell padding="2pt" display-align="center">
																										<fo:block text-align="left">
																											<xsl:for-each select="ipo:city">
																												<altova:inline-container-substitute>
																													<xsl:apply-templates/>
																												</altova:inline-container-substitute>
																											</xsl:for-each>
																										</fo:block>
																									</fo:table-cell>
																								</fo:table-row>
																								<fo:table-row>
																									<fo:table-cell padding="2pt" display-align="center">
																										<fo:block text-align="left">
																											<fo:inline font-weight="bold">
																												<xsl:text>State &amp; Zip:</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																									<fo:table-cell padding="2pt" display-align="center">
																										<fo:block text-align="left">
																											<xsl:for-each select="ipo:state">
																												<fo:inline border="solid 1pt black" padding="2pt">
																													<xsl:choose>
																														<xsl:when test="string(.)='AK'">
																															<fo:inline>
																																<xsl:text>AK</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='AL'">
																															<fo:inline>
																																<xsl:text>AL</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='AR'">
																															<fo:inline>
																																<xsl:text>AR</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='AZ'">
																															<fo:inline>
																																<xsl:text>AZ</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='CA'">
																															<fo:inline>
																																<xsl:text>CA</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='CO'">
																															<fo:inline>
																																<xsl:text>CO</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='CT'">
																															<fo:inline>
																																<xsl:text>CT</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='DC'">
																															<fo:inline>
																																<xsl:text>DC</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='DE'">
																															<fo:inline>
																																<xsl:text>DE</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='FL'">
																															<fo:inline>
																																<xsl:text>FL</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='GA'">
																															<fo:inline>
																																<xsl:text>GA</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='GU'">
																															<fo:inline>
																																<xsl:text>GU</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='HI'">
																															<fo:inline>
																																<xsl:text>HI</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='IA'">
																															<fo:inline>
																																<xsl:text>IA</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='ID'">
																															<fo:inline>
																																<xsl:text>ID</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='IL'">
																															<fo:inline>
																																<xsl:text>IL</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='IN'">
																															<fo:inline>
																																<xsl:text>IN</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='KS'">
																															<fo:inline>
																																<xsl:text>KS</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='KY'">
																															<fo:inline>
																																<xsl:text>KY</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='LA'">
																															<fo:inline>
																																<xsl:text>LA</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='MA'">
																															<fo:inline>
																																<xsl:text>MA</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='MD'">
																															<fo:inline>
																																<xsl:text>MD</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='ME'">
																															<fo:inline>
																																<xsl:text>ME</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='MI'">
																															<fo:inline>
																																<xsl:text>MI</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='MN'">
																															<fo:inline>
																																<xsl:text>MN</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='MO'">
																															<fo:inline>
																																<xsl:text>MO</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='MS'">
																															<fo:inline>
																																<xsl:text>MS</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='MT'">
																															<fo:inline>
																																<xsl:text>MT</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='NC'">
																															<fo:inline>
																																<xsl:text>NC</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='ND'">
																															<fo:inline>
																																<xsl:text>ND</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='NE'">
																															<fo:inline>
																																<xsl:text>NE</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='NH'">
																															<fo:inline>
																																<xsl:text>NH</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='NJ'">
																															<fo:inline>
																																<xsl:text>NJ</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='NM'">
																															<fo:inline>
																																<xsl:text>NM</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='NV'">
																															<fo:inline>
																																<xsl:text>NV</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='NY'">
																															<fo:inline>
																																<xsl:text>NY</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='OH'">
																															<fo:inline>
																																<xsl:text>OH</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='OK'">
																															<fo:inline>
																																<xsl:text>OK</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='OR'">
																															<fo:inline>
																																<xsl:text>OR</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='PA'">
																															<fo:inline>
																																<xsl:text>PA</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='PR'">
																															<fo:inline>
																																<xsl:text>PR</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='RI'">
																															<fo:inline>
																																<xsl:text>RI</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='SC'">
																															<fo:inline>
																																<xsl:text>SC</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='SD'">
																															<fo:inline>
																																<xsl:text>SD</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='TN'">
																															<fo:inline>
																																<xsl:text>TN</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='TX'">
																															<fo:inline>
																																<xsl:text>TX</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='UT'">
																															<fo:inline>
																																<xsl:text>UT</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='VA'">
																															<fo:inline>
																																<xsl:text>VA</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='VI'">
																															<fo:inline>
																																<xsl:text>VI</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='VT'">
																															<fo:inline>
																																<xsl:text>VT</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='WA'">
																															<fo:inline>
																																<xsl:text>WA</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='WI'">
																															<fo:inline>
																																<xsl:text>WI</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='WV'">
																															<fo:inline>
																																<xsl:text>WV</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:when test="string(.)='WY'">
																															<fo:inline>
																																<xsl:text>WY</xsl:text>
																															</fo:inline>
																														</xsl:when>
																														<xsl:otherwise>
																															<fo:inline>
																																<xsl:text>AK</xsl:text>
																															</fo:inline>
																														</xsl:otherwise>
																													</xsl:choose>
																												</fo:inline>
																											</xsl:for-each>
																											<fo:inline>
																												<xsl:text>&#160;</xsl:text>
																											</fo:inline>
																											<xsl:for-each select="ipo:zip">
																												<fo:inline border="solid 1pt black" padding="2pt">
																													<xsl:value-of select="substring(string(.),1,26)"/>
																												</fo:inline>
																											</xsl:for-each>
																										</fo:block>
																									</fo:table-cell>
																								</fo:table-row>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
																									<xsl:copy-of select="$altova:tablerows"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:table-row>
																										<fo:table-cell>
																											<fo:block/>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:otherwise>
																							</xsl:choose>
																						</fo:table-body>
																					</fo:table>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="not($altova:table//fo:table-row)"/>
																					<xsl:otherwise>
																						<xsl:copy-of select="$altova:table"/>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																		<xsl:when test="n1:Location =&quot;EU&quot;">
																			<xsl:for-each select="n1:Address_EU">
																				<xsl:variable name="altova:table">
																					<fo:table width="100%" table-layout="fixed" border-spacing="4px">
																						<fo:table-column column-width="30%"/>
																						<fo:table-column column-width="70%"/>
																						<xsl:variable name="altova:CurrContextGrid_09C87C08" select="."/>
																						<xsl:variable name="altova:ColumnData">
																							<altova:Internal/>
																						</xsl:variable>
																						<fo:table-body start-indent="0pt">
																							<xsl:variable name="altova:tablerows">
																								<fo:table-row>
																									<fo:table-cell padding="2pt" display-align="center">
																										<fo:block text-align="left">
																											<fo:inline font-weight="bold">
																												<xsl:text>Street:</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																									<fo:table-cell padding="2pt" display-align="center">
																										<fo:block text-align="left">
																											<xsl:for-each select="ipo:street">
																												<fo:inline border="solid 1pt black" padding="2pt">
																													<xsl:value-of select="substring(string(.),1,26)"/>
																												</fo:inline>
																											</xsl:for-each>
																										</fo:block>
																									</fo:table-cell>
																								</fo:table-row>
																								<fo:table-row>
																									<fo:table-cell padding="2pt" display-align="center">
																										<fo:block text-align="left">
																											<fo:inline font-weight="bold">
																												<xsl:text>City:</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																									<fo:table-cell padding="2pt" display-align="center">
																										<fo:block text-align="left">
																											<xsl:for-each select="ipo:city">
																												<fo:inline border="solid 1pt black" padding="2pt">
																													<xsl:value-of select="substring(string(.),1,26)"/>
																												</fo:inline>
																											</xsl:for-each>
																										</fo:block>
																									</fo:table-cell>
																								</fo:table-row>
																								<fo:table-row>
																									<fo:table-cell padding="2pt" display-align="center">
																										<fo:block text-align="left">
																											<fo:inline font-weight="bold">
																												<xsl:text>Post Code:</xsl:text>
																											</fo:inline>
																										</fo:block>
																									</fo:table-cell>
																									<fo:table-cell padding="2pt" display-align="center">
																										<fo:block text-align="left">
																											<xsl:for-each select="ipo:postcode">
																												<fo:inline border="solid 1pt black" padding="2pt">
																													<xsl:value-of select="substring(string(.),1,26)"/>
																												</fo:inline>
																											</xsl:for-each>
																										</fo:block>
																									</fo:table-cell>
																								</fo:table-row>
																							</xsl:variable>
																							<xsl:choose>
																								<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
																									<xsl:copy-of select="$altova:tablerows"/>
																								</xsl:when>
																								<xsl:otherwise>
																									<fo:table-row>
																										<fo:table-cell>
																											<fo:block/>
																										</fo:table-cell>
																									</fo:table-row>
																								</xsl:otherwise>
																							</xsl:choose>
																						</fo:table-body>
																					</fo:table>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="not($altova:table//fo:table-row)"/>
																					<xsl:otherwise>
																						<xsl:copy-of select="$altova:table"/>
																					</xsl:otherwise>
																				</xsl:choose>
																			</xsl:for-each>
																		</xsl:when>
																	</xsl:choose>
																</fo:block>
															</fo:table-cell>
															<fo:table-cell number-rows-spanned="2" border="solid 1pt gray" padding="2pt" display-align="before">
																<fo:block text-align="left">
																	<xsl:choose>
																		<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
																			<xsl:variable name="altova:table">
																				<fo:table width="100%" table-layout="fixed" border-spacing="2pt">
																					<fo:table-column column-width="proportional-column-width(1)"/>
																					<fo:table-column column-width="proportional-column-width(1)"/>
																					<xsl:variable name="altova:CurrContextGrid_09C880E8" select="."/>
																					<xsl:variable name="altova:ColumnData">
																						<altova:Internal/>
																					</xsl:variable>
																					<fo:table-body start-indent="0pt">
																						<xsl:variable name="altova:tablerows">
																							<fo:table-row>
																								<fo:table-cell padding="2pt" display-align="center">
																									<fo:block text-align="left">
																										<fo:external-graphic>
																											<xsl:attribute name="src">
																												<xsl:text>url(</xsl:text>
																												<xsl:call-template name="double-backslash">
																													<xsl:with-param name="text">
																														<xsl:value-of select="string(iri-to-uri(for $full_addr in  if ( n1:Location =&quot;US&quot; )
then concat( n1:Address/ipo:street, &apos;,&apos;, n1:Address/ipo:city, &apos;,&apos; , n1:Address/ipo:state, &apos;,&apos;, n1:Address/ipo:zip )
else concat( n1:Address_EU/ipo:street, &apos;,&apos;, n1:Address_EU/ipo:city, &apos;,&apos; , n1:Address_EU/ipo:postcode )
return
  concat( &apos;http://maps.google.com/maps/api/staticmap?center=&apos;, $full_addr,
  &apos;&amp;zoom=&apos;, $Zoom, &apos;&amp;maptype=&apos;, $MapType,
  &apos;&amp;size=&apos;, $MapWidth, &apos;x300&amp;sensor=false&amp;markers=color:red|&apos;, $full_addr)))"/>
																													</xsl:with-param>
																													<xsl:with-param name="text-length">
																														<xsl:value-of select="string-length(string(iri-to-uri(for $full_addr in  if ( n1:Location =&quot;US&quot; )
then concat( n1:Address/ipo:street, &apos;,&apos;, n1:Address/ipo:city, &apos;,&apos; , n1:Address/ipo:state, &apos;,&apos;, n1:Address/ipo:zip )
else concat( n1:Address_EU/ipo:street, &apos;,&apos;, n1:Address_EU/ipo:city, &apos;,&apos; , n1:Address_EU/ipo:postcode )
return
  concat( &apos;http://maps.google.com/maps/api/staticmap?center=&apos;, $full_addr,
  &apos;&amp;zoom=&apos;, $Zoom, &apos;&amp;maptype=&apos;, $MapType,
  &apos;&amp;size=&apos;, $MapWidth, &apos;x300&amp;sensor=false&amp;markers=color:red|&apos;, $full_addr))))"/>
																													</xsl:with-param>
																												</xsl:call-template>
																												<xsl:text>)</xsl:text>
																											</xsl:attribute>
																										</fo:external-graphic>
																										<fo:inline>
																											<xsl:text>&#x200B;</xsl:text>
																										</fo:inline>
																									</fo:block>
																								</fo:table-cell>
																								<fo:table-cell padding="2pt" display-align="before">
																									<fo:block text-align="left">
																										<fo:inline width="0.75in" padding-before="2pt" padding-after="2pt" padding-start="12pt" padding-end="12pt" line-height="18pt" border="solid 1pt #404040" background-color="#D4D0C8">
																											<fo:inline font-size="smaller">
																												<xsl:text>Zoom In</xsl:text>
																											</fo:inline>
																										</fo:inline>
																										<altova:newline-handler/>
																										<fo:inline width="0.75in" padding-before="2pt" padding-after="2pt" padding-start="12pt" padding-end="12pt" line-height="18pt" border="solid 1pt #404040" background-color="#D4D0C8">
																											<fo:inline font-size="smaller">
																												<xsl:text>Zoom Out</xsl:text>
																											</fo:inline>
																										</fo:inline>
																										<altova:newline-handler/>
																										<altova:newline-handler/>
																										<fo:inline width="0.75in" padding-before="2pt" padding-after="2pt" padding-start="12pt" padding-end="12pt" line-height="18pt" border="solid 1pt #404040" background-color="#D4D0C8">
																											<fo:inline font-size="smaller">
																												<xsl:text>Roadmap</xsl:text>
																											</fo:inline>
																										</fo:inline>
																										<altova:newline-handler/>
																										<fo:inline width="0.75in" padding-before="2pt" padding-after="2pt" padding-start="12pt" padding-end="12pt" line-height="18pt" border="solid 1pt #404040" background-color="#D4D0C8">
																											<fo:inline font-size="smaller">
																												<xsl:text>Satellite</xsl:text>
																											</fo:inline>
																										</fo:inline>
																										<altova:newline-handler/>
																										<fo:inline width="0.75in" padding-before="2pt" padding-after="2pt" padding-start="12pt" padding-end="12pt" line-height="18pt" border="solid 1pt #404040" background-color="#D4D0C8">
																											<fo:inline font-size="smaller">
																												<xsl:text>Hybrid</xsl:text>
																											</fo:inline>
																										</fo:inline>
																										<altova:newline-handler/>
																										<altova:newline-handler/>
																										<fo:inline width="0.75in" padding-before="2pt" padding-after="2pt" padding-start="12pt" padding-end="12pt" line-height="18pt" border="solid 1pt #404040" background-color="#D4D0C8">
																											<fo:inline font-size="smaller">
																												<xsl:text>Bigger =&gt;</xsl:text>
																											</fo:inline>
																										</fo:inline>
																										<altova:newline-handler/>
																										<fo:inline width="0.75in" padding-before="2pt" padding-after="2pt" padding-start="12pt" padding-end="12pt" line-height="18pt" border="solid 1pt #404040" background-color="#D4D0C8">
																											<fo:inline font-size="smaller">
																												<xsl:text>Smaller &lt;=</xsl:text>
																											</fo:inline>
																										</fo:inline>
																										<altova:newline-handler/>
																									</fo:block>
																								</fo:table-cell>
																							</fo:table-row>
																						</xsl:variable>
																						<xsl:choose>
																							<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
																								<xsl:copy-of select="$altova:tablerows"/>
																							</xsl:when>
																							<xsl:otherwise>
																								<fo:table-row>
																									<fo:table-cell>
																										<fo:block/>
																									</fo:table-cell>
																								</fo:table-row>
																							</xsl:otherwise>
																						</xsl:choose>
																					</fo:table-body>
																				</fo:table>
																			</xsl:variable>
																			<xsl:choose>
																				<xsl:when test="not($altova:table//fo:table-row)"/>
																				<xsl:otherwise>
																					<xsl:copy-of select="$altova:table"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:external-graphic>
																				<xsl:attribute name="src">
																					<xsl:text>url(</xsl:text>
																					<xsl:call-template name="double-backslash">
																						<xsl:with-param name="text">
																							<xsl:value-of select="string(iri-to-uri(for $full_addr in  if ( n1:Location =&quot;US&quot; )
then concat( n1:Address/ipo:street, &apos;,&apos;, n1:Address/ipo:city, &apos;,&apos; , n1:Address/ipo:state, &apos;,&apos;, n1:Address/ipo:zip )
else concat( n1:Address_EU/ipo:street, &apos;,&apos;, n1:Address_EU/ipo:city, &apos;,&apos; , n1:Address_EU/ipo:postcode )
return
  concat( &apos;http://maps.google.com/maps/api/staticmap?center=&apos;, $full_addr,
  &apos;&amp;zoom=&apos;, $Zoom, &apos;&amp;maptype=&apos;, $MapType,
  &apos;&amp;size=&apos;, if ($SV_OutputFormat eq &apos;RTF&apos; or $SV_OutputFormat eq &apos;Word2007&apos;) then &apos;400&apos; else &apos;300&apos;, &apos;x300&amp;sensor=false&amp;markers=color:red|&apos;, $full_addr)))"/>
																						</xsl:with-param>
																						<xsl:with-param name="text-length">
																							<xsl:value-of select="string-length(string(iri-to-uri(for $full_addr in  if ( n1:Location =&quot;US&quot; )
then concat( n1:Address/ipo:street, &apos;,&apos;, n1:Address/ipo:city, &apos;,&apos; , n1:Address/ipo:state, &apos;,&apos;, n1:Address/ipo:zip )
else concat( n1:Address_EU/ipo:street, &apos;,&apos;, n1:Address_EU/ipo:city, &apos;,&apos; , n1:Address_EU/ipo:postcode )
return
  concat( &apos;http://maps.google.com/maps/api/staticmap?center=&apos;, $full_addr,
  &apos;&amp;zoom=&apos;, $Zoom, &apos;&amp;maptype=&apos;, $MapType,
  &apos;&amp;size=&apos;, if ($SV_OutputFormat eq &apos;RTF&apos; or $SV_OutputFormat eq &apos;Word2007&apos;) then &apos;400&apos; else &apos;300&apos;, &apos;x300&amp;sensor=false&amp;markers=color:red|&apos;, $full_addr))))"/>
																						</xsl:with-param>
																					</xsl:call-template>
																					<xsl:text>)</xsl:text>
																				</xsl:attribute>
																			</fo:external-graphic>
																			<fo:inline>
																				<xsl:text>&#x200B;</xsl:text>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</fo:block>
															</fo:table-cell>
														</fo:table-row>
														<fo:table-row>
															<fo:table-cell border="solid 1pt gray" padding="2pt" display-align="center">
																<fo:block text-align="left">
																	<xsl:variable name="altova:table">
																		<fo:table width="100%" table-layout="fixed" border-spacing="4">
																			<fo:table-column column-width="30%"/>
																			<fo:table-column column-width="70%"/>
																			<xsl:variable name="altova:CurrContextGrid_09CBF300" select="."/>
																			<xsl:variable name="altova:ColumnData">
																				<altova:Internal/>
																			</xsl:variable>
																			<fo:table-body start-indent="0pt">
																				<xsl:variable name="altova:tablerows">
																					<fo:table-row>
																						<fo:table-cell padding="2pt" display-align="center">
																							<fo:block text-align="left">
																								<fo:inline font-weight="bold">
																									<xsl:text>Phone:</xsl:text>
																								</fo:inline>
																							</fo:block>
																						</fo:table-cell>
																						<fo:table-cell padding="2pt" display-align="center">
																							<fo:block text-align="left">
																								<xsl:for-each select="n1:Phone">
																									<altova:inline-container-substitute>
																										<xsl:apply-templates/>
																									</altova:inline-container-substitute>
																								</xsl:for-each>
																							</fo:block>
																						</fo:table-cell>
																					</fo:table-row>
																					<fo:table-row>
																						<fo:table-cell padding="2pt" display-align="center">
																							<fo:block text-align="left">
																								<fo:inline font-weight="bold">
																									<xsl:text>Fax:</xsl:text>
																								</fo:inline>
																							</fo:block>
																						</fo:table-cell>
																						<fo:table-cell padding="2pt" display-align="center">
																							<fo:block text-align="left">
																								<xsl:for-each select="n1:Fax">
																									<altova:inline-container-substitute>
																										<xsl:apply-templates/>
																									</altova:inline-container-substitute>
																								</xsl:for-each>
																							</fo:block>
																						</fo:table-cell>
																					</fo:table-row>
																					<fo:table-row>
																						<fo:table-cell padding="2pt" display-align="center">
																							<fo:block text-align="left">
																								<fo:inline font-weight="bold">
																									<xsl:text>E-mail:</xsl:text>
																								</fo:inline>
																							</fo:block>
																						</fo:table-cell>
																						<fo:table-cell padding="2pt" display-align="center">
																							<fo:block text-align="left">
																								<xsl:for-each select="n1:EMail">
																									<fo:basic-link text-decoration="underline" color="blue">
																										<xsl:choose>
																											<xsl:when test="substring(string(concat(&apos;mailto:&apos;,.)), 1, 1) = '#'">
																												<xsl:attribute name="internal-destination">
																													<xsl:value-of select="substring(string(concat(&apos;mailto:&apos;,.)), 2)"/>
																												</xsl:attribute>
																											</xsl:when>
																											<xsl:otherwise>
																												<xsl:attribute name="external-destination">
																													<xsl:text>url(</xsl:text>
																													<xsl:call-template name="double-backslash">
																														<xsl:with-param name="text">
																															<xsl:value-of select="string(concat(&apos;mailto:&apos;,.))"/>
																														</xsl:with-param>
																														<xsl:with-param name="text-length">
																															<xsl:value-of select="string-length(string(concat(&apos;mailto:&apos;,.)))"/>
																														</xsl:with-param>
																													</xsl:call-template>
																													<xsl:text>)</xsl:text>
																												</xsl:attribute>
																											</xsl:otherwise>
																										</xsl:choose>
																										<altova:inline-container-substitute>
																											<xsl:apply-templates/>
																										</altova:inline-container-substitute>
																									</fo:basic-link>
																								</xsl:for-each>
																							</fo:block>
																						</fo:table-cell>
																					</fo:table-row>
																				</xsl:variable>
																				<xsl:choose>
																					<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
																						<xsl:copy-of select="$altova:tablerows"/>
																					</xsl:when>
																					<xsl:otherwise>
																						<fo:table-row>
																							<fo:table-cell>
																								<fo:block/>
																							</fo:table-cell>
																						</fo:table-row>
																					</xsl:otherwise>
																				</xsl:choose>
																			</fo:table-body>
																		</fo:table>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="not($altova:table//fo:table-row)"/>
																		<xsl:otherwise>
																			<xsl:copy-of select="$altova:table"/>
																		</xsl:otherwise>
																	</xsl:choose>
																</fo:block>
															</fo:table-cell>
														</fo:table-row>
													</xsl:variable>
													<xsl:choose>
														<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
															<xsl:copy-of select="$altova:tablerows"/>
														</xsl:when>
														<xsl:otherwise>
															<fo:table-row>
																<fo:table-cell>
																	<fo:block/>
																</fo:table-cell>
															</fo:table-row>
														</xsl:otherwise>
													</xsl:choose>
												</fo:table-body>
											</fo:table>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="not($altova:table//fo:table-row)"/>
											<xsl:otherwise>
												<xsl:copy-of select="$altova:table"/>
											</xsl:otherwise>
										</xsl:choose>
										<altova:newline-handler/>
										<xsl:choose>
											<xsl:when test="n1:Address">
												<xsl:for-each select="n1:Address">
													<xsl:for-each select="ipo:city">
														<altova:inline-container-substitute color="#004080" font-family="Arial" font-size="10pt" font-weight="bold" text-decoration="underline">
															<xsl:apply-templates/>
														</altova:inline-container-substitute>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:when>
											<xsl:when test="n1:Address_EU">
												<xsl:for-each select="n1:Address_EU">
													<xsl:for-each select="ipo:city">
														<altova:inline-container-substitute color="#004080" font-family="Arial" font-size="10pt" font-weight="bold" text-decoration="underline">
															<xsl:apply-templates/>
														</altova:inline-container-substitute>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:when>
										</xsl:choose>
										<fo:inline color="#004080" font-family="Arial" font-size="10pt" font-weight="bold" text-decoration="underline">
											<xsl:text> Office Summary:</xsl:text>
										</fo:inline>
										<fo:inline>
											<xsl:text>&#160; </xsl:text>
										</fo:inline>
										<fo:inline color="#004080" font-family="Arial" font-size="10pt" font-weight="bold">
											<xsl:value-of select="count(n1:Department)"/>
										</fo:inline>
										<fo:inline color="#004080" font-family="Arial" font-size="10pt" font-weight="bold">
											<xsl:text> department</xsl:text>
										</fo:inline>
										<xsl:if test="count(n1:Department) != 1">
											<fo:inline color="#004080" font-family="Arial" font-size="10pt" font-weight="bold">
												<xsl:text>s</xsl:text>
											</fo:inline>
										</xsl:if>
										<fo:inline color="#004080" font-family="Arial" font-size="10pt" font-weight="bold">
											<xsl:text>, </xsl:text>
										</fo:inline>
										<fo:inline color="#004080" font-family="Arial" font-size="10pt" font-weight="bold">
											<xsl:value-of select="count(n1:Department/n1:Person)"/>
										</fo:inline>
										<fo:inline color="#004080" font-family="Arial" font-size="10pt" font-weight="bold">
											<xsl:text> employee</xsl:text>
										</fo:inline>
										<xsl:if test="count(n1:Department/n1:Person) != 1">
											<fo:inline color="#004080" font-family="Arial" font-size="10pt" font-weight="bold">
												<xsl:text>s</xsl:text>
											</fo:inline>
										</xsl:if>
										<fo:inline color="#004080" font-family="Arial" font-size="10pt" font-weight="bold">
											<xsl:text>.</xsl:text>
										</fo:inline>
										<xsl:for-each select="n1:Desc">
											<xsl:for-each select="n1:para">
												<fo:block margin="0pt" space-before="6pt" space-after="6pt">
													<altova:inline-container-substitute>
														<xsl:apply-templates/>
													</altova:inline-container-substitute>
												</fo:block>
											</xsl:for-each>
										</xsl:for-each>
										<xsl:for-each select="n1:Department">
											<altova:level>
												<altova:marker altova:name="toc">
													<xsl:for-each select="n1:Name">
														<altova:inline-container-substitute color="#D39658" font-family="Arial" font-weight="bold">
															<xsl:apply-templates/>
														</altova:inline-container-substitute>
													</xsl:for-each>
												</altova:marker>
												<fo:inline>
													<xsl:text>&#160;</xsl:text>
												</fo:inline>
												<fo:inline color="#D39658" font-family="Arial" font-weight="bold">
													<xsl:text>( </xsl:text>
												</fo:inline>
												<fo:inline color="#D39658" font-family="Arial" font-weight="bold">
													<xsl:value-of select="count(n1:Person)"/>
												</fo:inline>
												<fo:inline color="#D39658" font-family="Arial" font-weight="bold">
													<xsl:text> )</xsl:text>
												</fo:inline>
												<altova:newline-handler/>
												<xsl:variable name="altova:table">
													<fo:table table-layout="fixed" width="100%" border="solid 1pt gray" border-spacing="-1pt">
														<fo:table-column column-width="10%"/>
														<fo:table-column column-width="12%"/>
														<fo:table-column column-width="16%"/>
														<fo:table-column column-width="5%"/>
														<fo:table-column column-width="23%"/>
														<fo:table-column column-width="10%"/>
														<fo:table-column column-width="8%"/>
														<fo:table-column column-width="8%"/>
														<fo:table-column column-width="8%"/>
														<xsl:variable name="altova:CurrContextGrid_09CBFC60" select="."/>
														<xsl:variable name="altova:ColumnData">
															<altova:Internal/>
														</xsl:variable>
														<fo:table-header start-indent="0pt">
															<fo:table-row background-color="#D2C8AE">
																<fo:table-cell number-rows-spanned="2" border="solid 1pt gray" padding="3" background-color="#D2C8AE" display-align="center">
																	<fo:block text-align="center">
																		<fo:inline color="#606060" font-family="Arial" font-weight="bold">
																			<xsl:text>First</xsl:text>
																		</fo:inline>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell number-rows-spanned="2" border="solid 1pt gray" padding="3" background-color="#D2C8AE" display-align="center">
																	<fo:block text-align="center">
																		<fo:inline color="#606060" font-family="Arial" font-weight="bold">
																			<xsl:text>Last</xsl:text>
																		</fo:inline>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell number-rows-spanned="2" border="solid 1pt gray" padding="3" background-color="#D2C8AE" display-align="center">
																	<fo:block text-align="center">
																		<fo:inline color="#606060" font-family="Arial" font-weight="bold">
																			<xsl:text>Title</xsl:text>
																		</fo:inline>
																		<altova:newline-handler/>
																		<xsl:choose>
																			<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;"/>
																			<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																				<fo:inline color="#606060" font-family="Arial" font-size="x-small" font-weight="bold">
																					<xsl:text>(sorted by)</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;RTF&apos; or $SV_OutputFormat = &apos;Word2007&apos;">
																				<fo:inline color="#606060" font-family="Arial" font-size="x-small" font-weight="bold">
																					<xsl:text>(sorted by)</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																				<fo:inline color="#606060" font-family="Arial" font-size="x-small" font-weight="bold">
																					<xsl:text>(sorted by)</xsl:text>
																				</fo:inline>
																			</xsl:when>
																		</xsl:choose>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell number-rows-spanned="2" border="solid 1pt gray" padding="3" background-color="#D2C8AE" display-align="center">
																	<fo:block text-align="center">
																		<fo:inline color="#606060" font-family="Arial" font-weight="bold">
																			<xsl:text>Ext</xsl:text>
																		</fo:inline>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell number-rows-spanned="2" border="solid 1pt gray" padding="3" background-color="#D2C8AE" display-align="center">
																	<fo:block text-align="center">
																		<fo:inline color="#606060" font-family="Arial" font-weight="bold">
																			<xsl:text>EMail</xsl:text>
																		</fo:inline>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell number-rows-spanned="2" border="solid 1pt gray" padding="3" background-color="#D2C8AE" display-align="center">
																	<fo:block text-align="center">
																		<fo:inline color="#606060" font-family="Arial" font-weight="bold">
																			<xsl:text>Shares</xsl:text>
																		</fo:inline>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell number-columns-spanned="3" border="solid 1pt gray" padding="3" display-align="center">
																	<fo:block text-align="center">
																		<fo:inline color="#606060" font-family="Arial" font-weight="bold">
																			<xsl:text>Leave</xsl:text>
																		</fo:inline>
																	</fo:block>
																</fo:table-cell>
															</fo:table-row>
															<fo:table-row>
																<fo:table-cell border="solid 1pt gray" padding="3" background-color="#D2C8AE" display-align="center">
																	<fo:block text-align="center">
																		<fo:inline color="#606060" font-family="Arial" font-weight="bold">
																			<xsl:text>Total</xsl:text>
																		</fo:inline>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border="solid 1pt gray" padding="3" background-color="#D2C8AE" display-align="center">
																	<fo:block text-align="center">
																		<fo:inline color="#606060" font-family="Arial" font-weight="bold">
																			<xsl:text>Used</xsl:text>
																		</fo:inline>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell border="solid 1pt gray" padding="3" background-color="#D2C8AE" display-align="center">
																	<fo:block text-align="center">
																		<fo:inline color="#606060" font-family="Arial" font-weight="bold">
																			<xsl:text>Left</xsl:text>
																		</fo:inline>
																	</fo:block>
																</fo:table-cell>
															</fo:table-row>
														</fo:table-header>
														<fo:table-footer start-indent="0pt">
															<fo:table-row background-color="#F2F0E6">
																<fo:table-cell number-columns-spanned="5" border="solid 1pt gray" padding="3" display-align="before">
																	<fo:block text-align="left">
																		<fo:inline color="#004080" font-family="Arial" font-size="8pt" font-weight="bold">
																			<xsl:text>Employees:&#160; </xsl:text>
																		</fo:inline>
																		<fo:inline color="#004080" font-family="Arial" font-size="8pt" font-weight="bold">
																			<xsl:value-of select="count(  n1:Person  )"/>
																		</fo:inline>
																		<fo:inline font-size="8pt">
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																		<fo:inline color="#004080" font-family="Arial" font-size="8pt" font-weight="bold">
																			<xsl:text>(</xsl:text>
																		</fo:inline>
																		<fo:inline color="#004080" font-family="Arial" font-size="8pt" font-weight="bold">
																			<xsl:value-of select="round ((count(  n1:Person  ) ) div ( count( ../n1:Department/ n1:Person  ) ) * 100)"/>
																		</fo:inline>
																		<fo:inline color="#004080" font-family="Arial" font-size="8pt" font-weight="bold">
																			<xsl:text>% of Office, </xsl:text>
																		</fo:inline>
																		<fo:inline color="#004080" font-family="Arial" font-size="8pt" font-weight="bold">
																			<xsl:value-of select="round ((count(  n1:Person  ) ) div ( count( ../../n1:Office/n1:Department/ n1:Person  ) ) * 100)"/>
																		</fo:inline>
																		<fo:inline color="#004080" font-family="Arial" font-size="8pt" font-weight="bold">
																			<xsl:text>% of Company)</xsl:text>
																		</fo:inline>
																	</fo:block>
																</fo:table-cell>
																<fo:table-cell number-columns-spanned="4" border="solid 1pt gray" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<fo:inline color="#004080" font-family="Arial" font-size="8pt" font-weight="bold">
																			<xsl:text>Shares: </xsl:text>
																		</fo:inline>
																		<fo:inline color="#004080" font-family="Arial" font-size="8pt" font-weight="bold">
																			<xsl:value-of select="sum(  n1:Person/n1:Shares  )"/>
																		</fo:inline>
																		<fo:inline font-size="8pt">
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																		<fo:inline color="#004080" font-family="Arial" font-size="8pt" font-weight="bold">
																			<xsl:text>(</xsl:text>
																		</fo:inline>
																		<fo:inline color="#004080" font-family="Arial" font-size="8pt" font-weight="bold">
																			<xsl:value-of select="round((sum(  n1:Person/n1:Shares  ) ) div (sum(../n1:Department/ n1:Person/n1:Shares ) ) * 100)"/>
																		</fo:inline>
																		<fo:inline color="#004080" font-family="Arial" font-size="8pt" font-weight="bold">
																			<xsl:text>% of Office, </xsl:text>
																		</fo:inline>
																		<fo:inline color="#004080" font-family="Arial" font-size="8pt" font-weight="bold">
																			<xsl:value-of select="round((sum(  n1:Person/n1:Shares  ) ) div (sum(../../n1:Office/n1:Department/ n1:Person/n1:Shares  )) * 100)"/>
																		</fo:inline>
																		<fo:inline color="#004080" font-family="Arial" font-size="8pt" font-weight="bold">
																			<xsl:text>% of Company)</xsl:text>
																		</fo:inline>
																	</fo:block>
																</fo:table-cell>
															</fo:table-row>
															<fo:table-row background-color="#F2F0E6">
																<fo:table-cell number-columns-spanned="9" border="solid 1pt gray" padding="3" display-align="center">
																	<fo:block text-align="left">
																		<fo:inline color="#004080" font-family="Arial" font-size="8pt" font-weight="bold">
																			<xsl:text>Non-Shareholders: </xsl:text>
																		</fo:inline>
																		<fo:inline color="#004040" font-family="Arial" font-size="8pt" font-weight="bold">
																			<xsl:text>&#160;</xsl:text>
																		</fo:inline>
																		<xsl:for-each select="n1:Person">
																			<xsl:if test="n1:Shares &lt;= 0 or not (n1:Shares)">
																				<xsl:for-each select="n1:First">
																					<altova:inline-container-substitute color="#004040" font-family="Arial" font-size="8pt" font-weight="bold">
																						<xsl:apply-templates/>
																					</altova:inline-container-substitute>
																				</xsl:for-each>
																				<fo:inline color="#004040" font-family="Arial" font-size="8pt" font-weight="bold">
																					<xsl:text>&#160;</xsl:text>
																				</fo:inline>
																				<xsl:for-each select="n1:Last">
																					<altova:inline-container-substitute color="#004040" font-family="Arial" font-size="8pt" font-weight="bold">
																						<xsl:apply-templates/>
																					</altova:inline-container-substitute>
																				</xsl:for-each>
																				<xsl:if test="following-sibling::n1:Person[n1:Shares&lt;=0 or not(n1:Shares)]">
																					<fo:inline color="#004040" font-family="Arial" font-size="8pt" font-weight="bold">
																						<xsl:text>, </xsl:text>
																					</fo:inline>
																				</xsl:if>
																			</xsl:if>
																		</xsl:for-each>
																		<xsl:if test="count(  n1:Person  ) = count(  n1:Person [n1:Shares&gt;0] )">
																			<fo:inline color="#004040" font-family="Arial" font-size="8pt" font-weight="bold">
																				<xsl:text>None</xsl:text>
																			</fo:inline>
																		</xsl:if>
																		<fo:inline color="#004040" font-family="Arial" font-size="8pt" font-weight="bold">
																			<xsl:text>.</xsl:text>
																		</fo:inline>
																	</fo:block>
																</fo:table-cell>
															</fo:table-row>
														</fo:table-footer>
														<fo:table-body start-indent="0pt">
															<xsl:variable name="altova:tablerows">
																<xsl:for-each select="n1:Person">
																	<xsl:sort select="n1:Title" data-type="text" order="ascending"/>
																	<altova:level>
																		<fo:table-row background-color="{if ( position() mod 2 ) then &quot;antiquewhite&quot; else &quot;navajowhite&quot;}">
																			<fo:table-cell border="solid 1pt gray" padding="3" display-align="center">
																				<fo:block text-align="left">
																					<altova:marker altova:name="toc">
																						<xsl:attribute name="altova:entrytext">
																							<xsl:value-of select="concat(n1:Last,' ',n1:First)"/>
																						</xsl:attribute>
																					</altova:marker>
																					<xsl:for-each select="n1:First">
																						<xsl:choose>
																							<xsl:when test="../n1:Shares &gt; 0">
																								<altova:inline-container-substitute font-size="10pt" font-weight="bold">
																									<xsl:apply-templates/>
																								</altova:inline-container-substitute>
																							</xsl:when>
																							<xsl:otherwise>
																								<altova:inline-container-substitute font-size="10pt">
																									<xsl:apply-templates/>
																								</altova:inline-container-substitute>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</fo:block>
																			</fo:table-cell>
																			<fo:table-cell border="solid 1pt gray" padding="3" display-align="center">
																				<fo:block text-align="left">
																					<xsl:for-each select="n1:Last">
																						<xsl:choose>
																							<xsl:when test="../n1:Shares &gt; 0">
																								<altova:inline-container-substitute font-size="10pt" font-weight="bold">
																									<xsl:apply-templates/>
																								</altova:inline-container-substitute>
																							</xsl:when>
																							<xsl:otherwise>
																								<altova:inline-container-substitute font-size="10pt">
																									<xsl:apply-templates/>
																								</altova:inline-container-substitute>
																							</xsl:otherwise>
																						</xsl:choose>
																					</xsl:for-each>
																				</fo:block>
																			</fo:table-cell>
																			<fo:table-cell border="solid 1pt gray" padding="3" display-align="center">
																				<fo:block text-align="left">
																					<xsl:for-each select="n1:Title">
																						<altova:inline-container-substitute font-size="10pt">
																							<xsl:apply-templates/>
																						</altova:inline-container-substitute>
																					</xsl:for-each>
																				</fo:block>
																			</fo:table-cell>
																			<fo:table-cell border="solid 1pt gray" padding="3" display-align="center">
																				<fo:block text-align="center">
																					<xsl:for-each select="n1:PhoneExt">
																						<altova:inline-container-substitute font-size="10pt">
																							<xsl:apply-templates/>
																						</altova:inline-container-substitute>
																					</xsl:for-each>
																				</fo:block>
																			</fo:table-cell>
																			<fo:table-cell border="solid 1pt gray" padding="3" display-align="center">
																				<fo:block text-align="left">
																					<xsl:for-each select="n1:EMail">
																						<fo:basic-link text-decoration="underline" color="blue">
																							<xsl:choose>
																								<xsl:when test="substring(string(concat(&apos;mailto:&apos;,.)), 1, 1) = '#'">
																									<xsl:attribute name="internal-destination">
																										<xsl:value-of select="substring(string(concat(&apos;mailto:&apos;,.)), 2)"/>
																									</xsl:attribute>
																								</xsl:when>
																								<xsl:otherwise>
																									<xsl:attribute name="external-destination">
																										<xsl:text>url(</xsl:text>
																										<xsl:call-template name="double-backslash">
																											<xsl:with-param name="text">
																												<xsl:value-of select="string(concat(&apos;mailto:&apos;,.))"/>
																											</xsl:with-param>
																											<xsl:with-param name="text-length">
																												<xsl:value-of select="string-length(string(concat(&apos;mailto:&apos;,.)))"/>
																											</xsl:with-param>
																										</xsl:call-template>
																										<xsl:text>)</xsl:text>
																									</xsl:attribute>
																								</xsl:otherwise>
																							</xsl:choose>
																							<altova:inline-container-substitute font-size="10pt">
																								<xsl:apply-templates/>
																							</altova:inline-container-substitute>
																						</fo:basic-link>
																					</xsl:for-each>
																				</fo:block>
																			</fo:table-cell>
																			<fo:table-cell border="solid 1pt gray" padding="3" display-align="center">
																				<fo:block text-align="center">
																					<xsl:for-each select="n1:Shares">
																						<altova:inline-container-substitute font-size="10pt">
																							<xsl:apply-templates/>
																						</altova:inline-container-substitute>
																					</xsl:for-each>
																				</fo:block>
																			</fo:table-cell>
																			<fo:table-cell border="solid 1pt gray" padding="3" display-align="center">
																				<fo:block text-align="center">
																					<xsl:for-each select="n1:LeaveTotal">
																						<altova:inline-container-substitute font-size="10pt">
																							<xsl:apply-templates/>
																						</altova:inline-container-substitute>
																					</xsl:for-each>
																				</fo:block>
																			</fo:table-cell>
																			<fo:table-cell border="solid 1pt gray" padding="3" display-align="center">
																				<fo:block text-align="center">
																					<xsl:for-each select="n1:LeaveUsed">
																						<altova:inline-container-substitute font-size="10pt">
																							<xsl:apply-templates/>
																						</altova:inline-container-substitute>
																					</xsl:for-each>
																				</fo:block>
																			</fo:table-cell>
																			<fo:table-cell border="solid 1pt gray" padding="3" display-align="center">
																				<fo:block text-align="center">
																					<fo:inline font-size="10pt">
																						<xsl:value-of select="n1:LeaveTotal - n1:LeaveUsed"/>
																					</fo:inline>
																				</fo:block>
																			</fo:table-cell>
																		</fo:table-row>
																	</altova:level>
																</xsl:for-each>
															</xsl:variable>
															<xsl:choose>
																<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
																	<xsl:copy-of select="$altova:tablerows"/>
																</xsl:when>
																<xsl:otherwise>
																	<fo:table-row>
																		<fo:table-cell>
																			<fo:block/>
																		</fo:table-cell>
																	</fo:table-row>
																</xsl:otherwise>
															</xsl:choose>
														</fo:table-body>
													</fo:table>
												</xsl:variable>
												<xsl:choose>
													<xsl:when test="not($altova:table//fo:table-row)"/>
													<xsl:otherwise>
														<xsl:copy-of select="$altova:table"/>
													</xsl:otherwise>
												</xsl:choose>
												<altova:newline-handler/>
											</altova:level>
										</xsl:for-each>
										<fo:external-graphic content-height="1.56in" content-width="7.29in">
											<xsl:attribute name="src">
												<xsl:variable name="altova:nChartWidthPx" select="700"/>
												<xsl:variable name="altova:nChartHeightPx" select="150"/>
												<xsl:variable name="altova:extChartConfig" as="item()*">
													<xsl:variable name="altova:ext-chart-settings" as="item()*">
														<chart-config>
															<General SettingsVersion="1" Title="Overview of shares" ShowLegend="0"/>
															<XY>
																<YAxis UseAutoTick="0" ManualTickInterval="500."/>
															</XY>
														</chart-config>
													</xsl:variable>
													<xsl:sequence select="altovaext:create-chart-config-from-xml( $altova:ext-chart-settings )"/>
												</xsl:variable>
												<xsl:variable name="altova:chartDataSeries" as="item()*">
													<xsl:variable name="altova:chartDataRows" as="item()*">
														<xsl:for-each select="(n1:Department/n1:Person[n1:Shares&gt;0])">
															<xsl:sequence select="altovaext:create-chart-data-row( (concat(n1:First, codepoints-to-string( ( 13, 10 ) ), n1:Last)),  (n1:Shares)  )"/>
														</xsl:for-each>
													</xsl:variable>
													<xsl:variable name="altova:chartDataSeriesNames" as="xs:string*" select=" ( (&quot;Series 1&quot;), &apos;&apos; )[1]"/>
													<xsl:sequence select="altovaext:create-chart-data-series-from-rows( $altova:chartDataSeriesNames, $altova:chartDataRows)"/>
												</xsl:variable>
												<xsl:variable name="altova:nodeChart" select="altovaext:create-chart( $altova:extChartConfig, ( $altova:chartDataSeries), false() )"/>
												<xsl:variable name="altova:sChartFileName" select="concat( if ( exists( $SV_GeneratedFileNameAmendment) ) then $SV_GeneratedFileNameAmendment else &apos;OrgChart&apos;, &apos;_SVGeneratedChart&apos;, &apos;_&apos;, altovaext:generate-auto-number( &apos;sv_chart&apos;, 1, 1, &apos;&apos; ), &apos;.png&apos; )"/>
												<xsl:variable name="altova:sChartFileNameNoPath" select="for $matchexpr in &apos;.*(\\|/)([^/\\]+)$&apos; return if ( matches( $altova:sChartFileName, $matchexpr ) ) then replace( $altova:sChartFileName, $matchexpr, &apos;$2&apos; ) else $altova:sChartFileName"/>
												<xsl:text>url(</xsl:text>
												<xsl:variable name="sChartUri" as="xs:string" select="$altova:sChartFileName, altovaext:save-chart-image( $altova:nodeChart, $altova:sChartFileName, $altova:nChartWidthPx, $altova:nChartHeightPx )"/>
												<xsl:call-template name="double-backslash">
													<xsl:with-param name="text" select="$sChartUri"/>
													<xsl:with-param name="text-length" select="string-length(string($sChartUri))"/>
												</xsl:call-template>
												<xsl:text>)</xsl:text>
											</xsl:attribute>
										</fo:external-graphic>
										<fo:inline>
											<xsl:text>&#x200B;</xsl:text>
										</fo:inline>
									</altova:level>
								</xsl:for-each>
								<altova:newline-handler/>
							</xsl:for-each>
						</xsl:for-each>
					</fo:block>
					<fo:block id="SV_RefID_PageTotal"/>
				</fo:flow>
			</fo:page-sequence>
		</fo:root>
	</xsl:variable>
	<xsl:template match="altova:toc[ @altova:name = 'toc' ]" mode="altova:generate-toc-xslt-tree">
		<altova:toc altova:design-id="{generate-id()}">
			<xsl:variable name="altova:current-level-id" select="generate-id( ancestor::altova:level[1] )"/>
			<xsl:for-each select="ancestor::*[self::altova:level | self::fo:root][1]">
				<xsl:for-each select="descendant::altova:level[ ancestor::*[self::altova:level | self::fo:root][1] is current() ]">
					<xsl:variable name="altova:current-level-id" select="generate-id()"/>
					<altova:newline-handler/>
					<xsl:for-each select="descendant::altova:marker[ @altova:name = &apos;toc&apos; and ancestor::altova:level[1] is current() ]">
						<xsl:variable name="altova:current-marker-id" select="generate-id()"/>
						<fo:basic-link text-decoration="underline" color="blue" internal-destination="{generate-id()}">
							<fo:inline font-family="Arial" font-size="12pt" font-weight="bold">
								<xsl:choose>
									<xsl:when test="@altova:entrytext">
										<xsl:value-of select="@altova:entrytext"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:apply-templates mode="altova:extract-text-from-marker">
											<xsl:with-param name="altova:level-design-id" select="$altova:current-level-id"/>
											<xsl:with-param name="altova:marker-design-id" select="$altova:current-marker-id"/>
										</xsl:apply-templates>
									</xsl:otherwise>
								</xsl:choose>
							</fo:inline>
						</fo:basic-link>
					</xsl:for-each>
					<altova:newline-handler/>
					<xsl:variable name="altova:table">
						<fo:table margin-top="2pt" table-layout="fixed" width="100%" border-spacing="0">
							<fo:table-column column-width="50%"/>
							<fo:table-column column-width="50%"/>
							<xsl:variable name="altova:CurrContextGrid_09C4BFA0" select="."/>
							<xsl:variable name="altova:ColumnData">
								<altova:Internal/>
							</xsl:variable>
							<fo:table-body start-indent="0pt">
								<xsl:variable name="altova:tablerows">
									<fo:table-row>
										<fo:table-cell padding="2pt" display-align="center">
											<fo:block text-align="left">
												<fo:inline font-size="10pt" font-weight="bold">
													<xsl:text>Departments</xsl:text>
												</fo:inline>
											</fo:block>
										</fo:table-cell>
										<fo:table-cell padding="2pt" display-align="center">
											<fo:block text-align="left">
												<fo:inline font-size="10pt" font-weight="bold">
													<xsl:text>Persons</xsl:text>
												</fo:inline>
											</fo:block>
										</fo:table-cell>
									</fo:table-row>
								</xsl:variable>
								<xsl:choose>
									<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
										<xsl:copy-of select="$altova:tablerows"/>
									</xsl:when>
									<xsl:otherwise>
										<fo:table-row>
											<fo:table-cell>
												<fo:block/>
											</fo:table-cell>
										</fo:table-row>
									</xsl:otherwise>
								</xsl:choose>
							</fo:table-body>
						</fo:table>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="not($altova:table//fo:table-row)"/>
						<xsl:otherwise>
							<xsl:copy-of select="$altova:table"/>
						</xsl:otherwise>
					</xsl:choose>
					<xsl:for-each select="descendant::altova:level[ ancestor::altova:level[1] is current() ]">
						<xsl:variable name="altova:current-level-id" select="generate-id()"/>
						<xsl:variable name="altova:table">
							<fo:table line-height="12pt" table-layout="fixed" width="100%" border-spacing="0">
								<fo:table-column column-width="50%"/>
								<fo:table-column column-width="50%"/>
								<xsl:variable name="altova:CurrContextGrid_09C4C240" select="."/>
								<xsl:variable name="altova:ColumnData">
									<altova:Internal/>
								</xsl:variable>
								<fo:table-body start-indent="0pt">
									<xsl:variable name="altova:tablerows">
										<fo:table-row background-color="{if ( position() mod 2 ) then &quot;antiquewhite&quot; else &quot;navajowhite&quot;}">
											<fo:table-cell padding="2pt" display-align="before">
												<fo:block text-align="left">
													<xsl:for-each select="descendant::altova:marker[ @altova:name = &apos;toc&apos; and ancestor::altova:level[1] is current() ]">
														<xsl:variable name="altova:current-marker-id" select="generate-id()"/>
														<fo:basic-link text-decoration="underline" color="blue" internal-destination="{generate-id()}">
															<fo:inline font-family="Arial" font-size="10pt" font-weight="bold">
																<altova:num-lvl altova:format="A.1" altova:omit-levels="1" altova:level-design-id="{$altova:current-level-id}"/>
															</fo:inline>
															<fo:inline font-family="Arial" font-size="10pt" font-weight="bold">
																<xsl:text>. </xsl:text>
															</fo:inline>
															<fo:inline font-family="Arial" font-size="10pt" font-weight="bold">
																<xsl:choose>
																	<xsl:when test="@altova:entrytext">
																		<xsl:value-of select="@altova:entrytext"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:apply-templates mode="altova:extract-text-from-marker">
																			<xsl:with-param name="altova:level-design-id" select="$altova:current-level-id"/>
																			<xsl:with-param name="altova:marker-design-id" select="$altova:current-marker-id"/>
																		</xsl:apply-templates>
																	</xsl:otherwise>
																</xsl:choose>
															</fo:inline>
														</fo:basic-link>
													</xsl:for-each>
												</fo:block>
											</fo:table-cell>
											<fo:table-cell padding="2pt" display-align="before">
												<fo:block text-align="left">
													<xsl:for-each select="descendant::altova:level[ ancestor::altova:level[1] is current() ]">
														<xsl:variable name="altova:current-level-id" select="generate-id()"/>
														<xsl:variable name="altova:table">
															<fo:table table-layout="fixed" width="100%" border-spacing="0">
																<fo:table-column column-width="proportional-column-width(1)"/>
																<xsl:variable name="altova:CurrContextGrid_09C4C480" select="."/>
																<xsl:variable name="altova:ColumnData">
																	<altova:Internal/>
																</xsl:variable>
																<fo:table-body start-indent="0pt">
																	<xsl:variable name="altova:tablerows">
																		<fo:table-row>
																			<fo:table-cell padding="0" display-align="before">
																				<fo:block text-align="left">
																					<xsl:for-each select="descendant::altova:marker[ @altova:name = &apos;toc&apos; and ancestor::altova:level[1] is current() ]">
																						<xsl:variable name="altova:current-marker-id" select="generate-id()"/>
																						<fo:basic-link text-decoration="underline" color="blue" internal-destination="{generate-id()}">
																							<fo:inline font-family="Arial" font-size="8pt">
																								<altova:num-lvl altova:format="A.1" altova:omit-levels="1" altova:level-design-id="{$altova:current-level-id}"/>
																							</fo:inline>
																							<fo:inline font-family="Arial" font-size="8pt">
																								<xsl:text>&#160;</xsl:text>
																							</fo:inline>
																							<fo:inline font-family="Arial" font-size="8pt">
																								<xsl:choose>
																									<xsl:when test="@altova:entrytext">
																										<xsl:value-of select="@altova:entrytext"/>
																									</xsl:when>
																									<xsl:otherwise>
																										<xsl:apply-templates mode="altova:extract-text-from-marker">
																											<xsl:with-param name="altova:level-design-id" select="$altova:current-level-id"/>
																											<xsl:with-param name="altova:marker-design-id" select="$altova:current-marker-id"/>
																										</xsl:apply-templates>
																									</xsl:otherwise>
																								</xsl:choose>
																							</fo:inline>
																						</fo:basic-link>
																					</xsl:for-each>
																				</fo:block>
																			</fo:table-cell>
																		</fo:table-row>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
																			<xsl:copy-of select="$altova:tablerows"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:table-row>
																				<fo:table-cell>
																					<fo:block/>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:otherwise>
																	</xsl:choose>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:choose>
															<xsl:when test="not($altova:table//fo:table-row)"/>
															<xsl:otherwise>
																<xsl:copy-of select="$altova:table"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:for-each>
												</fo:block>
											</fo:table-cell>
										</fo:table-row>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
											<xsl:copy-of select="$altova:tablerows"/>
										</xsl:when>
										<xsl:otherwise>
											<fo:table-row>
												<fo:table-cell>
													<fo:block/>
												</fo:table-cell>
											</fo:table-row>
										</xsl:otherwise>
									</xsl:choose>
								</fo:table-body>
							</fo:table>
						</xsl:variable>
						<xsl:choose>
							<xsl:when test="not($altova:table//fo:table-row)"/>
							<xsl:otherwise>
								<xsl:copy-of select="$altova:table"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
		</altova:toc>
	</xsl:template>
	<xsl:template match="altova:toc[ @altova:name = 'toc' ]" mode="altova:generate-bookmark-tree">
		<xsl:variable name="altova:current-level-id" select="generate-id( ancestor::altova:level[1] )"/>
		<xsl:variable name="sublevels">
			<xsl:for-each select="ancestor::*[self::altova:level | self::fo:root][1]">
				<xsl:for-each select="descendant::altova:level[ ancestor::*[self::altova:level | self::fo:root][1] is current() ]">
					<xsl:variable name="altova:current-level-id" select="generate-id()"/>
					<xsl:variable name="sublevels">
						<xsl:for-each select="descendant::altova:level[ ancestor::altova:level[1] is current() ]">
							<xsl:variable name="altova:current-level-id" select="generate-id()"/>
							<xsl:variable name="sublevels">
								<xsl:for-each select="descendant::altova:level[ ancestor::altova:level[1] is current() ]">
									<xsl:variable name="altova:current-level-id" select="generate-id()"/>
									<xsl:variable name="sublevels"/>
									<xsl:variable name="bookmark1">
										<xsl:for-each select="descendant::altova:marker[ @altova:name = 'toc' and ancestor::altova:level[1] is current() ]">
											<xsl:variable name="altova:current-marker-id" select="generate-id()"/>
											<fo:bookmark internal-destination="{generate-id()}">
												<fo:bookmark-title>
													<altova:num-lvl altova:format="A.1" altova:omit-levels="1" altova:level-design-id="{$altova:current-level-id}"/>
													<xsl:text>&#160;</xsl:text>
													<xsl:choose>
														<xsl:when test="@altova:entrytext">
															<xsl:value-of select="@altova:entrytext"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:apply-templates mode="altova:extract-text-from-marker">
																<xsl:with-param name="altova:level-design-id" select="$altova:current-level-id"/>
																<xsl:with-param name="altova:marker-design-id" select="$altova:current-marker-id"/>
															</xsl:apply-templates>
														</xsl:otherwise>
													</xsl:choose>
												</fo:bookmark-title>
												<xsl:if test="position() = 1">
													<xsl:copy-of select="$sublevels"/>
												</xsl:if>
											</fo:bookmark>
										</xsl:for-each>
									</xsl:variable>
									<xsl:choose>
										<xsl:when test="count($bookmark1/fo:bookmark) &gt; 0">
											<xsl:copy-of select="$bookmark1"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:copy-of select="$sublevels"/>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</xsl:variable>
							<xsl:variable name="bookmark1">
								<xsl:for-each select="descendant::altova:marker[ @altova:name = 'toc' and ancestor::altova:level[1] is current() ]">
									<xsl:variable name="altova:current-marker-id" select="generate-id()"/>
									<fo:bookmark internal-destination="{generate-id()}">
										<fo:bookmark-title>
											<altova:num-lvl altova:format="A.1" altova:omit-levels="1" altova:level-design-id="{$altova:current-level-id}"/>
											<xsl:text>. </xsl:text>
											<xsl:choose>
												<xsl:when test="@altova:entrytext">
													<xsl:value-of select="@altova:entrytext"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:apply-templates mode="altova:extract-text-from-marker">
														<xsl:with-param name="altova:level-design-id" select="$altova:current-level-id"/>
														<xsl:with-param name="altova:marker-design-id" select="$altova:current-marker-id"/>
													</xsl:apply-templates>
												</xsl:otherwise>
											</xsl:choose>
										</fo:bookmark-title>
										<xsl:if test="position() = 1">
											<xsl:copy-of select="$sublevels"/>
										</xsl:if>
									</fo:bookmark>
								</xsl:for-each>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="count($bookmark1/fo:bookmark) &gt; 0">
									<xsl:copy-of select="$bookmark1"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:copy-of select="$sublevels"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
					</xsl:variable>
					<xsl:variable name="bookmark1">
						<xsl:for-each select="descendant::altova:marker[ @altova:name = 'toc' and ancestor::altova:level[1] is current() ]">
							<xsl:variable name="altova:current-marker-id" select="generate-id()"/>
							<fo:bookmark internal-destination="{generate-id()}">
								<fo:bookmark-title>
									<xsl:choose>
										<xsl:when test="@altova:entrytext">
											<xsl:value-of select="@altova:entrytext"/>
										</xsl:when>
										<xsl:otherwise>
											<xsl:apply-templates mode="altova:extract-text-from-marker">
												<xsl:with-param name="altova:level-design-id" select="$altova:current-level-id"/>
												<xsl:with-param name="altova:marker-design-id" select="$altova:current-marker-id"/>
											</xsl:apply-templates>
										</xsl:otherwise>
									</xsl:choose>
								</fo:bookmark-title>
								<xsl:if test="position() = 1">
									<xsl:copy-of select="$sublevels"/>
								</xsl:if>
							</fo:bookmark>
						</xsl:for-each>
					</xsl:variable>
					<xsl:choose>
						<xsl:when test="count($bookmark1/fo:bookmark) &gt; 0">
							<xsl:copy-of select="$bookmark1"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:copy-of select="$sublevels"/>
						</xsl:otherwise>
					</xsl:choose>
				</xsl:for-each>
			</xsl:for-each>
		</xsl:variable>
		<xsl:copy-of select="$sublevels"/>
	</xsl:template>
	<xsl:template match="ts:bold">
		<altova:inline-container-substitute font-weight="bold">
			<xsl:apply-templates/>
		</altova:inline-container-substitute>
	</xsl:template>
	<xsl:template match="ts:italic">
		<altova:inline-container-substitute font-style="italic">
			<xsl:apply-templates/>
		</altova:inline-container-substitute>
	</xsl:template>
	<xsl:template match="ts:underline">
		<altova:inline-container-substitute text-decoration="underline">
			<xsl:apply-templates/>
		</altova:inline-container-substitute>
	</xsl:template>
	<xsl:template name="double-backslash">
		<xsl:param name="text"/>
		<xsl:param name="text-length"/>
		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
		<xsl:choose>
			<xsl:when test="$text-after-bs-length = 0">
				<xsl:choose>
					<xsl:when test="substring($text, $text-length) = '\'">
						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\\')"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$text"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
				<xsl:call-template name="double-backslash">
					<xsl:with-param name="text" select="$text-after-bs"/>
					<xsl:with-param name="text-length" select="$text-after-bs-length"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:MakeValueAbsoluteIfPixels">
		<xsl:param name="sValue"/>
		<xsl:variable name="sBeforePx" select="substring-before($sValue, 'px')"/>
		<xsl:choose>
			<xsl:when test="$sBeforePx">
				<xsl:variable name="nLengthOfInteger">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="$sBeforePx"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="nPosOfInteger" select="string-length($sBeforePx) - $nLengthOfInteger + 1"/>
				<xsl:variable name="nValuePx" select="substring($sBeforePx, $nPosOfInteger)"/>
				<xsl:variable name="nValueIn" select="number($nValuePx) div number($altova:nPxPerIn)"/>
				<xsl:variable name="nLengthBeforeInteger" select="string-length($sBeforePx) - $nLengthOfInteger"/>
				<xsl:variable name="sRest">
					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
						<xsl:with-param name="sValue" select="substring-after($sValue, 'px')"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="concat(substring($sBeforePx, 1, $nLengthBeforeInteger), string($nValueIn), 'in', $sRest)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$sValue"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:GetCharCountOfIntegerAtEndOfString">
		<xsl:param name="sText"/>
		<xsl:variable name="sLen" select="string-length($sText)"/>
		<xsl:variable name="cLast" select="substring($sText, $sLen)"/>
		<xsl:choose>
			<xsl:when test="number($cLast) &gt;= 0 and number($cLast) &lt;= 9">
				<xsl:variable name="nResultOfRest">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="substring($sText, 1, $sLen - 1)"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="$nResultOfRest + 1"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>0</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:variable name="altova:toc-xslt-tree1">
		<xsl:for-each select="$altova:design-xslt-tree-view-before-toc">
			<xsl:apply-templates mode="altova:generate-toc-xslt-tree"/>
		</xsl:for-each>
	</xsl:variable>
	<xsl:template match="altova:level" mode="altova:generate-toc-xslt-tree">
		<altova:level altova:design-id="{generate-id()}">
			<xsl:apply-templates mode="#current"/>
		</altova:level>
	</xsl:template>
	<xsl:template match="altova:marker" mode="altova:generate-toc-xslt-tree">
		<altova:marker altova:design-id="{generate-id()}" altova:name="{@altova:name}">
			<xsl:apply-templates mode="#current"/>
		</altova:marker>
	</xsl:template>
	<xsl:template match="@* | text()" mode="altova:generate-toc-xslt-tree"/>
	<xsl:template match="altova:bookmark-tree" mode="altova:generate-toc-xslt-tree">
		<altova:bookmark-tree altova:design-id="{generate-id()}">
			<fo:bookmark-tree>
				<xsl:apply-templates select="$altova:design-xslt-tree-view-before-toc//altova:toc" mode="altova:generate-bookmark-tree"/>
			</fo:bookmark-tree>
		</altova:bookmark-tree>
	</xsl:template>
	<xsl:template match="fo:inline/text()" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="altova:num-lvl" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<xsl:attribute name="altova:level-design-id" select="$altova:level-design-id"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="altova:num-seq" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<xsl:attribute name="altova:marker-design-id" select="generate-id( ancestor::altova:marker[1] )"/>
		</xsl:copy>
	</xsl:template>
	<xsl:variable name="altova:toc-xslt-tree" select="$altova:toc-xslt-tree1"/>
	<xsl:key name="altova:toc-xslt-tree-key" match="altova:level | altova:toc | altova:ref | altova:marker | altova:bookmark-tree" use="@altova:design-id"/>
	<xsl:variable name="altova:design-xslt-tree-view">
		<xsl:for-each select="$altova:design-xslt-tree-view-before-toc">
			<xsl:apply-templates mode="altova:generate-xslt-tree-view"/>
		</xsl:for-each>
	</xsl:variable>
	<xsl:template match="@* | node()" mode="altova:generate-xslt-tree-view">
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="altova:level" mode="altova:generate-xslt-tree-view">
		<xsl:apply-templates select="node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:bookmark-tree | altova:toc | altova:ref" mode="altova:generate-xslt-tree-view">
		<xsl:apply-templates select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', generate-id( current() ) )/node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:marker" mode="altova:generate-xslt-tree-view">
		<fo:wrapper id="{generate-id()}"/>
		<xsl:apply-templates select="node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:num-lvl" mode="altova:generate-xslt-tree-view">
		<xsl:variable name="altova:format" select="@altova:format"/>
		<xsl:variable name="altova:omit-levels" select="@altova:omit-levels"/>
		<xsl:variable name="altova:level-design-id">
			<xsl:choose>
				<xsl:when test="@altova:level-design-id">
					<xsl:value-of select="@altova:level-design-id"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="generate-id( ancestor::altova:level[1] )"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', $altova:level-design-id )">
			<xsl:choose>
				<xsl:when test="$altova:omit-levels">
					<xsl:number level="multiple" count="altova:level[ count( ancestor::altova:level ) >= $altova:omit-levels ]" format="{$altova:format}"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:number level="multiple" count="altova:level" format="{$altova:format}"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="altova:num-seq" mode="altova:generate-xslt-tree-view">
		<xsl:variable name="altova:format" select="@altova:format"/>
		<xsl:variable name="altova:marker-design-id">
			<xsl:choose>
				<xsl:when test="@altova:marker-design-id">
					<xsl:value-of select="@altova:marker-design-id"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="generate-id( ancestor::altova:marker[1] )"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', $altova:marker-design-id )">
			<xsl:variable name="altova:name" select="@altova:name"/>
			<xsl:number level="any" count="altova:marker[ @altova:name = $altova:name ]" format="{$altova:format}"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="fo:bookmark-tree" mode="altova:generate-xslt-tree-view">
		<xsl:if test="*[1] or @*[1]">
			<xsl:copy copy-namespaces="no">
				<xsl:apply-templates mode="#current"/>
			</xsl:copy>
		</xsl:if>
	</xsl:template>
	<xsl:template match="/">
		<xsl:apply-templates select="$altova:design-xslt-tree-view" mode="second-step"/>
	</xsl:template>
	<xsl:template match="altova:inline-container-substitute" mode="second-step">
		<xsl:choose>
			<xsl:when test="empty(for $i in child::node() return index-of(('fo:block', 'fo:block-container', 'fo:list-block', 'fo:table'), name($i))) or name(../..) eq 'fo:list-item-body'">
				<fo:inline>
					<xsl:copy-of select="@* except @altova-DisableOutputEscaping"/>
					<xsl:apply-templates mode="second-step"/>
				</fo:inline>
			</xsl:when>
			<xsl:otherwise>
				<fo:block>
					<xsl:copy-of select="@* except @altova-DisableOutputEscaping"/>
					<xsl:apply-templates mode="second-step"/>
				</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="altova:basic-link-container" mode="second-step">
		<fo:block text-align-last="justify">
			<xsl:apply-templates mode="second-step"/>
		</fo:block>
	</xsl:template>
	<xsl:template match="altova:newline-handler" mode="second-step">
		<xsl:variable name="name-following-sibling" select="name(following-sibling::*[1])"/>
		<xsl:variable name="name-preceding-sibling" select="name(preceding-sibling::*[1])"/>
		<xsl:if test="($name-following-sibling and $name-following-sibling != 'fo:table' and $name-following-sibling != 'altova:newline-handler' and $name-preceding-sibling != 'altova:basic-link-container') or $name-preceding-sibling = 'altova:newline-handler'">
			<fo:block>
				<xsl:if test="($name-preceding-sibling != 'altova:inline-container-substitute' and $name-preceding-sibling != 'fo:inline' and $name-preceding-sibling != 'fo:basic-link') or ($name-following-sibling != 'altova:inline-container-substitute' and $name-following-sibling != 'fo:inline' and $name-following-sibling != 'fo:basic-link')">
					<fo:leader leader-pattern="space"/>
				</xsl:if>
			</fo:block>
		</xsl:if>
	</xsl:template>
	<xsl:template match="*|@*" mode="second-step">
		<xsl:copy>
			<xsl:apply-templates select="*|@* except @altova-DisableOutputEscaping|text()" mode="second-step"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="text()" mode="second-step">
		<xsl:choose>
			<xsl:when test="../@altova-DisableOutputEscaping">
				<xsl:value-of select="." disable-output-escaping="yes"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="altova:number" mode="second-step">
		<xsl:number level="single" count="fo:list-item" format="{@format}" from="fo:list-block"/>
	</xsl:template>
	<xsl:function name="altova:GetChartYValuesForSingleSeries">
		<xsl:param name="seqCategoryLeafPos" as="node()*"/>
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:for-each select="$seqCategoryLeafPos">
			<xsl:element name="altova:Value">
				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>
			</xsl:element>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="nodeCategoryLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>
		<xsl:choose>
			<xsl:when test="count($altova:sCommonContextId) gt 1">
				<xsl:message select="concat('XBRL Chart: Error: Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>
			</xsl:when>
			<xsl:when test="count($altova:sCommonContextId) lt 1">
				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>
				<xsl:sequence select="'altova:no-value'"/>
			</xsl:when>
			<xsl:when test="$bValuesInCategory">
				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">
		<xsl:param name="nodeParam" as="node()"/>
		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>
	</xsl:function>
</xsl:stylesheet>
