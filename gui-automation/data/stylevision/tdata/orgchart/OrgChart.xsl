<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2011 (x64) - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:clitype="clitype" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:ipo="http://www.altova.com/IPO" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:n1="http://www.xmlspy.com/schemas/orgchart" xmlns:ts="http://www.xmlspy.com/schemas/textstate" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:altova="http://www.altova.com" exclude-result-prefixes="#all">
	<xsl:output version="4.0" method="html" indent="no" encoding="UTF-8" use-character-maps="spaces" doctype-public="-//W3C//DTD HTML 4.01 Transitional//EN" doctype-system="http://www.w3.org/TR/html4/loose.dtd"/>
	<xsl:character-map name="spaces">
		<xsl:output-character character="&#160;" string="&amp;nbsp;"/>
	</xsl:character-map>
	<xsl:param name="SV_OutputFormat" select="'HTML'"/>
	<xsl:param name="SV_GeneratedFileNameAmendment" as="xs:string?"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:import-schema schema-location="OrgChart.xsd" namespace="http://www.xmlspy.com/schemas/orgchart"/>
	<xsl:variable name="altova:DesignAfterStep1">
		<html>
			<head>
				<title>
					<xsl:text> </xsl:text>
				</title>
				<meta http-equiv="X-UA-Compatible" content="IE=7"/>
				<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>
				<xsl:comment>[if !IE]&gt;&lt;!</xsl:comment>
				<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%}</style>
				<xsl:comment>&lt;![endif]</xsl:comment>
				<style type="text/css">@page { margin-left:0.6in; margin-right:0.6in; margin-top:0.79in; margin-bottom:0.79in } @media print { br.altova-page-break { page-break-before: always; } }</style>
			</head>
			<body>
				<!-- Design element: Document Section -->
				<!-- Design element: template (source) -->
				<xsl:for-each select="$XML">
					<!-- Design element: template (element) -->
					<xsl:for-each select="n1:OrgChart">
						<xsl:variable name="MapWidth" as="xs:integer" select="300"/>
						<!-- Design element: template (element) -->
						<xsl:for-each select="n1:CompanyLogo">
							<!-- Design element: paragraph -->
							<div style="border-bottom-color:#0588BA; border-bottom-style:solid; border-bottom-width:medium; border-width:4pt; padding-bottom:10px; padding-left:10px; ">
								<!-- Design element: template (attribute) -->
								<xsl:for-each select="@href">
									<!-- Design element: hyperlink -->
									<a>
										<xsl:choose>
											<xsl:when test="substring(string(&apos;http://www.nanonull.com/&apos;), 1, 1) = '#'">
												<xsl:attribute name="href">
													<xsl:value-of select="&apos;http://www.nanonull.com/&apos;"/>
												</xsl:attribute>
											</xsl:when>
											<xsl:otherwise>
												<xsl:attribute name="href">
													<xsl:if test="substring(string(&apos;http://www.nanonull.com/&apos;), 2, 1) = ':'">
														<xsl:text>file:///</xsl:text>
													</xsl:if>
													<xsl:value-of select="translate(string(&apos;http://www.nanonull.com/&apos;), '&#x5c;', '/')"/>
												</xsl:attribute>
											</xsl:otherwise>
										</xsl:choose>
										<!-- Design element: image -->
										<img style="height:76px; width:153px; " border="0">
											<xsl:attribute name="src">
												<xsl:if test="substring(string(.), 2, 1) = ':'">
													<xsl:text>file:///</xsl:text>
												</xsl:if>
												<xsl:value-of select="translate(string(.), '&#x5c;', '/')"/>
											</xsl:attribute>
											<xsl:attribute name="alt"/>
										</img>
									</a>
								</xsl:for-each>
							</div>
						</xsl:for-each>
						<!-- Design element: break -->
						<br/>
						<!-- Design element: table -->
						<table border="0" cellpadding="0" cellspacing="0" width="100%">
							<xsl:variable name="altova:CurrContextGrid_00000000184D6D60" select="."/>
							<xsl:variable name="altova:ColumnData">
								<altova:Internal/>
							</xsl:variable>
							<!-- Design element: table body (columns) -->
							<!-- Design element: table body (rows) -->
							<tbody>
								<!-- Design element: table row -->
								<tr>
									<!-- Design element: table cell -->
									<td valign="top" width="40%">
										<!-- Design element: template (element) -->
										<xsl:for-each select="n1:Name">
											<!-- Design element: content -->
											<span style="color:#0588BA; font-family:Arial; font-size:20pt; font-weight:bold; ">
												<xsl:apply-templates/>
											</span>
										</xsl:for-each>
									</td>
									<!-- Design element: table cell -->
									<td rowspan="2" style="text-align:right; " width="60%">
										<!-- Design element: chart -->
										<img style="height:200px; width:400px; ">
											<xsl:variable name="altova:nChartWidthPx" select="400"/>
											<xsl:variable name="altova:nChartHeightPx" select="200"/>
											<xsl:variable name="altova:extChartConfig" as="item()*">
												<xsl:variable name="altova:ext-chart-settings" as="item()*">
													<chart-config>
														<General SettingsVersion="1" ChartKind="Pie3d" Title="Overall workforce split" ShowLegend="0"/>
														<Pie AddPercentToLabels="1"/>
													</chart-config>
												</xsl:variable>
												<xsl:sequence select="altovaext:create-chart-config-from-xml( $altova:ext-chart-settings )"/>
											</xsl:variable>
											<xsl:variable name="altova:chartDataSeries" as="item()*">
												<xsl:variable name="altova:chartDataRows" as="item()*">
													<xsl:for-each select="(distinct-values(n1:Office/n1:Department/n1:Name))">
														<xsl:sequence select="altovaext:create-chart-data-row( (.),  (for $i in . return count($XML//n1:Department[n1:Name=$i]/n1:Person))  )"/>
													</xsl:for-each>
												</xsl:variable>
												<xsl:variable name="altova:chartDataSeriesNames" as="xs:string*" select=" ( (&quot;Series 1&quot;), &apos;&apos; )[1]"/>
												<xsl:sequence select="altovaext:create-chart-data-series-from-rows( $altova:chartDataSeriesNames, $altova:chartDataRows)"/>
											</xsl:variable>
											<xsl:variable name="altova:nodeChart" select="altovaext:create-chart( $altova:extChartConfig, ( $altova:chartDataSeries), false() )"/>
											<xsl:variable name="altova:sChartFileName" select="concat( if ( exists( $SV_GeneratedFileNameAmendment) ) then $SV_GeneratedFileNameAmendment else &apos;OrgChart&apos;, &apos;_SVGeneratedChart&apos;, &apos;_&apos;, $SV_OutputFormat, &apos;_&apos;, altovaext:generate-auto-number( &apos;sv_chart&apos;, 1, 1, &apos;&apos; ), &apos;.png&apos; )"/>
											<xsl:variable name="altova:sChartFileNameNoPath" select="for $matchexpr in &apos;.*(\\|/)([^/\\]+)$&apos; return if ( matches( $altova:sChartFileName, $matchexpr ) ) then replace( $altova:sChartFileName, $matchexpr, &apos;$2&apos; ) else $altova:sChartFileName"/>
											<xsl:attribute name="alt" select="'Altova StyleVision Chart'"/>
											<xsl:attribute name="src" select="(:iri-to-uri:)( $altova:sChartFileName ), altovaext:save-chart-image( $altova:nodeChart, $altova:sChartFileName, $altova:nChartWidthPx, $altova:nChartHeightPx  )"/>
										</img>
									</td>
								</tr>
								<!-- Design element: table row -->
								<tr>
									<!-- Design element: table cell -->
									<td valign="bottom" width="40%">
										<!-- Design element: break -->
										<br/>
										<!-- Design element: text -->
										<span style="font-family:Arial; font-size:14pt; font-weight:bold; ">
											<xsl:text>Quick Finder</xsl:text>
										</span>
										<!-- Design element: break -->
										<br/>
									</td>
									<!-- Design element: table cell -->
								</tr>
							</tbody>
						</table>
						<!-- Design element: TOC -->
						<altova:toc altova:name="toc"/>
						<!-- Design element: template (element) -->
						<xsl:for-each select="n1:Office">
							<xsl:variable name="Zoom" as="xs:integer" select="16"/>
							<xsl:variable name="MapType" as="xs:string" select="&apos;roadmap&apos;"/>
							<altova:level>
								<!-- Design element: condition -->
								<xsl:choose>
									<!-- Design element: when -->
									<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
										<!-- Design element: paragraph -->
										<div style="border-top-color:#0588ba; border-top-style:solid; border-top-width:2pt; ">
											<!-- Design element: break -->
											<br/>
											<!-- Design element: TOC bookmark -->
											<altova:marker altova:name="toc">
												<!-- Design element: template (element) -->
												<xsl:for-each select="n1:Name">
													<!-- Design element: content -->
													<span style="color:#707070; font-family:Arial; font-size:15pt; font-weight:bold; ">
														<xsl:apply-templates/>
													</span>
												</xsl:for-each>
											</altova:marker>
											<!-- Design element: break -->
											<br/>
											<!-- Design element: break -->
											<br/>
											<!-- Design element: text -->
											<span style="color:#808080; font-family:Arial; font-size:small; font-weight:bold; ">
												<xsl:text>Location: </xsl:text>
											</span>
											<!-- Design element: condition -->
											<xsl:choose>
												<!-- Design element: when -->
												<xsl:when test="not(n1:Address or  n1:Address_EU)">
													<!-- Design element: template (element) -->
													<xsl:for-each select="n1:Location">
														<!-- Design element: combo box -->
														<select>
															<option value="US">
																<xsl:if test="string(.)='US'">
																	<xsl:attribute name="selected">selected</xsl:attribute>
																</xsl:if>US</option>
															<option value="EU">
																<xsl:if test="string(.)='EU'">
																	<xsl:attribute name="selected">selected</xsl:attribute>
																</xsl:if>EU</option>
														</select>
													</xsl:for-each>
												</xsl:when>
												<!-- Design element: when -->
												<xsl:otherwise>
													<!-- Design element: template (element) -->
													<xsl:for-each select="n1:Location">
														<!-- Design element: content -->
														<span style="color:#808080; font-weight:bold; ">
															<xsl:apply-templates/>
														</span>
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>
										</div>
									</xsl:when>
									<!-- Design element: when -->
									<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
										<!-- Design element: paragraph -->
										<div style="border-top-color:#0588ba; border-top-style:solid; border-top-width:2pt; ">
											<!-- Design element: break -->
											<br/>
											<!-- Design element: TOC bookmark -->
											<altova:marker altova:name="toc">
												<!-- Design element: template (element) -->
												<xsl:for-each select="n1:Name">
													<!-- Design element: content -->
													<span style="color:#707070; font-family:Arial; font-size:15pt; font-weight:bold; ">
														<xsl:apply-templates/>
													</span>
												</xsl:for-each>
											</altova:marker>
											<!-- Design element: break -->
											<br/>
											<!-- Design element: break -->
											<br/>
											<!-- Design element: text -->
											<span style="color:#808080; font-family:Arial; font-size:small; font-weight:bold; ">
												<xsl:text>Location: </xsl:text>
											</span>
											<!-- Design element: condition -->
											<xsl:choose>
												<!-- Design element: when -->
												<xsl:when test="not(n1:Address or  n1:Address_EU)">
													<!-- Design element: template (element) -->
													<xsl:for-each select="n1:Location">
														<!-- Design element: combo box -->
														<select>
															<option value="US">
																<xsl:if test="string(.)='US'">
																	<xsl:attribute name="selected">selected</xsl:attribute>
																</xsl:if>US</option>
															<option value="EU">
																<xsl:if test="string(.)='EU'">
																	<xsl:attribute name="selected">selected</xsl:attribute>
																</xsl:if>EU</option>
														</select>
													</xsl:for-each>
												</xsl:when>
												<!-- Design element: when -->
												<xsl:otherwise>
													<!-- Design element: template (element) -->
													<xsl:for-each select="n1:Location">
														<!-- Design element: content -->
														<span style="color:#808080; font-weight:bold; ">
															<xsl:apply-templates/>
														</span>
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>
										</div>
									</xsl:when>
									<!-- Design element: when -->
									<xsl:when test="$SV_OutputFormat = &apos;RTF&apos; or $SV_OutputFormat = &apos;Word2007&apos;">
										<!-- Design element: break -->
										<br class="altova-page-break" clear="all"/>
										<!-- Design element: paragraph -->
										<div>
											<!-- Design element: break -->
											<br/>
											<!-- Design element: TOC bookmark -->
											<altova:marker altova:name="toc">
												<!-- Design element: template (element) -->
												<xsl:for-each select="n1:Name">
													<!-- Design element: content -->
													<span style="color:#707070; font-family:Arial; font-size:15pt; font-weight:bold; ">
														<xsl:apply-templates/>
													</span>
												</xsl:for-each>
											</altova:marker>
											<!-- Design element: break -->
											<br/>
											<!-- Design element: break -->
											<br/>
											<!-- Design element: text -->
											<span style="color:#808080; font-family:Arial; font-size:small; font-weight:bold; ">
												<xsl:text>Location: </xsl:text>
											</span>
											<!-- Design element: condition -->
											<xsl:choose>
												<!-- Design element: when -->
												<xsl:when test="not(n1:Address or  n1:Address_EU)">
													<!-- Design element: template (element) -->
													<xsl:for-each select="n1:Location">
														<!-- Design element: combo box -->
														<select>
															<option value="US">
																<xsl:if test="string(.)='US'">
																	<xsl:attribute name="selected">selected</xsl:attribute>
																</xsl:if>US</option>
															<option value="EU">
																<xsl:if test="string(.)='EU'">
																	<xsl:attribute name="selected">selected</xsl:attribute>
																</xsl:if>EU</option>
														</select>
													</xsl:for-each>
												</xsl:when>
												<!-- Design element: when -->
												<xsl:otherwise>
													<!-- Design element: template (element) -->
													<xsl:for-each select="n1:Location">
														<!-- Design element: content -->
														<span style="color:#808080; font-weight:bold; ">
															<xsl:apply-templates/>
														</span>
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>
										</div>
									</xsl:when>
									<!-- Design element: when -->
									<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
										<!-- Design element: paragraph -->
										<div>
											<!-- Design element: break -->
											<br/>
											<!-- Design element: TOC bookmark -->
											<altova:marker altova:name="toc">
												<!-- Design element: template (element) -->
												<xsl:for-each select="n1:Name">
													<!-- Design element: content -->
													<span style="color:#707070; font-family:Arial; font-size:15pt; font-weight:bold; ">
														<xsl:apply-templates/>
													</span>
												</xsl:for-each>
											</altova:marker>
											<!-- Design element: break -->
											<br/>
											<!-- Design element: break -->
											<br/>
											<!-- Design element: text -->
											<span style="color:#808080; font-family:Arial; font-size:small; font-weight:bold; ">
												<xsl:text>Location: </xsl:text>
											</span>
											<!-- Design element: condition -->
											<xsl:choose>
												<!-- Design element: when -->
												<xsl:when test="not(n1:Address or  n1:Address_EU)">
													<!-- Design element: template (element) -->
													<xsl:for-each select="n1:Location">
														<!-- Design element: combo box -->
														<select>
															<option value="US">
																<xsl:if test="string(.)='US'">
																	<xsl:attribute name="selected">selected</xsl:attribute>
																</xsl:if>US</option>
															<option value="EU">
																<xsl:if test="string(.)='EU'">
																	<xsl:attribute name="selected">selected</xsl:attribute>
																</xsl:if>EU</option>
														</select>
													</xsl:for-each>
												</xsl:when>
												<!-- Design element: when -->
												<xsl:otherwise>
													<!-- Design element: template (element) -->
													<xsl:for-each select="n1:Location">
														<!-- Design element: content -->
														<span style="color:#808080; font-weight:bold; ">
															<xsl:apply-templates/>
														</span>
													</xsl:for-each>
												</xsl:otherwise>
											</xsl:choose>
										</div>
									</xsl:when>
								</xsl:choose>
								<!-- Design element: table -->
								<table style="width:100%; " border="1" cellspacing="0">
									<xsl:variable name="altova:CurrContextGrid_000000001853CAF0" select="."/>
									<xsl:variable name="altova:ColumnData">
										<altova:Internal/>
									</xsl:variable>
									<!-- Design element: table body (columns) -->
									<!-- Design element: table body (rows) -->
									<tbody>
										<!-- Design element: table row -->
										<tr>
											<!-- Design element: table cell -->
											<td style="width:35%; " valign="middle" width="300px">
												<!-- Design element: condition -->
												<xsl:choose>
													<!-- Design element: when -->
													<xsl:when test="n1:Location =&quot;US&quot;">
														<!-- Design element: template (element) -->
														<xsl:for-each select="n1:Address">
															<!-- Design element: table -->
															<table style="width:100%; " border="0" cellspacing="4px" width="100%">
																<xsl:variable name="altova:CurrContextGrid_0000000018CF3A30" select="."/>
																<xsl:variable name="altova:ColumnData">
																	<altova:Internal/>
																</xsl:variable>
																<!-- Design element: table body (columns) -->
																<!-- Design element: table body (rows) -->
																<tbody>
																	<!-- Design element: table row -->
																	<tr>
																		<!-- Design element: table cell -->
																		<td width="30%">
																			<!-- Design element: text -->
																			<span style="font-weight:bold; ">
																				<xsl:text>Street: </xsl:text>
																			</span>
																		</td>
																		<!-- Design element: table cell -->
																		<td width="70%">
																			<!-- Design element: template (element) -->
																			<xsl:for-each select="ipo:street">
																				<!-- Design element: content -->
																				<xsl:apply-templates/>
																			</xsl:for-each>
																		</td>
																	</tr>
																	<!-- Design element: table row -->
																	<tr>
																		<!-- Design element: table cell -->
																		<td width="30%">
																			<!-- Design element: text -->
																			<span style="font-weight:bold; ">
																				<xsl:text>City:</xsl:text>
																			</span>
																		</td>
																		<!-- Design element: table cell -->
																		<td width="70%">
																			<!-- Design element: template (element) -->
																			<xsl:for-each select="ipo:city">
																				<!-- Design element: content -->
																				<xsl:apply-templates/>
																			</xsl:for-each>
																		</td>
																	</tr>
																	<!-- Design element: table row -->
																	<tr>
																		<!-- Design element: table cell -->
																		<td width="30%">
																			<!-- Design element: text -->
																			<span style="font-weight:bold; ">
																				<xsl:text>State &amp; Zip:</xsl:text>
																			</span>
																		</td>
																		<!-- Design element: table cell -->
																		<td width="70%">
																			<!-- Design element: template (element) -->
																			<xsl:for-each select="ipo:state">
																				<!-- Design element: combo box -->
																				<select>
																					<option value="AK">
																						<xsl:if test="string(.)='AK'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>AK</option>
																					<option value="AL">
																						<xsl:if test="string(.)='AL'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>AL</option>
																					<option value="AR">
																						<xsl:if test="string(.)='AR'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>AR</option>
																					<option value="AZ">
																						<xsl:if test="string(.)='AZ'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>AZ</option>
																					<option value="CA">
																						<xsl:if test="string(.)='CA'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>CA</option>
																					<option value="CO">
																						<xsl:if test="string(.)='CO'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>CO</option>
																					<option value="CT">
																						<xsl:if test="string(.)='CT'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>CT</option>
																					<option value="DC">
																						<xsl:if test="string(.)='DC'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>DC</option>
																					<option value="DE">
																						<xsl:if test="string(.)='DE'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>DE</option>
																					<option value="FL">
																						<xsl:if test="string(.)='FL'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>FL</option>
																					<option value="GA">
																						<xsl:if test="string(.)='GA'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>GA</option>
																					<option value="GU">
																						<xsl:if test="string(.)='GU'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>GU</option>
																					<option value="HI">
																						<xsl:if test="string(.)='HI'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>HI</option>
																					<option value="IA">
																						<xsl:if test="string(.)='IA'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>IA</option>
																					<option value="ID">
																						<xsl:if test="string(.)='ID'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>ID</option>
																					<option value="IL">
																						<xsl:if test="string(.)='IL'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>IL</option>
																					<option value="IN">
																						<xsl:if test="string(.)='IN'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>IN</option>
																					<option value="KS">
																						<xsl:if test="string(.)='KS'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>KS</option>
																					<option value="KY">
																						<xsl:if test="string(.)='KY'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>KY</option>
																					<option value="LA">
																						<xsl:if test="string(.)='LA'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>LA</option>
																					<option value="MA">
																						<xsl:if test="string(.)='MA'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>MA</option>
																					<option value="MD">
																						<xsl:if test="string(.)='MD'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>MD</option>
																					<option value="ME">
																						<xsl:if test="string(.)='ME'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>ME</option>
																					<option value="MI">
																						<xsl:if test="string(.)='MI'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>MI</option>
																					<option value="MN">
																						<xsl:if test="string(.)='MN'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>MN</option>
																					<option value="MO">
																						<xsl:if test="string(.)='MO'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>MO</option>
																					<option value="MS">
																						<xsl:if test="string(.)='MS'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>MS</option>
																					<option value="MT">
																						<xsl:if test="string(.)='MT'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>MT</option>
																					<option value="NC">
																						<xsl:if test="string(.)='NC'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>NC</option>
																					<option value="ND">
																						<xsl:if test="string(.)='ND'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>ND</option>
																					<option value="NE">
																						<xsl:if test="string(.)='NE'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>NE</option>
																					<option value="NH">
																						<xsl:if test="string(.)='NH'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>NH</option>
																					<option value="NJ">
																						<xsl:if test="string(.)='NJ'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>NJ</option>
																					<option value="NM">
																						<xsl:if test="string(.)='NM'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>NM</option>
																					<option value="NV">
																						<xsl:if test="string(.)='NV'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>NV</option>
																					<option value="NY">
																						<xsl:if test="string(.)='NY'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>NY</option>
																					<option value="OH">
																						<xsl:if test="string(.)='OH'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>OH</option>
																					<option value="OK">
																						<xsl:if test="string(.)='OK'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>OK</option>
																					<option value="OR">
																						<xsl:if test="string(.)='OR'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>OR</option>
																					<option value="PA">
																						<xsl:if test="string(.)='PA'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>PA</option>
																					<option value="PR">
																						<xsl:if test="string(.)='PR'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>PR</option>
																					<option value="RI">
																						<xsl:if test="string(.)='RI'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>RI</option>
																					<option value="SC">
																						<xsl:if test="string(.)='SC'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>SC</option>
																					<option value="SD">
																						<xsl:if test="string(.)='SD'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>SD</option>
																					<option value="TN">
																						<xsl:if test="string(.)='TN'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>TN</option>
																					<option value="TX">
																						<xsl:if test="string(.)='TX'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>TX</option>
																					<option value="UT">
																						<xsl:if test="string(.)='UT'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>UT</option>
																					<option value="VA">
																						<xsl:if test="string(.)='VA'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>VA</option>
																					<option value="VI">
																						<xsl:if test="string(.)='VI'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>VI</option>
																					<option value="VT">
																						<xsl:if test="string(.)='VT'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>VT</option>
																					<option value="WA">
																						<xsl:if test="string(.)='WA'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>WA</option>
																					<option value="WI">
																						<xsl:if test="string(.)='WI'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>WI</option>
																					<option value="WV">
																						<xsl:if test="string(.)='WV'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>WV</option>
																					<option value="WY">
																						<xsl:if test="string(.)='WY'">
																							<xsl:attribute name="selected">selected</xsl:attribute>
																						</xsl:if>WY</option>
																				</select>
																			</xsl:for-each>
																			<!-- Design element: text -->
																			<span>
																				<xsl:text>&#160;</xsl:text>
																			</span>
																			<!-- Design element: template (element) -->
																			<xsl:for-each select="ipo:zip">
																				<!-- Design element: edit field -->
																				<input>
																					<xsl:attribute name="value">
																						<xsl:value-of select="string(.)"/>
																					</xsl:attribute>
																				</input>
																			</xsl:for-each>
																		</td>
																	</tr>
																</tbody>
															</table>
														</xsl:for-each>
													</xsl:when>
													<!-- Design element: when -->
													<xsl:when test="n1:Location =&quot;EU&quot;">
														<!-- Design element: template (element) -->
														<xsl:for-each select="n1:Address_EU">
															<!-- Design element: table -->
															<table style="width:100%; " border="0" cellspacing="4px" width="100%">
																<xsl:variable name="altova:CurrContextGrid_0000000018CFD120" select="."/>
																<xsl:variable name="altova:ColumnData">
																	<altova:Internal/>
																</xsl:variable>
																<!-- Design element: table body (columns) -->
																<!-- Design element: table body (rows) -->
																<tbody>
																	<!-- Design element: table row -->
																	<tr>
																		<!-- Design element: table cell -->
																		<td width="30%">
																			<!-- Design element: text -->
																			<span style="font-weight:bold; ">
																				<xsl:text>Street:</xsl:text>
																			</span>
																		</td>
																		<!-- Design element: table cell -->
																		<td width="70%">
																			<!-- Design element: template (element) -->
																			<xsl:for-each select="ipo:street">
																				<!-- Design element: edit field -->
																				<input>
																					<xsl:attribute name="value">
																						<xsl:value-of select="string(.)"/>
																					</xsl:attribute>
																				</input>
																			</xsl:for-each>
																		</td>
																	</tr>
																	<!-- Design element: table row -->
																	<tr>
																		<!-- Design element: table cell -->
																		<td width="30%">
																			<!-- Design element: text -->
																			<span style="font-weight:bold; ">
																				<xsl:text>City:</xsl:text>
																			</span>
																		</td>
																		<!-- Design element: table cell -->
																		<td width="70%">
																			<!-- Design element: template (element) -->
																			<xsl:for-each select="ipo:city">
																				<!-- Design element: edit field -->
																				<input>
																					<xsl:attribute name="value">
																						<xsl:value-of select="string(.)"/>
																					</xsl:attribute>
																				</input>
																			</xsl:for-each>
																		</td>
																	</tr>
																	<!-- Design element: table row -->
																	<tr>
																		<!-- Design element: table cell -->
																		<td width="30%">
																			<!-- Design element: text -->
																			<span style="font-weight:bold; ">
																				<xsl:text>Post Code:</xsl:text>
																			</span>
																		</td>
																		<!-- Design element: table cell -->
																		<td width="70%">
																			<!-- Design element: template (element) -->
																			<xsl:for-each select="ipo:postcode">
																				<!-- Design element: edit field -->
																				<input>
																					<xsl:attribute name="value">
																						<xsl:value-of select="string(.)"/>
																					</xsl:attribute>
																				</input>
																			</xsl:for-each>
																		</td>
																	</tr>
																</tbody>
															</table>
														</xsl:for-each>
													</xsl:when>
												</xsl:choose>
											</td>
											<!-- Design element: table cell -->
											<td rowspan="2" style="width:65%; " valign="top">
												<!-- Design element: condition -->
												<xsl:choose>
													<!-- Design element: when -->
													<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;">
														<!-- Design element: table -->
														<table style="width:100%; " border="0" width="100%">
															<xsl:variable name="altova:CurrContextGrid_0000000018CFAB30" select="."/>
															<xsl:variable name="altova:ColumnData">
																<altova:Internal/>
															</xsl:variable>
															<!-- Design element: table body (columns) -->
															<!-- Design element: table body (rows) -->
															<tbody>
																<!-- Design element: table row -->
																<tr>
																	<!-- Design element: table cell -->
																	<td width="100px">
																		<!-- Design element: image -->
																		<img height="300" width="{$MapWidth}">
																			<xsl:attribute name="src">
																				<xsl:if test="substring(string(iri-to-uri(for $full_addr in  if ( n1:Location =&quot;US&quot; )
then concat( n1:Address/ipo:street, &apos;,&apos;, n1:Address/ipo:city, &apos;,&apos; , n1:Address/ipo:state, &apos;,&apos;, n1:Address/ipo:zip )
else concat( n1:Address_EU/ipo:street, &apos;,&apos;, n1:Address_EU/ipo:city, &apos;,&apos; , n1:Address_EU/ipo:postcode )
return
  concat( &apos;http://maps.google.com/maps/api/staticmap?center=&apos;, $full_addr,
  &apos;&amp;zoom=&apos;, $Zoom, &apos;&amp;maptype=&apos;, $MapType,
  &apos;&amp;size=&apos;, $MapWidth, &apos;x300&amp;sensor=false&amp;markers=color:red|&apos;, $full_addr))), 2, 1) = ':'">
																					<xsl:text>file:///</xsl:text>
																				</xsl:if>
																				<xsl:value-of select="translate(string(iri-to-uri(for $full_addr in  if ( n1:Location =&quot;US&quot; )
then concat( n1:Address/ipo:street, &apos;,&apos;, n1:Address/ipo:city, &apos;,&apos; , n1:Address/ipo:state, &apos;,&apos;, n1:Address/ipo:zip )
else concat( n1:Address_EU/ipo:street, &apos;,&apos;, n1:Address_EU/ipo:city, &apos;,&apos; , n1:Address_EU/ipo:postcode )
return
  concat( &apos;http://maps.google.com/maps/api/staticmap?center=&apos;, $full_addr,
  &apos;&amp;zoom=&apos;, $Zoom, &apos;&amp;maptype=&apos;, $MapType,
  &apos;&amp;size=&apos;, $MapWidth, &apos;x300&amp;sensor=false&amp;markers=color:red|&apos;, $full_addr))), '&#x5c;', '/')"/>
																			</xsl:attribute>
																			<xsl:attribute name="alt">
																				<xsl:value-of select="string(&apos;Google Maps&apos;)"/>
																			</xsl:attribute>
																		</img>
																	</td>
																	<!-- Design element: table cell -->
																	<td valign="top">
																		<!-- Design element: button -->
																		<button style="width:0.75in; ">
																			<!-- Design element: text -->
																			<span style="font-size:smaller; ">
																				<xsl:text>Zoom In</xsl:text>
																			</span>
																		</button>
																		<!-- Design element: break -->
																		<br/>
																		<!-- Design element: button -->
																		<button style="width:0.75in; ">
																			<!-- Design element: text -->
																			<span style="font-size:smaller; ">
																				<xsl:text>Zoom Out</xsl:text>
																			</span>
																		</button>
																		<!-- Design element: break -->
																		<br/>
																		<!-- Design element: break -->
																		<br/>
																		<!-- Design element: button -->
																		<button style="width:0.75in; ">
																			<!-- Design element: text -->
																			<span style="font-size:smaller; ">
																				<xsl:text>Roadmap</xsl:text>
																			</span>
																		</button>
																		<!-- Design element: break -->
																		<br/>
																		<!-- Design element: button -->
																		<button style="width:0.75in; ">
																			<!-- Design element: text -->
																			<span style="font-size:smaller; ">
																				<xsl:text>Satellite</xsl:text>
																			</span>
																		</button>
																		<!-- Design element: break -->
																		<br/>
																		<!-- Design element: button -->
																		<button style="width:0.75in; ">
																			<!-- Design element: text -->
																			<span style="font-size:smaller; ">
																				<xsl:text>Hybrid</xsl:text>
																			</span>
																		</button>
																		<!-- Design element: break -->
																		<br/>
																		<!-- Design element: break -->
																		<br/>
																		<!-- Design element: button -->
																		<button style="width:0.75in; ">
																			<!-- Design element: text -->
																			<span style="font-size:smaller; ">
																				<xsl:text>Bigger =&gt;</xsl:text>
																			</span>
																		</button>
																		<!-- Design element: break -->
																		<br/>
																		<!-- Design element: button -->
																		<button style="width:0.75in; ">
																			<!-- Design element: text -->
																			<span style="font-size:smaller; ">
																				<xsl:text>Smaller &lt;=</xsl:text>
																			</span>
																		</button>
																		<!-- Design element: break -->
																		<br/>
																	</td>
																</tr>
															</tbody>
														</table>
													</xsl:when>
													<!-- Design element: when -->
													<xsl:otherwise>
														<!-- Design element: image -->
														<img height="300" width="{if ($SV_OutputFormat eq &apos;RTF&apos; or $SV_OutputFormat eq &apos;Word2007&apos;) then 400 else 300}">
															<xsl:attribute name="src">
																<xsl:if test="substring(string(iri-to-uri(for $full_addr in  if ( n1:Location =&quot;US&quot; )
then concat( n1:Address/ipo:street, &apos;,&apos;, n1:Address/ipo:city, &apos;,&apos; , n1:Address/ipo:state, &apos;,&apos;, n1:Address/ipo:zip )
else concat( n1:Address_EU/ipo:street, &apos;,&apos;, n1:Address_EU/ipo:city, &apos;,&apos; , n1:Address_EU/ipo:postcode )
return
  concat( &apos;http://maps.google.com/maps/api/staticmap?center=&apos;, $full_addr,
  &apos;&amp;zoom=&apos;, $Zoom, &apos;&amp;maptype=&apos;, $MapType,
  &apos;&amp;size=&apos;, if ($SV_OutputFormat eq &apos;RTF&apos; or $SV_OutputFormat eq &apos;Word2007&apos;) then &apos;400&apos; else &apos;300&apos;, &apos;x300&amp;sensor=false&amp;markers=color:red|&apos;, $full_addr))), 2, 1) = ':'">
																	<xsl:text>file:///</xsl:text>
																</xsl:if>
																<xsl:value-of select="translate(string(iri-to-uri(for $full_addr in  if ( n1:Location =&quot;US&quot; )
then concat( n1:Address/ipo:street, &apos;,&apos;, n1:Address/ipo:city, &apos;,&apos; , n1:Address/ipo:state, &apos;,&apos;, n1:Address/ipo:zip )
else concat( n1:Address_EU/ipo:street, &apos;,&apos;, n1:Address_EU/ipo:city, &apos;,&apos; , n1:Address_EU/ipo:postcode )
return
  concat( &apos;http://maps.google.com/maps/api/staticmap?center=&apos;, $full_addr,
  &apos;&amp;zoom=&apos;, $Zoom, &apos;&amp;maptype=&apos;, $MapType,
  &apos;&amp;size=&apos;, if ($SV_OutputFormat eq &apos;RTF&apos; or $SV_OutputFormat eq &apos;Word2007&apos;) then &apos;400&apos; else &apos;300&apos;, &apos;x300&amp;sensor=false&amp;markers=color:red|&apos;, $full_addr))), '&#x5c;', '/')"/>
															</xsl:attribute>
															<xsl:attribute name="alt">
																<xsl:value-of select="string(&apos;Google Maps&apos;)"/>
															</xsl:attribute>
														</img>
													</xsl:otherwise>
												</xsl:choose>
											</td>
										</tr>
										<!-- Design element: table row -->
										<tr>
											<!-- Design element: table cell -->
											<td style="width:35%; " valign="middle" width="300px">
												<!-- Design element: table -->
												<table style="width:100%; " border="0" cellspacing="4" width="100%">
													<xsl:variable name="altova:CurrContextGrid_00000000185E7E20" select="."/>
													<xsl:variable name="altova:ColumnData">
														<altova:Internal/>
													</xsl:variable>
													<!-- Design element: table body (columns) -->
													<!-- Design element: table body (rows) -->
													<tbody>
														<!-- Design element: table row -->
														<tr>
															<!-- Design element: table cell -->
															<td width="30%">
																<!-- Design element: text -->
																<span style="font-weight:bold; ">
																	<xsl:text>Phone:</xsl:text>
																</span>
															</td>
															<!-- Design element: table cell -->
															<td width="70%">
																<!-- Design element: template (element) -->
																<xsl:for-each select="n1:Phone">
																	<!-- Design element: content -->
																	<xsl:apply-templates/>
																</xsl:for-each>
															</td>
														</tr>
														<!-- Design element: table row -->
														<tr>
															<!-- Design element: table cell -->
															<td width="30%">
																<!-- Design element: text -->
																<span style="font-weight:bold; ">
																	<xsl:text>Fax:</xsl:text>
																</span>
															</td>
															<!-- Design element: table cell -->
															<td width="70%">
																<!-- Design element: template (element) -->
																<xsl:for-each select="n1:Fax">
																	<!-- Design element: content -->
																	<xsl:apply-templates/>
																</xsl:for-each>
															</td>
														</tr>
														<!-- Design element: table row -->
														<tr>
															<!-- Design element: table cell -->
															<td width="30%">
																<!-- Design element: text -->
																<span style="font-weight:bold; ">
																	<xsl:text>E-mail:</xsl:text>
																</span>
															</td>
															<!-- Design element: table cell -->
															<td width="70%">
																<!-- Design element: template (element) -->
																<xsl:for-each select="n1:EMail">
																	<!-- Design element: hyperlink -->
																	<a>
																		<xsl:choose>
																			<xsl:when test="substring(string(concat(&apos;mailto:&apos;,.)), 1, 1) = '#'">
																				<xsl:attribute name="href">
																					<xsl:value-of select="concat(&apos;mailto:&apos;,.)"/>
																				</xsl:attribute>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:attribute name="href">
																					<xsl:if test="substring(string(concat(&apos;mailto:&apos;,.)), 2, 1) = ':'">
																						<xsl:text>file:///</xsl:text>
																					</xsl:if>
																					<xsl:value-of select="translate(string(concat(&apos;mailto:&apos;,.)), '&#x5c;', '/')"/>
																				</xsl:attribute>
																			</xsl:otherwise>
																		</xsl:choose>
																		<!-- Design element: content -->
																		<xsl:apply-templates/>
																	</a>
																</xsl:for-each>
															</td>
														</tr>
													</tbody>
												</table>
											</td>
											<!-- Design element: table cell -->
										</tr>
									</tbody>
								</table>
								<!-- Design element: break -->
								<br/>
								<!-- Design element: condition -->
								<xsl:choose>
									<!-- Design element: when -->
									<xsl:when test="n1:Address">
										<!-- Design element: template (element) -->
										<xsl:for-each select="n1:Address">
											<!-- Design element: template (element) -->
											<xsl:for-each select="ipo:city">
												<!-- Design element: content -->
												<span style="color:#004080; font-family:Arial; font-size:10pt; font-weight:bold; text-decoration:underline; ">
													<xsl:apply-templates/>
												</span>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:when>
									<!-- Design element: when -->
									<xsl:when test="n1:Address_EU">
										<!-- Design element: template (element) -->
										<xsl:for-each select="n1:Address_EU">
											<!-- Design element: template (element) -->
											<xsl:for-each select="ipo:city">
												<!-- Design element: content -->
												<span style="color:#004080; font-family:Arial; font-size:10pt; font-weight:bold; text-decoration:underline; ">
													<xsl:apply-templates/>
												</span>
											</xsl:for-each>
										</xsl:for-each>
									</xsl:when>
								</xsl:choose>
								<!-- Design element: text -->
								<span style="color:#004080; font-family:Arial; font-size:10pt; font-weight:bold; text-decoration:underline; ">
									<xsl:text> Office Summary:</xsl:text>
								</span>
								<!-- Design element: text -->
								<span>
									<xsl:text>&#160; </xsl:text>
								</span>
								<!-- Design element: AutoCalc -->
								<span style="color:#004080; font-family:Arial; font-size:10pt; font-weight:bold; ">
									<xsl:value-of select="count(n1:Department)"/>
								</span>
								<!-- Design element: text -->
								<span style="color:#004080; font-family:Arial; font-size:10pt; font-weight:bold; ">
									<xsl:text> department</xsl:text>
								</span>
								<!-- Design element: condition -->
								<!-- Design element: when -->
								<xsl:if test="count(n1:Department) != 1">
									<!-- Design element: text -->
									<span style="color:#004080; font-family:Arial; font-size:10pt; font-weight:bold; ">
										<xsl:text>s</xsl:text>
									</span>
								</xsl:if>
								<!-- Design element: text -->
								<span style="color:#004080; font-family:Arial; font-size:10pt; font-weight:bold; ">
									<xsl:text>, </xsl:text>
								</span>
								<!-- Design element: AutoCalc -->
								<span style="color:#004080; font-family:Arial; font-size:10pt; font-weight:bold; ">
									<xsl:value-of select="count(n1:Department/n1:Person)"/>
								</span>
								<!-- Design element: text -->
								<span style="color:#004080; font-family:Arial; font-size:10pt; font-weight:bold; ">
									<xsl:text> employee</xsl:text>
								</span>
								<!-- Design element: condition -->
								<!-- Design element: when -->
								<xsl:if test="count(n1:Department/n1:Person) != 1">
									<!-- Design element: text -->
									<span style="color:#004080; font-family:Arial; font-size:10pt; font-weight:bold; ">
										<xsl:text>s</xsl:text>
									</span>
								</xsl:if>
								<!-- Design element: text -->
								<span style="color:#004080; font-family:Arial; font-size:10pt; font-weight:bold; ">
									<xsl:text>.</xsl:text>
								</span>
								<!-- Design element: template (element) -->
								<xsl:for-each select="n1:Desc">
									<!-- Design element: template (element) -->
									<xsl:for-each select="n1:para">
										<!-- Design element: paragraph -->
										<p>
											<!-- Design element: content -->
											<xsl:apply-templates/>
										</p>
									</xsl:for-each>
								</xsl:for-each>
								<!-- Design element: template (element) -->
								<xsl:for-each select="n1:Department">
									<altova:level>
										<!-- Design element: TOC bookmark -->
										<altova:marker altova:name="toc">
											<!-- Design element: template (element) -->
											<xsl:for-each select="n1:Name">
												<!-- Design element: content -->
												<span style="color:#D39658; font-family:Arial; font-weight:bold; ">
													<xsl:apply-templates/>
												</span>
											</xsl:for-each>
										</altova:marker>
										<!-- Design element: text -->
										<span>
											<xsl:text>&#160;</xsl:text>
										</span>
										<!-- Design element: text -->
										<span style="color:#D39658; font-family:Arial; font-weight:bold; ">
											<xsl:text>( </xsl:text>
										</span>
										<!-- Design element: AutoCalc -->
										<span style="color:#D39658; font-family:Arial; font-weight:bold; ">
											<xsl:value-of select="count(n1:Person)"/>
										</span>
										<!-- Design element: text -->
										<span style="color:#D39658; font-family:Arial; font-weight:bold; ">
											<xsl:text> )</xsl:text>
										</span>
										<!-- Design element: break -->
										<br/>
										<!-- Design element: table -->
										<table border="1" cellpadding="3" cellspacing="0" width="100%">
											<xsl:variable name="altova:CurrContextGrid_00000000185FD950" select="."/>
											<xsl:variable name="altova:ColumnData">
												<altova:Internal/>
											</xsl:variable>
											<!-- Design element: table body (columns) -->
											<!-- Design element: table header (rows) -->
											<thead>
												<!-- Design element: table row -->
												<tr bgcolor="#D2C8AE">
													<!-- Design element: table cell -->
													<th rowspan="2" align="center" bgcolor="#D2C8AE" width="10%">
														<!-- Design element: text -->
														<span style="color:#606060; font-family:Arial; font-weight:bold; ">
															<xsl:text>First</xsl:text>
														</span>
													</th>
													<!-- Design element: table cell -->
													<th rowspan="2" align="center" bgcolor="#D2C8AE" width="12%">
														<!-- Design element: text -->
														<span style="color:#606060; font-family:Arial; font-weight:bold; ">
															<xsl:text>Last</xsl:text>
														</span>
													</th>
													<!-- Design element: table cell -->
													<th rowspan="2" align="center" bgcolor="#D2C8AE" width="16%">
														<!-- Design element: text -->
														<span style="color:#606060; font-family:Arial; font-weight:bold; ">
															<xsl:text>Title</xsl:text>
														</span>
														<!-- Design element: break -->
														<br/>
														<!-- Design element: condition -->
														<xsl:choose>
															<!-- Design element: when -->
															<xsl:when test="$SV_OutputFormat = &apos;Authentic&apos;"/>
															<!-- Design element: when -->
															<xsl:when test="$SV_OutputFormat = &apos;HTML&apos;">
																<!-- Design element: text -->
																<span style="color:#606060; font-family:Arial; font-size:x-small; font-weight:bold; ">
																	<xsl:text>(sorted by)</xsl:text>
																</span>
															</xsl:when>
															<!-- Design element: when -->
															<xsl:when test="$SV_OutputFormat = &apos;RTF&apos; or $SV_OutputFormat = &apos;Word2007&apos;">
																<!-- Design element: text -->
																<span style="color:#606060; font-family:Arial; font-size:x-small; font-weight:bold; ">
																	<xsl:text>(sorted by)</xsl:text>
																</span>
															</xsl:when>
															<!-- Design element: when -->
															<xsl:when test="$SV_OutputFormat = &apos;PDF&apos;">
																<!-- Design element: text -->
																<span style="color:#606060; font-family:Arial; font-size:x-small; font-weight:bold; ">
																	<xsl:text>(sorted by)</xsl:text>
																</span>
															</xsl:when>
														</xsl:choose>
													</th>
													<!-- Design element: table cell -->
													<th rowspan="2" align="center" bgcolor="#D2C8AE" width="5%">
														<!-- Design element: text -->
														<span style="color:#606060; font-family:Arial; font-weight:bold; ">
															<xsl:text>Ext</xsl:text>
														</span>
													</th>
													<!-- Design element: table cell -->
													<th rowspan="2" align="center" bgcolor="#D2C8AE" width="23%">
														<!-- Design element: text -->
														<span style="color:#606060; font-family:Arial; font-weight:bold; ">
															<xsl:text>EMail</xsl:text>
														</span>
													</th>
													<!-- Design element: table cell -->
													<th rowspan="2" align="center" bgcolor="#D2C8AE" width="10%">
														<!-- Design element: text -->
														<span style="color:#606060; font-family:Arial; font-weight:bold; ">
															<xsl:text>Shares</xsl:text>
														</span>
													</th>
													<!-- Design element: table cell -->
													<th colspan="3" align="center" width="8%">
														<!-- Design element: text -->
														<span style="color:#606060; font-family:Arial; font-weight:bold; ">
															<xsl:text>Leave</xsl:text>
														</span>
													</th>
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
												</tr>
												<!-- Design element: table row -->
												<tr>
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
													<th align="center" bgcolor="#D2C8AE" width="8%">
														<!-- Design element: text -->
														<span style="color:#606060; font-family:Arial; font-weight:bold; ">
															<xsl:text>Total</xsl:text>
														</span>
													</th>
													<!-- Design element: table cell -->
													<th align="center" bgcolor="#D2C8AE" width="8%">
														<!-- Design element: text -->
														<span style="color:#606060; font-family:Arial; font-weight:bold; ">
															<xsl:text>Used</xsl:text>
														</span>
													</th>
													<!-- Design element: table cell -->
													<th align="center" bgcolor="#D2C8AE" width="8%">
														<!-- Design element: text -->
														<span style="color:#606060; font-family:Arial; font-weight:bold; ">
															<xsl:text>Left</xsl:text>
														</span>
													</th>
												</tr>
											</thead>
											<!-- Design element: table body (rows) -->
											<tfoot>
												<!-- Design element: table row -->
												<tr bgcolor="#F2F0E6">
													<!-- Design element: table cell -->
													<td colspan="5" align="left" valign="top" width="10%">
														<!-- Design element: text -->
														<span style="color:#004080; font-family:Arial; font-size:8pt; font-weight:bold; ">
															<xsl:text>Employees:&#160; </xsl:text>
														</span>
														<!-- Design element: AutoCalc -->
														<span style="color:#004080; font-family:Arial; font-size:8pt; font-weight:bold; ">
															<xsl:value-of select="count(  n1:Person  )"/>
														</span>
														<!-- Design element: text -->
														<span style="font-size:8pt; ">
															<xsl:text>&#160;</xsl:text>
														</span>
														<!-- Design element: text -->
														<span style="color:#004080; font-family:Arial; font-size:8pt; font-weight:bold; ">
															<xsl:text>(</xsl:text>
														</span>
														<!-- Design element: AutoCalc -->
														<span style="color:#004080; font-family:Arial; font-size:8pt; font-weight:bold; ">
															<xsl:value-of select="round ((count(  n1:Person  ) ) div ( count( ../n1:Department/ n1:Person  ) ) * 100)"/>
														</span>
														<!-- Design element: text -->
														<span style="color:#004080; font-family:Arial; font-size:8pt; font-weight:bold; ">
															<xsl:text>% of Office, </xsl:text>
														</span>
														<!-- Design element: AutoCalc -->
														<span style="color:#004080; font-family:Arial; font-size:8pt; font-weight:bold; ">
															<xsl:value-of select="round ((count(  n1:Person  ) ) div ( count( ../../n1:Office/n1:Department/ n1:Person  ) ) * 100)"/>
														</span>
														<!-- Design element: text -->
														<span style="color:#004080; font-family:Arial; font-size:8pt; font-weight:bold; ">
															<xsl:text>% of Company)</xsl:text>
														</span>
													</td>
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
													<td colspan="4" align="left" width="10%">
														<!-- Design element: text -->
														<span style="color:#004080; font-family:Arial; font-size:8pt; font-weight:bold; ">
															<xsl:text>Shares: </xsl:text>
														</span>
														<!-- Design element: AutoCalc -->
														<span style="color:#004080; font-family:Arial; font-size:8pt; font-weight:bold; ">
															<xsl:value-of select="sum(  n1:Person/n1:Shares  )"/>
														</span>
														<!-- Design element: text -->
														<span style="font-size:8pt; ">
															<xsl:text>&#160;</xsl:text>
														</span>
														<!-- Design element: text -->
														<span style="color:#004080; font-family:Arial; font-size:8pt; font-weight:bold; ">
															<xsl:text>(</xsl:text>
														</span>
														<!-- Design element: AutoCalc -->
														<span style="color:#004080; font-family:Arial; font-size:8pt; font-weight:bold; ">
															<xsl:value-of select="round((sum(  n1:Person/n1:Shares  ) ) div (sum(../n1:Department/ n1:Person/n1:Shares ) ) * 100)"/>
														</span>
														<!-- Design element: text -->
														<span style="color:#004080; font-family:Arial; font-size:8pt; font-weight:bold; ">
															<xsl:text>% of Office, </xsl:text>
														</span>
														<!-- Design element: AutoCalc -->
														<span style="color:#004080; font-family:Arial; font-size:8pt; font-weight:bold; ">
															<xsl:value-of select="round((sum(  n1:Person/n1:Shares  ) ) div (sum(../../n1:Office/n1:Department/ n1:Person/n1:Shares  )) * 100)"/>
														</span>
														<!-- Design element: text -->
														<span style="color:#004080; font-family:Arial; font-size:8pt; font-weight:bold; ">
															<xsl:text>% of Company)</xsl:text>
														</span>
													</td>
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
												</tr>
												<!-- Design element: table row -->
												<tr bgcolor="#F2F0E6">
													<!-- Design element: table cell -->
													<td colspan="9" align="left" width="10%">
														<!-- Design element: text -->
														<span style="color:#004080; font-family:Arial; font-size:8pt; font-weight:bold; ">
															<xsl:text>Non-Shareholders: </xsl:text>
														</span>
														<!-- Design element: text -->
														<span style="color:#004040; font-family:Arial; font-size:8pt; font-weight:bold; ">
															<xsl:text>&#160;</xsl:text>
														</span>
														<!-- Design element: template (element) -->
														<xsl:for-each select="n1:Person">
															<!-- Design element: condition -->
															<!-- Design element: when -->
															<xsl:if test="n1:Shares &lt;= 0 or not (n1:Shares)">
																<!-- Design element: template (element) -->
																<xsl:for-each select="n1:First">
																	<!-- Design element: content -->
																	<span style="color:#004040; font-family:Arial; font-size:8pt; font-weight:bold; ">
																		<xsl:apply-templates/>
																	</span>
																</xsl:for-each>
																<!-- Design element: text -->
																<span style="color:#004040; font-family:Arial; font-size:8pt; font-weight:bold; ">
																	<xsl:text>&#160;</xsl:text>
																</span>
																<!-- Design element: template (element) -->
																<xsl:for-each select="n1:Last">
																	<!-- Design element: content -->
																	<span style="color:#004040; font-family:Arial; font-size:8pt; font-weight:bold; ">
																		<xsl:apply-templates/>
																	</span>
																</xsl:for-each>
																<!-- Design element: condition -->
																<!-- Design element: when -->
																<xsl:if test="following-sibling::n1:Person[n1:Shares&lt;=0 or not(n1:Shares)]">
																	<!-- Design element: text -->
																	<span style="color:#004040; font-family:Arial; font-size:8pt; font-weight:bold; ">
																		<xsl:text>, </xsl:text>
																	</span>
																</xsl:if>
															</xsl:if>
														</xsl:for-each>
														<!-- Design element: condition -->
														<!-- Design element: when -->
														<xsl:if test="count(  n1:Person  ) = count(  n1:Person [n1:Shares&gt;0] )">
															<!-- Design element: text -->
															<span style="color:#004040; font-family:Arial; font-size:8pt; font-weight:bold; ">
																<xsl:text>None</xsl:text>
															</span>
														</xsl:if>
														<!-- Design element: text -->
														<span style="color:#004040; font-family:Arial; font-size:8pt; font-weight:bold; ">
															<xsl:text>.</xsl:text>
														</span>
													</td>
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
													<!-- Design element: table cell -->
												</tr>
											</tfoot>
											<tbody>
												<!-- Design element: template (element) -->
												<xsl:for-each select="n1:Person">
													<xsl:sort select="n1:Title" data-type="text" order="ascending"/>
													<altova:level>
														<!-- Design element: table row -->
														<tr bgcolor="{if ( position() mod 2 ) then &quot;antiquewhite&quot; else &quot;navajowhite&quot;}">
															<!-- Design element: table cell -->
															<td width="10%">
																<!-- Design element: TOC bookmark -->
																<altova:marker altova:name="toc">
																	<xsl:attribute name="altova:entrytext">
																		<xsl:value-of select="concat(n1:Last,' ',n1:First)"/>
																	</xsl:attribute>
																</altova:marker>
																<!-- Design element: template (element) -->
																<xsl:for-each select="n1:First">
																	<!-- Design element: condition -->
																	<xsl:choose>
																		<!-- Design element: when -->
																		<xsl:when test="../n1:Shares &gt; 0">
																			<!-- Design element: content -->
																			<span style="font-size:10pt; font-weight:bold; ">
																				<xsl:apply-templates/>
																			</span>
																		</xsl:when>
																		<!-- Design element: when -->
																		<xsl:otherwise>
																			<!-- Design element: content -->
																			<span style="font-size:10pt; ">
																				<xsl:apply-templates/>
																			</span>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</td>
															<!-- Design element: table cell -->
															<td width="12%">
																<!-- Design element: template (element) -->
																<xsl:for-each select="n1:Last">
																	<!-- Design element: condition -->
																	<xsl:choose>
																		<!-- Design element: when -->
																		<xsl:when test="../n1:Shares &gt; 0">
																			<!-- Design element: content -->
																			<span style="font-size:10pt; font-weight:bold; ">
																				<xsl:apply-templates/>
																			</span>
																		</xsl:when>
																		<!-- Design element: when -->
																		<xsl:otherwise>
																			<!-- Design element: content -->
																			<span style="font-size:10pt; ">
																				<xsl:apply-templates/>
																			</span>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</td>
															<!-- Design element: table cell -->
															<td width="16%">
																<!-- Design element: template (element) -->
																<xsl:for-each select="n1:Title">
																	<!-- Design element: content -->
																	<span style="font-size:10pt; ">
																		<xsl:apply-templates/>
																	</span>
																</xsl:for-each>
															</td>
															<!-- Design element: table cell -->
															<td align="center" width="5%">
																<!-- Design element: template (element) -->
																<xsl:for-each select="n1:PhoneExt">
																	<!-- Design element: content -->
																	<span style="font-size:10pt; ">
																		<xsl:apply-templates/>
																	</span>
																</xsl:for-each>
															</td>
															<!-- Design element: table cell -->
															<td width="23%">
																<!-- Design element: template (element) -->
																<xsl:for-each select="n1:EMail">
																	<!-- Design element: hyperlink -->
																	<a>
																		<xsl:choose>
																			<xsl:when test="substring(string(concat(&apos;mailto:&apos;,.)), 1, 1) = '#'">
																				<xsl:attribute name="href">
																					<xsl:value-of select="concat(&apos;mailto:&apos;,.)"/>
																				</xsl:attribute>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:attribute name="href">
																					<xsl:if test="substring(string(concat(&apos;mailto:&apos;,.)), 2, 1) = ':'">
																						<xsl:text>file:///</xsl:text>
																					</xsl:if>
																					<xsl:value-of select="translate(string(concat(&apos;mailto:&apos;,.)), '&#x5c;', '/')"/>
																				</xsl:attribute>
																			</xsl:otherwise>
																		</xsl:choose>
																		<!-- Design element: content -->
																		<span style="font-size:10pt; ">
																			<xsl:apply-templates/>
																		</span>
																	</a>
																</xsl:for-each>
															</td>
															<!-- Design element: table cell -->
															<td align="center" width="10%">
																<!-- Design element: template (element) -->
																<xsl:for-each select="n1:Shares">
																	<!-- Design element: content -->
																	<span style="font-size:10pt; ">
																		<xsl:apply-templates/>
																	</span>
																</xsl:for-each>
															</td>
															<!-- Design element: table cell -->
															<td align="center" width="8%">
																<!-- Design element: template (element) -->
																<xsl:for-each select="n1:LeaveTotal">
																	<!-- Design element: content -->
																	<span style="font-size:10pt; ">
																		<xsl:apply-templates/>
																	</span>
																</xsl:for-each>
															</td>
															<!-- Design element: table cell -->
															<td align="center" width="8%">
																<!-- Design element: template (element) -->
																<xsl:for-each select="n1:LeaveUsed">
																	<!-- Design element: content -->
																	<span style="font-size:10pt; ">
																		<xsl:apply-templates/>
																	</span>
																</xsl:for-each>
															</td>
															<!-- Design element: table cell -->
															<td align="center" width="8%">
																<!-- Design element: AutoCalc -->
																<span style="font-size:10pt; ">
																	<xsl:value-of select="n1:LeaveTotal - n1:LeaveUsed"/>
																</span>
															</td>
														</tr>
													</altova:level>
												</xsl:for-each>
											</tbody>
											<!-- Design element: table footer (rows) -->
										</table>
										<!-- Design element: break -->
										<br/>
									</altova:level>
								</xsl:for-each>
								<!-- Design element: chart -->
								<img style="height:150px; width:700px; ">
									<xsl:variable name="altova:nChartWidthPx" select="700"/>
									<xsl:variable name="altova:nChartHeightPx" select="150"/>
									<xsl:variable name="altova:extChartConfig" as="item()*">
										<xsl:variable name="altova:ext-chart-settings" as="item()*">
											<chart-config>
												<General SettingsVersion="1" Title="Overview of shares" ShowLegend="0"/>
												<XY>
													<YAxis UseAutoTick="0" ManualTickInterval="500."/>
												</XY>
											</chart-config>
										</xsl:variable>
										<xsl:sequence select="altovaext:create-chart-config-from-xml( $altova:ext-chart-settings )"/>
									</xsl:variable>
									<xsl:variable name="altova:chartDataSeries" as="item()*">
										<xsl:variable name="altova:chartDataRows" as="item()*">
											<xsl:for-each select="(n1:Department/n1:Person[n1:Shares&gt;0])">
												<xsl:sequence select="altovaext:create-chart-data-row( (concat(n1:First, codepoints-to-string( ( 13, 10 ) ), n1:Last)),  (n1:Shares)  )"/>
											</xsl:for-each>
										</xsl:variable>
										<xsl:variable name="altova:chartDataSeriesNames" as="xs:string*" select=" ( (&quot;Series 1&quot;), &apos;&apos; )[1]"/>
										<xsl:sequence select="altovaext:create-chart-data-series-from-rows( $altova:chartDataSeriesNames, $altova:chartDataRows)"/>
									</xsl:variable>
									<xsl:variable name="altova:nodeChart" select="altovaext:create-chart( $altova:extChartConfig, ( $altova:chartDataSeries), false() )"/>
									<xsl:variable name="altova:sChartFileName" select="concat( if ( exists( $SV_GeneratedFileNameAmendment) ) then $SV_GeneratedFileNameAmendment else &apos;OrgChart&apos;, &apos;_SVGeneratedChart&apos;, &apos;_&apos;, $SV_OutputFormat, &apos;_&apos;, altovaext:generate-auto-number( &apos;sv_chart&apos;, 1, 1, &apos;&apos; ), &apos;.png&apos; )"/>
									<xsl:variable name="altova:sChartFileNameNoPath" select="for $matchexpr in &apos;.*(\\|/)([^/\\]+)$&apos; return if ( matches( $altova:sChartFileName, $matchexpr ) ) then replace( $altova:sChartFileName, $matchexpr, &apos;$2&apos; ) else $altova:sChartFileName"/>
									<xsl:attribute name="alt" select="'Altova StyleVision Chart'"/>
									<xsl:attribute name="src" select="(:iri-to-uri:)( $altova:sChartFileName ), altovaext:save-chart-image( $altova:nodeChart, $altova:sChartFileName, $altova:nChartWidthPx, $altova:nChartHeightPx  )"/>
								</img>
							</altova:level>
						</xsl:for-each>
						<!-- Design element: break -->
						<br/>
					</xsl:for-each>
				</xsl:for-each>
			</body>
		</html>
	</xsl:variable>
	<xsl:template match="altova:toc[ @altova:name = 'toc' ]" mode="altova:generate-toc-xslt-tree">
		<altova:toc altova:design-id="{generate-id()}">
			<xsl:variable name="altova:current-level-id" select="generate-id( ancestor::altova:level[1] )"/>
			<!-- Design element: TOC level reference -->
			<xsl:for-each select="ancestor::*[self::altova:level | self::html][1]">
				<xsl:for-each select="descendant::altova:level[ ancestor::*[self::altova:level | self::html][1] is current() ]">
					<xsl:variable name="altova:current-level-id" select="generate-id()"/>
					<!-- Design element: break -->
					<br/>
					<!-- Design element: TOC reference -->
					<xsl:for-each select="descendant::altova:marker[ @altova:name = 'toc' and ancestor::altova:level[1] is current() ]">
						<xsl:variable name="altova:current-marker-id" select="generate-id()"/>
						<a href="{concat( '#', generate-id() )}">
							<!-- Design element: field -->
							<span style="font-family:Arial; font-size:12pt; font-weight:bold; ">
								<xsl:choose>
									<xsl:when test="@altova:entrytext">
										<xsl:value-of select="@altova:entrytext"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:apply-templates mode="altova:extract-text-from-marker">
											<xsl:with-param name="altova:level-design-id" select="$altova:current-level-id"/>
											<xsl:with-param name="altova:marker-design-id" select="$altova:current-marker-id"/>
										</xsl:apply-templates>
									</xsl:otherwise>
								</xsl:choose>
							</span>
						</a>
					</xsl:for-each>
					<!-- Design element: break -->
					<br/>
					<!-- Design element: table -->
					<table style="margin-top:2pt; " cellspacing="0" width="100%">
						<xsl:variable name="altova:CurrContextGrid_00000000184E1CD0" select="."/>
						<xsl:variable name="altova:ColumnData">
							<altova:Internal/>
						</xsl:variable>
						<!-- Design element: table body (columns) -->
						<!-- Design element: table body (rows) -->
						<tbody>
							<!-- Design element: table row -->
							<tr>
								<!-- Design element: table cell -->
								<td width="50%">
									<!-- Design element: text -->
									<span style="font-size:10pt; font-weight:bold; ">
										<xsl:text>Departments</xsl:text>
									</span>
								</td>
								<!-- Design element: table cell -->
								<td width="50%">
									<!-- Design element: text -->
									<span style="font-size:10pt; font-weight:bold; ">
										<xsl:text>Persons</xsl:text>
									</span>
								</td>
							</tr>
						</tbody>
					</table>
					<!-- Design element: TOC level reference -->
					<xsl:for-each select="descendant::altova:level[ ancestor::altova:level[1] is current() ]">
						<xsl:variable name="altova:current-level-id" select="generate-id()"/>
						<!-- Design element: table -->
						<table style="line-height:12pt; " cellspacing="0" width="100%">
							<xsl:variable name="altova:CurrContextGrid_00000000184E3260" select="."/>
							<xsl:variable name="altova:ColumnData">
								<altova:Internal/>
							</xsl:variable>
							<!-- Design element: table body (columns) -->
							<!-- Design element: table body (rows) -->
							<tbody>
								<!-- Design element: table row -->
								<tr bgcolor="{if ( position() mod 2 ) then &quot;antiquewhite&quot; else &quot;navajowhite&quot;}">
									<!-- Design element: table cell -->
									<td valign="top" width="50%">
										<!-- Design element: TOC reference -->
										<xsl:for-each select="descendant::altova:marker[ @altova:name = 'toc' and ancestor::altova:level[1] is current() ]">
											<xsl:variable name="altova:current-marker-id" select="generate-id()"/>
											<a href="{concat( '#', generate-id() )}">
												<!-- Design element: num-lvl -->
												<span style="font-family:Arial; font-size:10pt; font-weight:bold; ">
													<altova:num-lvl altova:format="A.1" altova:omit-levels="1" altova:level-design-id="{$altova:current-level-id}"/>
												</span>
												<!-- Design element: text -->
												<span style="font-family:Arial; font-size:10pt; font-weight:bold; ">
													<xsl:text>. </xsl:text>
												</span>
												<!-- Design element: field -->
												<span style="font-family:Arial; font-size:10pt; font-weight:bold; ">
													<xsl:choose>
														<xsl:when test="@altova:entrytext">
															<xsl:value-of select="@altova:entrytext"/>
														</xsl:when>
														<xsl:otherwise>
															<xsl:apply-templates mode="altova:extract-text-from-marker">
																<xsl:with-param name="altova:level-design-id" select="$altova:current-level-id"/>
																<xsl:with-param name="altova:marker-design-id" select="$altova:current-marker-id"/>
															</xsl:apply-templates>
														</xsl:otherwise>
													</xsl:choose>
												</span>
											</a>
										</xsl:for-each>
									</td>
									<!-- Design element: table cell -->
									<td valign="top" width="50%">
										<!-- Design element: TOC level reference -->
										<xsl:for-each select="descendant::altova:level[ ancestor::altova:level[1] is current() ]">
											<xsl:variable name="altova:current-level-id" select="generate-id()"/>
											<!-- Design element: table -->
											<table cellpadding="0" cellspacing="0">
												<xsl:variable name="altova:CurrContextGrid_00000000184EB270" select="."/>
												<xsl:variable name="altova:ColumnData">
													<altova:Internal/>
												</xsl:variable>
												<!-- Design element: table body (columns) -->
												<!-- Design element: table body (rows) -->
												<tbody>
													<!-- Design element: table row -->
													<tr>
														<!-- Design element: table cell -->
														<td valign="top">
															<!-- Design element: TOC reference -->
															<xsl:for-each select="descendant::altova:marker[ @altova:name = 'toc' and ancestor::altova:level[1] is current() ]">
																<xsl:variable name="altova:current-marker-id" select="generate-id()"/>
																<a href="{concat( '#', generate-id() )}">
																	<!-- Design element: num-lvl -->
																	<span style="font-family:Arial; font-size:8pt; ">
																		<altova:num-lvl altova:format="A.1" altova:omit-levels="1" altova:level-design-id="{$altova:current-level-id}"/>
																	</span>
																	<!-- Design element: text -->
																	<span style="font-family:Arial; font-size:8pt; ">
																		<xsl:text>&#160;</xsl:text>
																	</span>
																	<!-- Design element: field -->
																	<span style="font-family:Arial; font-size:8pt; ">
																		<xsl:choose>
																			<xsl:when test="@altova:entrytext">
																				<xsl:value-of select="@altova:entrytext"/>
																			</xsl:when>
																			<xsl:otherwise>
																				<xsl:apply-templates mode="altova:extract-text-from-marker">
																					<xsl:with-param name="altova:level-design-id" select="$altova:current-level-id"/>
																					<xsl:with-param name="altova:marker-design-id" select="$altova:current-marker-id"/>
																				</xsl:apply-templates>
																			</xsl:otherwise>
																		</xsl:choose>
																	</span>
																</a>
															</xsl:for-each>
														</td>
													</tr>
												</tbody>
											</table>
										</xsl:for-each>
									</td>
								</tr>
							</tbody>
						</table>
					</xsl:for-each>
				</xsl:for-each>
			</xsl:for-each>
		</altova:toc>
	</xsl:template>
	<!-- Design element: global template (element) -->
	<xsl:template match="ts:bold">
		<!-- Design element: content -->
		<span style="font-weight:bold; ">
			<xsl:apply-templates/>
		</span>
	</xsl:template>
	<!-- Design element: global template (element) -->
	<xsl:template match="ts:italic">
		<!-- Design element: content -->
		<span style="font-style:italic; ">
			<xsl:apply-templates/>
		</span>
	</xsl:template>
	<!-- Design element: global template (element) -->
	<xsl:template match="ts:underline">
		<!-- Design element: content -->
		<span style="text-decoration:underline; ">
			<xsl:apply-templates/>
		</span>
	</xsl:template>
	<xsl:template match="/">
		<xsl:for-each select="$altova:DesignAfterStep1">
			<xsl:apply-templates mode="altova:step2"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="@* | node()" mode="altova:step2">
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="table" mode="altova:step2">
		<xsl:variable name="altova:table">
			<xsl:copy>
				<xsl:apply-templates select="@* | node()" mode="#current"/>
			</xsl:copy>
		</xsl:variable>
		<xsl:apply-templates select="$altova:table" mode="altova:generate-table"/>
	</xsl:template>
	<xsl:variable name="altova:toc-xslt-tree1">
		<xsl:for-each select="$altova:DesignAfterStep1">
			<xsl:apply-templates mode="altova:generate-toc-xslt-tree"/>
		</xsl:for-each>
	</xsl:variable>
	<xsl:template match="altova:level" mode="altova:generate-toc-xslt-tree">
		<altova:level altova:design-id="{generate-id()}">
			<xsl:apply-templates mode="#current"/>
		</altova:level>
	</xsl:template>
	<xsl:template match="altova:marker" mode="altova:generate-toc-xslt-tree">
		<altova:marker altova:design-id="{generate-id()}" altova:name="{@altova:name}">
			<xsl:apply-templates mode="#current"/>
		</altova:marker>
	</xsl:template>
	<xsl:template match="@* | text()" mode="altova:generate-toc-xslt-tree"/>
	<xsl:template match="altova:UnescapedText" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:copy copy-namespaces="no">
			<xsl:apply-templates mode="#current"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="text()" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="altova:num-lvl" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<xsl:attribute name="altova:level-design-id" select="$altova:level-design-id"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="altova:num-seq" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<xsl:attribute name="altova:marker-design-id" select="generate-id( ancestor::altova:marker[1] )"/>
		</xsl:copy>
	</xsl:template>
	<xsl:variable name="altova:toc-xslt-tree" select="$altova:toc-xslt-tree1"/>
	<xsl:key name="altova:toc-xslt-tree-key" match="altova:level | altova:toc | altova:ref | altova:marker" use="@altova:design-id"/>
	<xsl:template match="altova:level" mode="altova:step2">
		<xsl:apply-templates select="node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:toc | altova:ref" mode="altova:step2">
		<xsl:apply-templates select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', generate-id( current() ) )/node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:marker" mode="altova:step2">
		<a name="{generate-id()}"/>
		<xsl:apply-templates select="node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:num-lvl" mode="altova:step2">
		<xsl:variable name="altova:format" select="@altova:format"/>
		<xsl:variable name="altova:omit-levels" select="@altova:omit-levels"/>
		<xsl:variable name="altova:level-design-id">
			<xsl:choose>
				<xsl:when test="@altova:level-design-id">
					<xsl:value-of select="@altova:level-design-id"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="generate-id( ancestor::altova:level[1] )"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', $altova:level-design-id )">
			<xsl:choose>
				<xsl:when test="$altova:omit-levels">
					<xsl:number level="multiple" count="altova:level[ count( ancestor::altova:level ) >= $altova:omit-levels ]" format="{$altova:format}"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:number level="multiple" count="altova:level" format="{$altova:format}"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="altova:num-seq" mode="altova:step2">
		<xsl:variable name="altova:format" select="@altova:format"/>
		<xsl:variable name="altova:marker-design-id">
			<xsl:choose>
				<xsl:when test="@altova:marker-design-id">
					<xsl:value-of select="@altova:marker-design-id"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="generate-id( ancestor::altova:marker[1] )"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', $altova:marker-design-id )">
			<xsl:variable name="altova:name" select="@altova:name"/>
			<xsl:number level="any" count="altova:marker[ @altova:name = $altova:name ]" format="{$altova:format}"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:function name="altova:is-cell-empty" as="xs:boolean">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="altova:is-node-empty( $altova:cell )"/>
	</xsl:function>
	<xsl:function name="altova:is-node-empty" as="xs:boolean">
		<xsl:param name="altova:node" as="element()"/>
		<xsl:sequence select="every $altova:child in $altova:node/child::node() satisfies ( ( boolean( $altova:child/self::text() ) and string-length( $altova:child ) = 0 ) or ( ( boolean( $altova:child/self::div ) or boolean( $altova:child/self::span ) or boolean( $altova:child/self::a ) ) and altova:is-node-empty( $altova:child ) ) )"/>
	</xsl:function>
	<xsl:function name="altova:col-span" as="xs:integer">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="if ( exists( $altova:cell/@colspan ) ) then xs:integer( $altova:cell/@colspan ) else 1"/>
	</xsl:function>
	<xsl:template match="@* | node()" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current">
				<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="*:tbody" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:choose>
			<xsl:when test="empty(*:tr)">
				<xsl:copy>
					<tr>
						<td/>
					</tr>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current">
						<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
					</xsl:apply-templates>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="th | td" mode="altova:generate-table">
		<xsl:choose>
			<xsl:when test="altova:is-cell-empty( . )">
				<xsl:copy>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:text>&#160;</xsl:text>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:function name="altova:GetChartYValuesForSingleSeries">
		<xsl:param name="seqCategoryLeafPos" as="node()*"/>
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:for-each select="$seqCategoryLeafPos">
			<xsl:element name="altova:Value">
				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>
			</xsl:element>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="nodeCategoryLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>
		<xsl:choose>
			<xsl:when test="count($altova:sCommonContextId) gt 1">
				<xsl:message select="concat('XBRL Chart: Error: Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>
			</xsl:when>
			<xsl:when test="count($altova:sCommonContextId) lt 1">
				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>
				<xsl:sequence select="'altova:no-value'"/>
			</xsl:when>
			<xsl:when test="$bValuesInCategory">
				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">
		<xsl:param name="nodeParam" as="node()"/>
		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>
	</xsl:function>
</xsl:stylesheet>
