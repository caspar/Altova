<?xml version="1.0" encoding="UTF-8"?><structure version="7" cssmode="strict" relativeto="*SPS" encodinghtml="UTF-8" encodingrtf="ISO-8859-1" encodingpdf="UTF-8" embed-images="1">	<parameters/>	<schemasources>		<namespaces/>		<schemasources>			<xsdschemasource name="$XML" main="1" schemafile="Data.xsd" workingxmlfile="Data.xml">				<xmltablesupport/>				<textstateicons/>			</xsdschemasource>		</schemasources>	</schemasources>	<modules/>	<flags>		<scripts/>		<globalparts/>		<designfragments/>		<pagelayouts/>	</flags>	<scripts>		<script language="javascript"/>	</scripts>	<globalstyles>		<rules selector=".info">			<media>				<media value="all"/>			</media>			<rule background-color="#f6f6ff" border="1px solid navy" color="navy" font-weight="bold" margin-bottom="6px" margin-top="6px" padding="2px"/>		</rules>	</globalstyles>	<mainparts>		<children>			<globaltemplate match="/" matchtype="named" parttype="main">				<children>					<paragraph paragraphtag="h2">						<styles border-bottom="2px solid navy" color="navy"/>						<children>							<text fixtext="Example: Templates"/>						</children>					</paragraph>					<paragraph paragraphtag="p">						<properties class="info"/>						<children>							<text fixtext="Templates are created by dragging an element, attribute or type from the tree in the &quot;Schema Sources&quot; side bar into the design view. StyleVision automatically creates all templates necessary to create a legal stylesheet, depending on the selected item, and the drop location."/>						</children>					</paragraph>					<text fixtext="Select the schema source with name &apos;$XML&apos; (the only schema source in this example):">						<styles color="blue" font-style="italic"/>					</text>					<newline/>					<template match="$XML" matchtype="schemasource">						<editorproperties elementstodisplay="5"/>						<children>							<newline/>							<newline/>							<text fixtext="Select the root element with name &apos;data&apos; (there always is exactly 1):">								<styles color="blue" font-style="italic"/>							</text>							<newline/>							<template match="data" matchtype="schemagraphitem">								<editorproperties elementstodisplay="5"/>								<children>									<newline/>									<newline/>									<text fixtext="within &apos;data&apos;, select the element with name &apos;strings&apos; (in our case, there is exactly 1):">										<styles color="blue" font-style="italic"/>									</text>									<newline/>									<template match="strings" matchtype="schemagraphitem">										<editorproperties elementstodisplay="5"/>										<children>											<newline/>											<newline/>											<text fixtext="within &apos;strings&apos; iterate over all elements with name &apos;string&apos; (this can happen from 0 to n times):">												<styles color="blue" font-style="italic"/>											</text>											<newline/>											<template match="string" matchtype="schemagraphitem">												<editorproperties elementstodisplay="5"/>												<children>													<newline/>													<newline/>													<text fixtext="print out the content of the &apos;string&apos; element:">														<styles color="blue" font-style="italic"/>													</text>													<newline/>													<content>														<format datatype="string"/>													</content>													<newline/>													<newline/>													<text fixtext="finished with &apos;string&apos;">														<styles color="blue" font-style="italic"/>													</text>													<newline/>												</children>											</template>											<newline/>											<newline/>											<text fixtext="finished with &apos;strings&apos;">												<styles color="blue" font-style="italic"/>											</text>											<newline/>										</children>									</template>									<newline/>									<newline/>									<text fixtext="finished with &apos;data&apos;">										<styles color="blue" font-style="italic"/>									</text>									<newline/>								</children>							</template>							<newline/>							<newline/>							<text fixtext="finished with the schema source &apos;$XML&apos;">								<styles color="blue" font-style="italic"/>							</text>							<newline/>						</children>					</template>					<newline/>					<line/>					<paragraph paragraphtag="p">						<properties class="info"/>						<children>							<text fixtext="The same as above, but without any further explanation text and only generate a newline after every &apos;string&apos; content. To create this, we simply dragged the &apos;string&apos; element from the schema tree to this location. StyleVision automatically creates all necessary parent templates."/>						</children>					</paragraph>					<template match="$XML" matchtype="schemasource">						<editorproperties elementstodisplay="5"/>						<children>							<template match="data" matchtype="schemagraphitem">								<editorproperties elementstodisplay="5"/>								<children>									<template match="strings" matchtype="schemagraphitem">										<editorproperties elementstodisplay="5"/>										<children>											<template match="string" matchtype="schemagraphitem">												<editorproperties elementstodisplay="5"/>												<children>													<content>														<format datatype="string"/>													</content>													<newline/>												</children>											</template>										</children>									</template>								</children>							</template>						</children>					</template>					<newline/>				</children>			</globaltemplate>		</children>	</mainparts>	<globalparts/>	<pagelayout/>	<designfragments/></structure>