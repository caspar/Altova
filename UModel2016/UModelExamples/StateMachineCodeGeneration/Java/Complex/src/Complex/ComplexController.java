////////////////////////////////////////////////////////////////////////
//
// ComplexController.java
//
// This file was generated by UModel 2011r2 Enterprise Edition
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the UModel Documentation for further details.
// http://www.altova.com/umodel
//
////////////////////////////////////////////////////////////////////////
package Complex;

import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.Action;

@SuppressWarnings({"serial", "unused"})

public abstract class ComplexController
{
	public enum TStateId
	{
		Complex_Root,
		Complex_MainRegion_S5,
		Complex_MainRegion_S5_RegionA_S5A1,
		Complex_MainRegion_S5_RegionA_S5A2,
		Complex_MainRegion_S5_RegionA_S5A3,
		Complex_MainRegion_S5_RegionB_S5B1,
		Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B11,
		Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B12,
		Complex_MainRegion_S5_RegionB_S5B2,
		Complex_MainRegion_S5_RegionC_S5C1,
		Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C11,
		Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12,
		Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121,
		Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211,
		Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12111,
		Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12112,
		Complex_MainRegion_S5_RegionC_S5C2,
		Complex_MainRegion_S1,
		Complex_MainRegion_S2,
		Complex_MainRegion_S3,
		Complex_MainRegion_S4,
		Complex_MainRegion_S4_Region4_S41,
		Complex_MainRegion_S4_Region4_S42,
		Complex_MainRegion_S4_Region4_FinalS4
	}

	public interface IState
	{
		String getName();
		TStateId getId();
		IRegion[] getRegions();
	}

	public interface IRegion
	{
		String getName();
		IState[] getStates();
		IState getCurrentState();
	}

	// get the Root State
	public IState getRootState() {
		return _getRootState();
	}
	public IState getCurrentTopLevelState() {
		return getRootState().getRegions()[0].getCurrentState();
	}

	// Initialize the State Machine
	public void Initialize() {
		OnDebugMessage( "BEGIN_INITIALIZE" );
		Complex_MainRegion_S5 = new CComplex.MainRegion.S5(this);
		Complex_MainRegion_S5_RegionA_S5A1 = new CComplex.MainRegion.S5.RegionA.S5A1(this);
		Complex_MainRegion_S5_RegionA_S5A2 = new CComplex.MainRegion.S5.RegionA.S5A2(this);
		Complex_MainRegion_S5_RegionA_S5A3 = new CComplex.MainRegion.S5.RegionA.S5A3(this);
		Complex_MainRegion_S5_RegionB_S5B1 = new CComplex.MainRegion.S5.RegionB.S5B1(this);
		Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B11 = new CComplex.MainRegion.S5.RegionB.S5B1.RegionB1.S5B11(this);
		Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B12 = new CComplex.MainRegion.S5.RegionB.S5B1.RegionB1.S5B12(this);
		Complex_MainRegion_S5_RegionB_S5B2 = new CComplex.MainRegion.S5.RegionB.S5B2(this);
		Complex_MainRegion_S5_RegionC_S5C1 = new CComplex.MainRegion.S5.RegionC.S5C1(this);
		Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C11 = new CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C11(this);
		Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12 = new CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12(this);
		Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121 = new CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121(this);
		Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211 = new CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211(this);
		Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12111 = new CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.S5C12111(this);
		Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12112 = new CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.S5C12112(this);
		Complex_MainRegion_S5_RegionC_S5C2 = new CComplex.MainRegion.S5.RegionC.S5C2(this);
		Complex_MainRegion_S1 = new CComplex.MainRegion.S1(this);
		Complex_MainRegion_S2 = new CComplex.MainRegion.S2(this);
		Complex_MainRegion_S3 = new CComplex.MainRegion.S3(this);
		Complex_MainRegion_S4 = new CComplex.MainRegion.S4(this);
		Complex_MainRegion_S4_Region4_S41 = new CComplex.MainRegion.S4.Region4.S41(this);
		Complex_MainRegion_S4_Region4_S42 = new CComplex.MainRegion.S4.Region4.S42(this);
		Complex_MainRegion_S4_Region4_FinalS4 = new CComplex.MainRegion.S4.Region4.FinalS4(this);

		rootState = new CComplex(this);

		CComplex.MainRegion.setCurrentState(this, CComplex.MainRegion.getInitState(this));
		CComplex.MainRegion.S5.RegionA.setCurrentState(this, CComplex.MainRegion.S5.RegionA.getInitState(this));
		CComplex.MainRegion.S5.RegionB.setCurrentState(this, CComplex.MainRegion.S5.RegionB.getInitState(this));
		CComplex.MainRegion.S5.RegionB.S5B1.RegionB1.setCurrentState(this, CComplex.MainRegion.S5.RegionB.S5B1.RegionB1.getInitState(this));
		CComplex.MainRegion.S5.RegionC.setCurrentState(this, CComplex.MainRegion.S5.RegionC.getInitState(this));
		CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.setCurrentState(this, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.getInitState(this));
		CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.setCurrentState(this, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.getInitState(this));
		CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.setCurrentState(this, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.getInitState(this));
		CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.setCurrentState(this, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.getInitState(this));
		CComplex.MainRegion.S4.Region4.setCurrentState(this, CComplex.MainRegion.S4.Region4.getInitState(this));
		OnDebugMessage( "END_INITIALIZE" );
	}

	// get all possible call event actions
	public Action[] getCallEvents() {
		return new Action[] {
			new AbstractAction("Event1") {
				public void actionPerformed(ActionEvent e) {
					Event1();
				}
			},
			new AbstractAction("Event2") {
				public void actionPerformed(ActionEvent e) {
					Event2();
				}
			},
			new AbstractAction("Event3") {
				public void actionPerformed(ActionEvent e) {
					Event3();
				}
			},
			new AbstractAction("Event4") {
				public void actionPerformed(ActionEvent e) {
					Event4();
				}
			}
		};
	}

	// call event method implementations
	public boolean Event1() {
		OnDebugMessage("BEGIN_EVENT: Event1");
		boolean bHandled = _getRootState().Event1();
		OnDebugMessage("END_EVENT: Event1");
		return bHandled;
	}
	public boolean Event2() {
		OnDebugMessage("BEGIN_EVENT: Event2");
		boolean bHandled = _getRootState().Event2();
		OnDebugMessage("END_EVENT: Event2");
		return bHandled;
	}
	public boolean Event3() {
		OnDebugMessage("BEGIN_EVENT: Event3");
		boolean bHandled = _getRootState().Event3();
		OnDebugMessage("END_EVENT: Event3");
		return bHandled;
	}
	public boolean Event4() {
		OnDebugMessage("BEGIN_EVENT: Event4");
		boolean bHandled = _getRootState().Event4();
		OnDebugMessage("END_EVENT: Event4");
		return bHandled;
	}

	// Overwrite to handle entry/exit/do actions, transition effects,...:
	public void OnEntryS5C12111() {OnDebugMessage("ACTION: OnEntryS5C12111");}
	public void OnExitS5C12111() {OnDebugMessage("ACTION: OnExitS5C12111");}
	public void OnEntryS5C12112() {OnDebugMessage("ACTION: OnEntryS5C12112");}
	public void OnExitS5C12112() {OnDebugMessage("ACTION: OnExitS5C12112");}
	public void OnEntryS5C1211() {OnDebugMessage("ACTION: OnEntryS5C1211");}
	public void OnExitS5C1211() {OnDebugMessage("ACTION: OnExitS5C1211");}
	public void OnEntryS5C121() {OnDebugMessage("ACTION: OnEntryS5C121");}
	public void OnExitS5C121() {OnDebugMessage("ACTION: OnExitS5C121");}
	public void OnEntryS5B11() {OnDebugMessage("ACTION: OnEntryS5B11");}
	public void OnExitS5B11() {OnDebugMessage("ACTION: OnExitS5B11");}
	public void OnEntryS5B12() {OnDebugMessage("ACTION: OnEntryS5B12");}
	public void OnExitS5B12() {OnDebugMessage("ACTION: OnExitS5B12");}
	public void OnEntryS5C11() {OnDebugMessage("ACTION: OnEntryS5C11");}
	public void OnExitS5C11() {OnDebugMessage("ACTION: OnExitS5C11");}
	public void OnEntryS5C12() {OnDebugMessage("ACTION: OnEntryS5C12");}
	public void OnExitS5C12() {OnDebugMessage("ACTION: OnExitS5C12");}
	public void OnEntryS5A1() {OnDebugMessage("ACTION: OnEntryS5A1");}
	public void OnExitS5A1() {OnDebugMessage("ACTION: OnExitS5A1");}
	public void OnDoS5A1() {OnDebugMessage("ACTION: OnDoS5A1");}
	public void OnEntryS5A2() {OnDebugMessage("ACTION: OnEntryS5A2");}
	public void OnExitS5A2() {OnDebugMessage("ACTION: OnExitS5A2");}
	public void OnDoS5A2() {OnDebugMessage("ACTION: OnDoS5A2");}
	public void OnEntryS5A3() {OnDebugMessage("ACTION: OnEntryS5A3");}
	public void OnExitS5A3() {OnDebugMessage("ACTION: OnExitS5A3");}
	public void OnDoS5A3() {OnDebugMessage("ACTION: OnDoS5A3");}
	public void OnEntryS5B1() {OnDebugMessage("ACTION: OnEntryS5B1");}
	public void OnExitS5B1() {OnDebugMessage("ACTION: OnExitS5B1");}
	public void OnEntryS5B2() {OnDebugMessage("ACTION: OnEntryS5B2");}
	public void OnExitS5B2() {OnDebugMessage("ACTION: OnExitS5B2");}
	public void OnEntryS5C1() {OnDebugMessage("ACTION: OnEntryS5C1");}
	public void OnExitS5C1() {OnDebugMessage("ACTION: OnExitS5C1");}
	public void OnEntryS5C2() {OnDebugMessage("ACTION: OnEntryS5C2");}
	public void OnExitS5C2() {OnDebugMessage("ACTION: OnExitS5C2");}
	public void OnEntryS41() {OnDebugMessage("ACTION: OnEntryS41");}
	public void OnExitS41() {OnDebugMessage("ACTION: OnExitS41");}
	public void OnEntryS42() {OnDebugMessage("ACTION: OnEntryS42");}
	public void OnExitS42() {OnDebugMessage("ACTION: OnExitS42");}
	public void OnEntryS5() {OnDebugMessage("ACTION: OnEntryS5");}
	public void OnExitS5() {OnDebugMessage("ACTION: OnExitS5");}
	public void OnEntryS1() {OnDebugMessage("ACTION: OnEntryS1");}
	public void OnExitS1() {OnDebugMessage("ACTION: OnExitS1");}
	public void OnEntryS2() {OnDebugMessage("ACTION: OnEntryS2");}
	public void OnExitS2() {OnDebugMessage("ACTION: OnExitS2");}
	public void OnEntryS3() {OnDebugMessage("ACTION: OnEntryS3");}
	public void OnExitS3() {OnDebugMessage("ACTION: OnExitS3");}
	public void OnEntryS4() {OnDebugMessage("ACTION: OnEntryS4");}
	public void OnExitS4() {OnDebugMessage("ACTION: OnExitS4");}
	public void OnEffectLeaveRegionA() {OnDebugMessage("ACTION: OnEffectLeaveRegionA");}
	public void OnEffectLeaveRegionB() {OnDebugMessage("ACTION: OnEffectLeaveRegionB");}
	public void OnEffectLeaveRegionC() {OnDebugMessage("ACTION: OnEffectLeaveRegionC");}
	public void OnEffectS5_S4() {OnDebugMessage("ACTION: OnEffectS5_S4");}
	public void OnEffectS4_S5() {OnDebugMessage("ACTION: OnEffectS4_S5");}
	public void OnEffectLeaveJoin() {OnDebugMessage("ACTION: OnEffectLeaveJoin");}

	// Overwrite to handle debug messages:
	public void OnDebugMessage(String str) {
	}

	// Additional defined operations of the controller class:
	public abstract boolean CanGoS5();
	public abstract boolean CanGoS2();
	public void OnExitntryS5C11() {
		OnDebugMessage( "OPERATION: OnExitntryS5C11");
	}

	// Internal Definitions and Implementations

	// Root State Definition
	private CComplex rootState = null;
	private CComplex _getRootState() {
		if(rootState == null)
			Initialize();

		return rootState;
	}

	// State Variable Definitions
	private CComplex.MainRegion.S5 Complex_MainRegion_S5 = null;
	private CComplex.MainRegion.S5.RegionA.S5A1 Complex_MainRegion_S5_RegionA_S5A1 = null;
	private CComplex.MainRegion.S5.RegionA.S5A2 Complex_MainRegion_S5_RegionA_S5A2 = null;
	private CComplex.MainRegion.S5.RegionA.S5A3 Complex_MainRegion_S5_RegionA_S5A3 = null;
	private CComplex.MainRegion.S5.RegionB.S5B1 Complex_MainRegion_S5_RegionB_S5B1 = null;
	private CComplex.MainRegion.S5.RegionB.S5B1.RegionB1.S5B11 Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B11 = null;
	private CComplex.MainRegion.S5.RegionB.S5B1.RegionB1.S5B12 Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B12 = null;
	private CComplex.MainRegion.S5.RegionB.S5B2 Complex_MainRegion_S5_RegionB_S5B2 = null;
	private CComplex.MainRegion.S5.RegionC.S5C1 Complex_MainRegion_S5_RegionC_S5C1 = null;
	private CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C11 Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C11 = null;
	private CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12 Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12 = null;
	private CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121 Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121 = null;
	private CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211 Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211 = null;
	private CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.S5C12111 Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12111 = null;
	private CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.S5C12112 Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12112 = null;
	private CComplex.MainRegion.S5.RegionC.S5C2 Complex_MainRegion_S5_RegionC_S5C2 = null;
	private CComplex.MainRegion.S1 Complex_MainRegion_S1 = null;
	private CComplex.MainRegion.S2 Complex_MainRegion_S2 = null;
	private CComplex.MainRegion.S3 Complex_MainRegion_S3 = null;
	private CComplex.MainRegion.S4 Complex_MainRegion_S4 = null;
	private CComplex.MainRegion.S4.Region4.S41 Complex_MainRegion_S4_Region4_S41 = null;
	private CComplex.MainRegion.S4.Region4.S42 Complex_MainRegion_S4_Region4_S42 = null;
	private CComplex.MainRegion.S4.Region4.FinalS4 Complex_MainRegion_S4_Region4_FinalS4 = null;

	// Implementation for StateMachine 'Complex'
	private static class CComplex implements IState
	{
		private ComplexController context;
		private MainRegion.MainRegionState svMainRegion; // State Variable for Region 'MainRegion'

		public CComplex(ComplexController context) {
			this.context = context;
		}
		public String getName() {
			return "Complex";
		}
		public TStateId getId() {
			return TStateId.Complex_Root;
		}
		public IRegion[] getRegions() {
			return new IRegion[] {
				new MainRegion(context)
			};
		}
		public boolean Event1() {
			return MainRegion.getCurrentState(context).Event1();
		}
		public boolean Event2() {
			return MainRegion.getCurrentState(context).Event2();
		}
		public boolean Event3() {
			return MainRegion.getCurrentState(context).Event3();
		}
		public boolean Event4() {
			return MainRegion.getCurrentState(context).Event4();
		}

		// Implementation for Region 'MainRegion'
		public static class MainRegion implements IRegion
		{
			private ComplexController context;

			public MainRegion(ComplexController context) {
				this.context = context;
			}
			public String getName() {
				return "MainRegion";
			}
			public IState[] getStates() {
				 return new IState[] {
					new S5(context),
					new S1(context),
					new S2(context),
					new S3(context),
					new S4(context)
				};
			}
			public IState getCurrentState() {
				return getCurrentState(context);
			}
			public static MainRegionState getCurrentState(ComplexController context) {
				return context._getRootState().svMainRegion;
			}
			public static void setCurrentState(ComplexController context, MainRegionState state) {
				context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() );
				context._getRootState().svMainRegion = state;
				context._getRootState().svMainRegion.entryState();
			}
			public static MainRegionState getInitState(ComplexController context) {
				return context.Complex_MainRegion_S1;
			}

			// Base class for all states of Region 'MainRegion'
			public static abstract class MainRegionState implements IState
			{
				protected ComplexController context;
				public boolean Event1() {return false;}
				public boolean Event2() {return false;}
				public boolean Event3() {return false;}
				public boolean Event4() {return false;}
				public void enterSubStates() {}
				public void initSubStates() {}
				public void entryState() {}
				public void exitState() {}
			}

			// Implementation for State 'S5'
			public static class S5 extends MainRegionState
			{
				private RegionA.RegionAState svRegionA; // State Variable for Region 'RegionA'
				private RegionB.RegionBState svRegionB; // State Variable for Region 'RegionB'
				private RegionC.RegionCState svRegionC; // State Variable for Region 'RegionC'

				public S5(ComplexController context) {
					this.context = context;
				}
				@Override
				public String getName() {
					return "S5";
				}
				@Override
				public TStateId getId() {
					return TStateId.Complex_MainRegion_S5;
				}
				@Override
				public IRegion[] getRegions() {
					return new IRegion[] {
						new RegionA(context),
						new RegionB(context),
						new RegionC(context)
					};
				}
				@Override
				public boolean Event1() {
					boolean bHandled = false;

					if(RegionA.getCurrentState(context).Event1())
						bHandled = true;

					if(RegionB.getCurrentState(context).Event1())
						bHandled = true;

					if(RegionC.getCurrentState(context).Event1())
						bHandled = true;

					if(bHandled)
						return true;

					return false;
				}
				@Override
				public boolean Event3() {
					if(RegionC.getCurrentState(context).Event3())
						return true;

					return false;
				}
				@Override
				public boolean Event4() {
					// Handle S5 ---> S4
					context.OnDebugMessage( "TRANSITION: S5 ---> S4");
					exitState();
					context.OnEffectS5_S4(); // Handle effect of transition S5 ---> S4
					CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S4);
					CComplex.MainRegion.S4.Region4.setCurrentState(context, CComplex.MainRegion.S4.Region4.getInitState(context));
					return true;
				}
				@Override
				public void entryState() {
					context.OnEntryS5();
				}
				@Override
				public void exitState() {
					RegionA.getCurrentState(context).exitState();
					RegionB.getCurrentState(context).exitState();
					RegionC.getCurrentState(context).exitState();
					context.OnExitS5();
				}
				@Override
				public void initSubStates() {
					RegionB.setCurrentState(context, RegionB.getInitState(context));
					RegionB.getCurrentState(context).initSubStates();
				}
				@Override
				public void enterSubStates() {
					RegionC.getCurrentState(context).entryState();
					RegionC.getCurrentState(context).enterSubStates();
				}
				public boolean processJoin_S5A3_S5B2_S5C2() {
					// Handle <Join> ---> S42
					context.OnDebugMessage( "TRANSITION: <Join> ---> S42");
					exitState();
					context.OnEffectLeaveRegionA(); // Handle effect of transition S5A3 ---> <Join>
					context.OnEffectLeaveRegionB(); // Handle effect of transition S5B2 ---> <Join>
					context.OnEffectLeaveRegionC(); // Handle effect of transition S5C2 ---> <Join>
					context.OnEffectLeaveJoin(); // Handle effect of transition <Join> ---> S42
					CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S4);
					CComplex.MainRegion.S4.Region4.setCurrentState(context, context.Complex_MainRegion_S4_Region4_S42);
					return true;
				}

				// Implementation for Region 'RegionA'
				public static class RegionA implements IRegion
				{
					private ComplexController context;

					public RegionA(ComplexController context) {
						this.context = context;
					}
					public String getName() {
						return "RegionA";
					}
					public IState[] getStates() {
						 return new IState[] {
							new S5A1(context),
							new S5A2(context),
							new S5A3(context)
						};
					}
					public IState getCurrentState() {
						return getCurrentState(context);
					}
					public static RegionAState getCurrentState(ComplexController context) {
						return context.Complex_MainRegion_S5.svRegionA;
					}
					public static void setCurrentState(ComplexController context, RegionAState state) {
						context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() );
						context.Complex_MainRegion_S5.svRegionA = state;
						context.Complex_MainRegion_S5.svRegionA.entryState();
					}
					public static RegionAState getInitState(ComplexController context) {
						return context.Complex_MainRegion_S5_RegionA_S5A1;
					}

					// Base class for all states of Region 'RegionA'
					public static abstract class RegionAState implements IState
					{
						protected ComplexController context;
						public boolean Event1() {return false;}
						public void entryState() {}
						public void exitState() {}
					}

					// Implementation for State 'S5A1'
					public static class S5A1 extends RegionAState
					{
						public S5A1(ComplexController context) {
							this.context = context;
						}
						@Override
						public String getName() {
							return "S5A1";
						}
						@Override
						public TStateId getId() {
							return TStateId.Complex_MainRegion_S5_RegionA_S5A1;
						}
						@Override
						public IRegion[] getRegions() {
							return new IRegion[] {
							};
						}
						@Override
						public boolean Event1() {
							// Handle S5A1 ---> S5A2
							context.OnDebugMessage( "TRANSITION: S5A1 ---> S5A2");
							exitState();
							CComplex.MainRegion.S5.RegionA.setCurrentState(context, context.Complex_MainRegion_S5_RegionA_S5A2);
							return true;
						}
						@Override
						public void entryState() {
							context.OnEntryS5A1();
							context.OnDoS5A1();
						}
						@Override
						public void exitState() {
							context.OnExitS5A1();
						}
					}

					// Implementation for State 'S5A2'
					public static class S5A2 extends RegionAState
					{
						public S5A2(ComplexController context) {
							this.context = context;
						}
						@Override
						public String getName() {
							return "S5A2";
						}
						@Override
						public TStateId getId() {
							return TStateId.Complex_MainRegion_S5_RegionA_S5A2;
						}
						@Override
						public IRegion[] getRegions() {
							return new IRegion[] {
							};
						}
						@Override
						public boolean Event1() {
							// Handle S5A2 ---> S5A3
							context.OnDebugMessage( "TRANSITION: S5A2 ---> S5A3");
							exitState();
							CComplex.MainRegion.S5.RegionA.setCurrentState(context, context.Complex_MainRegion_S5_RegionA_S5A3);
							if(CComplex.MainRegion.S5.RegionB.getCurrentState(context) == context.Complex_MainRegion_S5_RegionB_S5B2 &&
							   CComplex.MainRegion.S5.RegionC.getCurrentState(context) == context.Complex_MainRegion_S5_RegionC_S5C2) {
								if ( context.Complex_MainRegion_S5.processJoin_S5A3_S5B2_S5C2() )
									return true;

								// else ERROR!
							}
							return true;
						}
						@Override
						public void entryState() {
							context.OnEntryS5A2();
							context.OnDoS5A2();
						}
						@Override
						public void exitState() {
							context.OnExitS5A2();
						}
					}

					// Implementation for State 'S5A3'
					public static class S5A3 extends RegionAState
					{
						public S5A3(ComplexController context) {
							this.context = context;
						}
						@Override
						public String getName() {
							return "S5A3";
						}
						@Override
						public TStateId getId() {
							return TStateId.Complex_MainRegion_S5_RegionA_S5A3;
						}
						@Override
						public IRegion[] getRegions() {
							return new IRegion[] {
							};
						}
						@Override
						public void entryState() {
							context.OnEntryS5A3();
							context.OnDoS5A3();
						}
						@Override
						public void exitState() {
							context.OnExitS5A3();
						}
					}
				}

				// Implementation for Region 'RegionB'
				public static class RegionB implements IRegion
				{
					private ComplexController context;

					public RegionB(ComplexController context) {
						this.context = context;
					}
					public String getName() {
						return "RegionB";
					}
					public IState[] getStates() {
						 return new IState[] {
							new S5B1(context),
							new S5B2(context)
						};
					}
					public IState getCurrentState() {
						return getCurrentState(context);
					}
					public static RegionBState getCurrentState(ComplexController context) {
						return context.Complex_MainRegion_S5.svRegionB;
					}
					public static void setCurrentState(ComplexController context, RegionBState state) {
						context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() );
						context.Complex_MainRegion_S5.svRegionB = state;
						context.Complex_MainRegion_S5.svRegionB.entryState();
					}
					public static RegionBState getInitState(ComplexController context) {
						return context.Complex_MainRegion_S5_RegionB_S5B1;
					}

					// Base class for all states of Region 'RegionB'
					public static abstract class RegionBState implements IState
					{
						protected ComplexController context;
						public boolean Event1() {return false;}
						public void initSubStates() {}
						public void entryState() {}
						public void exitState() {}
					}

					// Implementation for State 'S5B1'
					public static class S5B1 extends RegionBState
					{
						private RegionB1.RegionB1State svRegionB1; // State Variable for Region 'RegionB1'

						public S5B1(ComplexController context) {
							this.context = context;
						}
						@Override
						public String getName() {
							return "S5B1";
						}
						@Override
						public TStateId getId() {
							return TStateId.Complex_MainRegion_S5_RegionB_S5B1;
						}
						@Override
						public IRegion[] getRegions() {
							return new IRegion[] {
								new RegionB1(context)
							};
						}
						@Override
						public boolean Event1() {
							if(RegionB1.getCurrentState(context).Event1())
								return true;

							return false;
						}
						@Override
						public void entryState() {
							context.OnEntryS5B1();
						}
						@Override
						public void exitState() {
							RegionB1.getCurrentState(context).exitState();
							context.OnExitS5B1();
						}
						@Override
						public void initSubStates() {
							RegionB1.setCurrentState(context, RegionB1.getInitState(context));
						}

						// Implementation for Region 'RegionB1'
						public static class RegionB1 implements IRegion
						{
							private ComplexController context;

							public RegionB1(ComplexController context) {
								this.context = context;
							}
							public String getName() {
								return "RegionB1";
							}
							public IState[] getStates() {
								 return new IState[] {
									new S5B11(context),
									new S5B12(context)
								};
							}
							public IState getCurrentState() {
								return getCurrentState(context);
							}
							public static RegionB1State getCurrentState(ComplexController context) {
								return context.Complex_MainRegion_S5_RegionB_S5B1.svRegionB1;
							}
							public static void setCurrentState(ComplexController context, RegionB1State state) {
								context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() );
								context.Complex_MainRegion_S5_RegionB_S5B1.svRegionB1 = state;
								context.Complex_MainRegion_S5_RegionB_S5B1.svRegionB1.entryState();
							}
							public static RegionB1State getInitState(ComplexController context) {
								return context.Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B11;
							}

							// Base class for all states of Region 'RegionB1'
							public static abstract class RegionB1State implements IState
							{
								protected ComplexController context;
								public boolean Event1() {return false;}
								public void entryState() {}
								public void exitState() {}
							}

							// Implementation for State 'S5B11'
							public static class S5B11 extends RegionB1State
							{
								public S5B11(ComplexController context) {
									this.context = context;
								}
								@Override
								public String getName() {
									return "S5B11";
								}
								@Override
								public TStateId getId() {
									return TStateId.Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B11;
								}
								@Override
								public IRegion[] getRegions() {
									return new IRegion[] {
									};
								}
								@Override
								public boolean Event1() {
									// Handle S5B11 ---> S5B12
									context.OnDebugMessage( "TRANSITION: S5B11 ---> S5B12");
									exitState();
									CComplex.MainRegion.S5.RegionB.S5B1.RegionB1.setCurrentState(context, context.Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B12);
									return true;
								}
								@Override
								public void entryState() {
									context.OnEntryS5B11();
								}
								@Override
								public void exitState() {
									context.OnExitS5B11();
								}
							}

							// Implementation for State 'S5B12'
							public static class S5B12 extends RegionB1State
							{
								public S5B12(ComplexController context) {
									this.context = context;
								}
								@Override
								public String getName() {
									return "S5B12";
								}
								@Override
								public TStateId getId() {
									return TStateId.Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B12;
								}
								@Override
								public IRegion[] getRegions() {
									return new IRegion[] {
									};
								}
								@Override
								public boolean Event1() {
									// Handle S5B12 ---> S5B2
									context.OnDebugMessage( "TRANSITION: S5B12 ---> S5B2");
									context.Complex_MainRegion_S5_RegionB_S5B1.exitState();
									CComplex.MainRegion.S5.RegionB.setCurrentState(context, context.Complex_MainRegion_S5_RegionB_S5B2);
									if(CComplex.MainRegion.S5.RegionA.getCurrentState(context) == context.Complex_MainRegion_S5_RegionA_S5A3 &&
									   CComplex.MainRegion.S5.RegionC.getCurrentState(context) == context.Complex_MainRegion_S5_RegionC_S5C2) {
										if ( context.Complex_MainRegion_S5.processJoin_S5A3_S5B2_S5C2() )
											return true;

										// else ERROR!
									}
									return true;
								}
								@Override
								public void entryState() {
									context.OnEntryS5B12();
								}
								@Override
								public void exitState() {
									context.OnExitS5B12();
								}
							}
						}
					}

					// Implementation for State 'S5B2'
					public static class S5B2 extends RegionBState
					{
						public S5B2(ComplexController context) {
							this.context = context;
						}
						@Override
						public String getName() {
							return "S5B2";
						}
						@Override
						public TStateId getId() {
							return TStateId.Complex_MainRegion_S5_RegionB_S5B2;
						}
						@Override
						public IRegion[] getRegions() {
							return new IRegion[] {
							};
						}
						@Override
						public void entryState() {
							context.OnEntryS5B2();
						}
						@Override
						public void exitState() {
							context.OnExitS5B2();
						}
					}
				}

				// Implementation for Region 'RegionC'
				public static class RegionC implements IRegion
				{
					private ComplexController context;

					public RegionC(ComplexController context) {
						this.context = context;
					}
					public String getName() {
						return "RegionC";
					}
					public IState[] getStates() {
						 return new IState[] {
							new S5C1(context),
							new S5C2(context)
						};
					}
					public IState getCurrentState() {
						return getCurrentState(context);
					}
					public static RegionCState getCurrentState(ComplexController context) {
						return context.Complex_MainRegion_S5.svRegionC;
					}
					public static void setCurrentState(ComplexController context, RegionCState state) {
						context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() );
						context.Complex_MainRegion_S5.svRegionC = state;
						context.Complex_MainRegion_S5.svRegionC.entryState();
					}
					public static RegionCState getInitState(ComplexController context) {
						return context.Complex_MainRegion_S5_RegionC_S5C1;
					}

					// Base class for all states of Region 'RegionC'
					public static abstract class RegionCState implements IState
					{
						protected ComplexController context;
						public boolean Event1() {return false;}
						public boolean Event3() {return false;}
						public void enterSubStates() {}
						public void entryState() {}
						public void exitState() {}
					}

					// Implementation for State 'S5C1'
					public static class S5C1 extends RegionCState
					{
						private RegionC1.RegionC1State svRegionC1; // State Variable for Region 'RegionC1'

						public S5C1(ComplexController context) {
							this.context = context;
						}
						@Override
						public String getName() {
							return "S5C1";
						}
						@Override
						public TStateId getId() {
							return TStateId.Complex_MainRegion_S5_RegionC_S5C1;
						}
						@Override
						public IRegion[] getRegions() {
							return new IRegion[] {
								new RegionC1(context)
							};
						}
						@Override
						public boolean Event1() {
							if(RegionC1.getCurrentState(context).Event1())
								return true;

							return false;
						}
						@Override
						public boolean Event3() {
							if(RegionC1.getCurrentState(context).Event3())
								return true;

							return false;
						}
						@Override
						public void entryState() {
							context.OnEntryS5C1();
						}
						@Override
						public void exitState() {
							RegionC1.getCurrentState(context).exitState();
							context.OnExitS5C1();
						}
						@Override
						public void enterSubStates() {
							RegionC1.getCurrentState(context).entryState();
							RegionC1.getCurrentState(context).enterSubStates();
						}

						// Implementation for Region 'RegionC1'
						public static class RegionC1 implements IRegion
						{
							private ComplexController context;

							public RegionC1(ComplexController context) {
								this.context = context;
							}
							public String getName() {
								return "RegionC1";
							}
							public IState[] getStates() {
								 return new IState[] {
									new S5C11(context),
									new S5C12(context)
								};
							}
							public IState getCurrentState() {
								return getCurrentState(context);
							}
							public static RegionC1State getCurrentState(ComplexController context) {
								return context.Complex_MainRegion_S5_RegionC_S5C1.svRegionC1;
							}
							public static void setCurrentState(ComplexController context, RegionC1State state) {
								context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() );
								context.Complex_MainRegion_S5_RegionC_S5C1.svRegionC1 = state;
								context.Complex_MainRegion_S5_RegionC_S5C1.svRegionC1.entryState();
							}
							public static RegionC1State getInitState(ComplexController context) {
								return context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C11;
							}

							// Base class for all states of Region 'RegionC1'
							public static abstract class RegionC1State implements IState
							{
								protected ComplexController context;
								public boolean Event1() {return false;}
								public boolean Event3() {return false;}
								public void enterSubStates() {}
								public void entryState() {}
								public void exitState() {}
							}

							// Implementation for State 'S5C11'
							public static class S5C11 extends RegionC1State
							{
								public S5C11(ComplexController context) {
									this.context = context;
								}
								@Override
								public String getName() {
									return "S5C11";
								}
								@Override
								public TStateId getId() {
									return TStateId.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C11;
								}
								@Override
								public IRegion[] getRegions() {
									return new IRegion[] {
									};
								}
								@Override
								public boolean Event1() {
									// Handle S5C11 ---> S5C12
									context.OnDebugMessage( "TRANSITION: S5C11 ---> S5C12");
									exitState();
									CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12);
									CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.setCurrentState(context, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.getInitState(context));
									CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.setCurrentState(context, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.getInitState(context));
									CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.setCurrentState(context, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.getInitState(context));
									return true;
								}
								@Override
								public void entryState() {
									context.OnEntryS5C11();
								}
								@Override
								public void exitState() {
									context.OnExitS5C11();
								}
							}

							// Implementation for State 'S5C12'
							public static class S5C12 extends RegionC1State
							{
								private RegionC12.RegionC12State svRegionC12; // State Variable for Region 'RegionC12'

								public S5C12(ComplexController context) {
									this.context = context;
								}
								@Override
								public String getName() {
									return "S5C12";
								}
								@Override
								public TStateId getId() {
									return TStateId.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12;
								}
								@Override
								public IRegion[] getRegions() {
									return new IRegion[] {
										new RegionC12(context)
									};
								}
								@Override
								public boolean Event3() {
									if(RegionC12.getCurrentState(context).Event3())
										return true;

									// Handle S5C12 ---> S5C2
									context.OnDebugMessage( "TRANSITION: S5C12 ---> S5C2");
									context.Complex_MainRegion_S5_RegionC_S5C1.exitState();
									CComplex.MainRegion.S5.RegionC.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C2);
									if(CComplex.MainRegion.S5.RegionA.getCurrentState(context) == context.Complex_MainRegion_S5_RegionA_S5A3 &&
									   CComplex.MainRegion.S5.RegionB.getCurrentState(context) == context.Complex_MainRegion_S5_RegionB_S5B2) {
										if ( context.Complex_MainRegion_S5.processJoin_S5A3_S5B2_S5C2() )
											return true;

										// else ERROR!
									}
									return true;
								}
								@Override
								public void entryState() {
									context.OnEntryS5C12();
								}
								@Override
								public void exitState() {
									RegionC12.getCurrentState(context).exitState();
									context.OnExitS5C12();
								}
								@Override
								public void enterSubStates() {
									RegionC12.getCurrentState(context).entryState();
									RegionC12.getCurrentState(context).enterSubStates();
								}

								// Implementation for Region 'RegionC12'
								public static class RegionC12 implements IRegion
								{
									private ComplexController context;

									public RegionC12(ComplexController context) {
										this.context = context;
									}
									public String getName() {
										return "RegionC12";
									}
									public IState[] getStates() {
										 return new IState[] {
											new S5C121(context)
										};
									}
									public IState getCurrentState() {
										return getCurrentState(context);
									}
									public static RegionC12State getCurrentState(ComplexController context) {
										return context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12.svRegionC12;
									}
									public static void setCurrentState(ComplexController context, RegionC12State state) {
										context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() );
										context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12.svRegionC12 = state;
										context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12.svRegionC12.entryState();
									}
									public static RegionC12State getInitState(ComplexController context) {
										return context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121;
									}

									// Base class for all states of Region 'RegionC12'
									public static abstract class RegionC12State implements IState
									{
										protected ComplexController context;
										public boolean Event3() {return false;}
										public void enterSubStates() {}
										public void entryState() {}
										public void exitState() {}
									}

									// Implementation for State 'S5C121'
									public static class S5C121 extends RegionC12State
									{
										private RegionC121.RegionC121State svRegionC121; // State Variable for Region 'RegionC121'

										public S5C121(ComplexController context) {
											this.context = context;
										}
										@Override
										public String getName() {
											return "S5C121";
										}
										@Override
										public TStateId getId() {
											return TStateId.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121;
										}
										@Override
										public IRegion[] getRegions() {
											return new IRegion[] {
												new RegionC121(context)
											};
										}
										@Override
										public boolean Event3() {
											if(RegionC121.getCurrentState(context).Event3())
												return true;

											return false;
										}
										@Override
										public void entryState() {
											context.OnEntryS5C121();
										}
										@Override
										public void exitState() {
											RegionC121.getCurrentState(context).exitState();
											context.OnExitS5C121();
										}
										@Override
										public void enterSubStates() {
											RegionC121.getCurrentState(context).entryState();
											RegionC121.getCurrentState(context).enterSubStates();
										}

										// Implementation for Region 'RegionC121'
										public static class RegionC121 implements IRegion
										{
											private ComplexController context;

											public RegionC121(ComplexController context) {
												this.context = context;
											}
											public String getName() {
												return "RegionC121";
											}
											public IState[] getStates() {
												 return new IState[] {
													new S5C1211(context)
												};
											}
											public IState getCurrentState() {
												return getCurrentState(context);
											}
											public static RegionC121State getCurrentState(ComplexController context) {
												return context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121.svRegionC121;
											}
											public static void setCurrentState(ComplexController context, RegionC121State state) {
												context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() );
												context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121.svRegionC121 = state;
												context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121.svRegionC121.entryState();
											}
											public static RegionC121State getInitState(ComplexController context) {
												return context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211;
											}

											// Base class for all states of Region 'RegionC121'
											public static abstract class RegionC121State implements IState
											{
												protected ComplexController context;
												public boolean Event3() {return false;}
												public void enterSubStates() {}
												public void entryState() {}
												public void exitState() {}
											}

											// Implementation for State 'S5C1211'
											public static class S5C1211 extends RegionC121State
											{
												private RegionC1211.RegionC1211State svRegionC1211; // State Variable for Region 'RegionC1211'

												public S5C1211(ComplexController context) {
													this.context = context;
												}
												@Override
												public String getName() {
													return "S5C1211";
												}
												@Override
												public TStateId getId() {
													return TStateId.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211;
												}
												@Override
												public IRegion[] getRegions() {
													return new IRegion[] {
														new RegionC1211(context)
													};
												}
												@Override
												public boolean Event3() {
													if(RegionC1211.getCurrentState(context).Event3())
														return true;

													return false;
												}
												@Override
												public void entryState() {
													context.OnEntryS5C1211();
												}
												@Override
												public void exitState() {
													RegionC1211.getCurrentState(context).exitState();
													context.OnExitS5C1211();
												}
												@Override
												public void enterSubStates() {
													RegionC1211.getCurrentState(context).entryState();
												}

												// Implementation for Region 'RegionC1211'
												public static class RegionC1211 implements IRegion
												{
													private ComplexController context;

													public RegionC1211(ComplexController context) {
														this.context = context;
													}
													public String getName() {
														return "RegionC1211";
													}
													public IState[] getStates() {
														 return new IState[] {
															new S5C12111(context),
															new S5C12112(context)
														};
													}
													public IState getCurrentState() {
														return getCurrentState(context);
													}
													public static RegionC1211State getCurrentState(ComplexController context) {
														return context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211.svRegionC1211;
													}
													public static void setCurrentState(ComplexController context, RegionC1211State state) {
														context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() );
														context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211.svRegionC1211 = state;
														context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211.svRegionC1211.entryState();
													}
													public static RegionC1211State getInitState(ComplexController context) {
														return context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12111;
													}

													// Base class for all states of Region 'RegionC1211'
													public static abstract class RegionC1211State implements IState
													{
														protected ComplexController context;
														public boolean Event3() {return false;}
														public void entryState() {}
														public void exitState() {}
													}

													// Implementation for State 'S5C12111'
													public static class S5C12111 extends RegionC1211State
													{
														public S5C12111(ComplexController context) {
															this.context = context;
														}
														@Override
														public String getName() {
															return "S5C12111";
														}
														@Override
														public TStateId getId() {
															return TStateId.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12111;
														}
														@Override
														public IRegion[] getRegions() {
															return new IRegion[] {
															};
														}
														@Override
														public boolean Event3() {
															// Handle S5C12111 ---> S5C12112
															context.OnDebugMessage( "TRANSITION: S5C12111 ---> S5C12112");
															exitState();
															CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12112);
															return true;
														}
														@Override
														public void entryState() {
															context.OnEntryS5C12111();
														}
														@Override
														public void exitState() {
															context.OnExitS5C12111();
														}
													}

													// Implementation for State 'S5C12112'
													public static class S5C12112 extends RegionC1211State
													{
														public S5C12112(ComplexController context) {
															this.context = context;
														}
														@Override
														public String getName() {
															return "S5C12112";
														}
														@Override
														public TStateId getId() {
															return TStateId.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12112;
														}
														@Override
														public IRegion[] getRegions() {
															return new IRegion[] {
															};
														}
														@Override
														public void entryState() {
															context.OnEntryS5C12112();
														}
														@Override
														public void exitState() {
															context.OnExitS5C12112();
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}

					// Implementation for State 'S5C2'
					public static class S5C2 extends RegionCState
					{
						public S5C2(ComplexController context) {
							this.context = context;
						}
						@Override
						public String getName() {
							return "S5C2";
						}
						@Override
						public TStateId getId() {
							return TStateId.Complex_MainRegion_S5_RegionC_S5C2;
						}
						@Override
						public IRegion[] getRegions() {
							return new IRegion[] {
							};
						}
						@Override
						public void entryState() {
							context.OnEntryS5C2();
						}
						@Override
						public void exitState() {
							context.OnExitS5C2();
						}
					}
				}
			}

			// Implementation for State 'S1'
			public static class S1 extends MainRegionState
			{
				public S1(ComplexController context) {
					this.context = context;
				}
				@Override
				public String getName() {
					return "S1";
				}
				@Override
				public TStateId getId() {
					return TStateId.Complex_MainRegion_S1;
				}
				@Override
				public IRegion[] getRegions() {
					return new IRegion[] {
					};
				}
				@Override
				public boolean Event1() {
					// Handle S1 ---> <Fork>
					context.OnDebugMessage( "TRANSITION: S1 ---> <Fork>");
					exitState();
					CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S5);
					// Handle <Fork> ---> S5A1
					context.OnDebugMessage( "TRANSITION: <Fork> ---> S5A1");
					CComplex.MainRegion.S5.RegionA.setCurrentState(context, context.Complex_MainRegion_S5_RegionA_S5A1);
					// Handle <Fork> ---> S5B11
					context.OnDebugMessage( "TRANSITION: <Fork> ---> S5B11");
					CComplex.MainRegion.S5.RegionB.setCurrentState(context, context.Complex_MainRegion_S5_RegionB_S5B1);
					CComplex.MainRegion.S5.RegionB.S5B1.RegionB1.setCurrentState(context, context.Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B11);
					// Handle <Fork> ---> S5C12
					context.OnDebugMessage( "TRANSITION: <Fork> ---> S5C12");
					CComplex.MainRegion.S5.RegionC.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1);
					CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12);
					CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.setCurrentState(context, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.getInitState(context));
					CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.setCurrentState(context, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.getInitState(context));
					CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.setCurrentState(context, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.getInitState(context));
					return true;
				}
				@Override
				public boolean Event2() {
					// Handle S1 ---> <Choice>
					context.OnDebugMessage( "TRANSITION: S1 ---> <Choice>");
					exitState();
					if (context.CanGoS5()) {
						// Handle <Choice> ---> <DeepHistory>
						context.OnDebugMessage( "TRANSITION: <Choice> ---> <DeepHistory>");
						CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S5);
						CComplex.MainRegion.getCurrentState(context).enterSubStates();
						// default initialize region RegionA of orthogonal state S5
						CComplex.MainRegion.S5.RegionA.setCurrentState(context, CComplex.MainRegion.S5.RegionA.getInitState(context));
						// default initialize region RegionB of orthogonal state S5
						CComplex.MainRegion.S5.RegionB.getCurrentState(context).entryState();
						CComplex.MainRegion.S5.RegionB.getCurrentState(context).initSubStates();
						return true;
					}
					else {
						// Handle <Choice> ---> S2
						context.OnDebugMessage( "TRANSITION: <Choice> ---> S2");
						CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S2);
						return true;
					}
				}
				@Override
				public boolean Event3() {
					// Handle S1 ---> S2
					context.OnDebugMessage( "TRANSITION: S1 ---> S2");
					exitState();
					CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S2);
					return true;
				}
				@Override
				public boolean Event4() {
					// Handle S1 ---> <Junction>
					context.OnDebugMessage( "TRANSITION: S1 ---> <Junction>");
					exitState();
					// Handle <Junction> ---> S3
					context.OnDebugMessage( "TRANSITION: <Junction> ---> S3");
					CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S3);
					return true;
				}
				@Override
				public void entryState() {
					context.OnEntryS1();
				}
				@Override
				public void exitState() {
					context.OnExitS1();
				}
			}

			// Implementation for State 'S2'
			public static class S2 extends MainRegionState
			{
				public S2(ComplexController context) {
					this.context = context;
				}
				@Override
				public String getName() {
					return "S2";
				}
				@Override
				public TStateId getId() {
					return TStateId.Complex_MainRegion_S2;
				}
				@Override
				public IRegion[] getRegions() {
					return new IRegion[] {
					};
				}
				@Override
				public boolean Event1() {
					// Handle S2 ---> S2
					context.OnDebugMessage( "TRANSITION: S2 ---> S2");
					return true;
				}
				@Override
				public boolean Event2() {
					// Handle S2 ---> S2
					context.OnDebugMessage( "TRANSITION: S2 ---> S2");
					exitState();
					CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S2);
					return true;
				}
				@Override
				public boolean Event4() {
					// Handle S2 ---> <Junction>
					context.OnDebugMessage( "TRANSITION: S2 ---> <Junction>");
					exitState();
					// Handle <Junction> ---> S3
					context.OnDebugMessage( "TRANSITION: <Junction> ---> S3");
					CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S3);
					return true;
				}
				@Override
				public void entryState() {
					context.OnEntryS2();
				}
				@Override
				public void exitState() {
					context.OnExitS2();
				}
			}

			// Implementation for State 'S3'
			public static class S3 extends MainRegionState
			{
				public S3(ComplexController context) {
					this.context = context;
				}
				@Override
				public String getName() {
					return "S3";
				}
				@Override
				public TStateId getId() {
					return TStateId.Complex_MainRegion_S3;
				}
				@Override
				public IRegion[] getRegions() {
					return new IRegion[] {
					};
				}
				@Override
				public boolean Event1() {
					if (context.CanGoS2()) {
						// Handle S3 ---> S2
						context.OnDebugMessage( "TRANSITION: S3 ---> S2");
						exitState();
						CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S2);
						return true;
					}
					else if (context.CanGoS5()) {
						// Handle S3 ---> S5
						context.OnDebugMessage( "TRANSITION: S3 ---> S5");
						exitState();
						CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S5);
						CComplex.MainRegion.S5.RegionA.setCurrentState(context, CComplex.MainRegion.S5.RegionA.getInitState(context));
						CComplex.MainRegion.S5.RegionB.getCurrentState(context).entryState();
						CComplex.MainRegion.S5.RegionB.getCurrentState(context).initSubStates();
						CComplex.MainRegion.getCurrentState(context).enterSubStates();
						return true;
					}
					else {
						// Handle S3 ---> S1
						context.OnDebugMessage( "TRANSITION: S3 ---> S1");
						exitState();
						CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S1);
						return true;
					}
				}
				@Override
				public void entryState() {
					context.OnEntryS3();
				}
				@Override
				public void exitState() {
					context.OnExitS3();
				}
			}

			// Implementation for State 'S4'
			public static class S4 extends MainRegionState
			{
				private Region4.Region4State svRegion4; // State Variable for Region 'Region4'

				public S4(ComplexController context) {
					this.context = context;
				}
				@Override
				public String getName() {
					return "S4";
				}
				@Override
				public TStateId getId() {
					return TStateId.Complex_MainRegion_S4;
				}
				@Override
				public IRegion[] getRegions() {
					return new IRegion[] {
						new Region4(context)
					};
				}
				@Override
				public boolean Event1() {
					if(Region4.getCurrentState(context).Event1())
						return true;

					return false;
				}
				@Override
				public boolean Event2() {
					if(Region4.getCurrentState(context).Event2())
						return true;

					return false;
				}
				@Override
				public boolean Event3() {
					if(Region4.getCurrentState(context).Event3())
						return true;

					// Handle S4 ---> S41
					context.OnDebugMessage( "TRANSITION: S4 ---> S41");
					Region4.getCurrentState(context).exitState();
					CComplex.MainRegion.S4.Region4.setCurrentState(context, context.Complex_MainRegion_S4_Region4_S41);
					return true;
				}
				@Override
				public boolean Event4() {
					// Handle S4 ---> S5
					context.OnDebugMessage( "TRANSITION: S4 ---> S5");
					exitState();
					context.OnEffectS4_S5(); // Handle effect of transition S4 ---> S5
					CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S5);
					CComplex.MainRegion.S5.RegionA.setCurrentState(context, CComplex.MainRegion.S5.RegionA.getInitState(context));
					CComplex.MainRegion.S5.RegionB.getCurrentState(context).entryState();
					CComplex.MainRegion.S5.RegionB.getCurrentState(context).initSubStates();
					CComplex.MainRegion.getCurrentState(context).enterSubStates();
					return true;
				}
				@Override
				public void entryState() {
					context.OnEntryS4();
				}
				@Override
				public void exitState() {
					Region4.getCurrentState(context).exitState();
					context.OnExitS4();
				}

				// Implementation for Region 'Region4'
				public static class Region4 implements IRegion
				{
					private ComplexController context;

					public Region4(ComplexController context) {
						this.context = context;
					}
					public String getName() {
						return "Region4";
					}
					public IState[] getStates() {
						 return new IState[] {
							new S41(context),
							new S42(context),
							new FinalS4(context)
						};
					}
					public IState getCurrentState() {
						return getCurrentState(context);
					}
					public static Region4State getCurrentState(ComplexController context) {
						return context.Complex_MainRegion_S4.svRegion4;
					}
					public static void setCurrentState(ComplexController context, Region4State state) {
						context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() );
						context.Complex_MainRegion_S4.svRegion4 = state;
						context.Complex_MainRegion_S4.svRegion4.entryState();
					}
					public static Region4State getInitState(ComplexController context) {
						return context.Complex_MainRegion_S4_Region4_S41;
					}

					// Base class for all states of Region 'Region4'
					public static abstract class Region4State implements IState
					{
						protected ComplexController context;
						public boolean Event1() {return false;}
						public boolean Event2() {return false;}
						public boolean Event3() {return false;}
						public void entryState() {}
						public void exitState() {}
					}

					// Implementation for State 'S41'
					public static class S41 extends Region4State
					{
						public S41(ComplexController context) {
							this.context = context;
						}
						@Override
						public String getName() {
							return "S41";
						}
						@Override
						public TStateId getId() {
							return TStateId.Complex_MainRegion_S4_Region4_S41;
						}
						@Override
						public IRegion[] getRegions() {
							return new IRegion[] {
							};
						}
						@Override
						public boolean Event1() {
							// Handle S41 ---> S42
							context.OnDebugMessage( "TRANSITION: S41 ---> S42");
							exitState();
							CComplex.MainRegion.S4.Region4.setCurrentState(context, context.Complex_MainRegion_S4_Region4_S42);
							return true;
						}
						@Override
						public boolean Event3() {
							// Handle S41 ---> FinalS4
							context.OnDebugMessage( "TRANSITION: S41 ---> FinalS4");
							exitState();
							CComplex.MainRegion.S4.Region4.setCurrentState(context, context.Complex_MainRegion_S4_Region4_FinalS4);
							// Handle S4 ---> S2
							context.OnDebugMessage( "TRANSITION: S4 ---> S2");
							context.Complex_MainRegion_S4.exitState();
							CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S2);
							return true;
						}
						@Override
						public void entryState() {
							context.OnEntryS41();
						}
						@Override
						public void exitState() {
							context.OnExitS41();
						}
					}

					// Implementation for State 'S42'
					public static class S42 extends Region4State
					{
						public S42(ComplexController context) {
							this.context = context;
						}
						@Override
						public String getName() {
							return "S42";
						}
						@Override
						public TStateId getId() {
							return TStateId.Complex_MainRegion_S4_Region4_S42;
						}
						@Override
						public IRegion[] getRegions() {
							return new IRegion[] {
							};
						}
						@Override
						public boolean Event1() {
							// Handle S42 ---> S41
							context.OnDebugMessage( "TRANSITION: S42 ---> S41");
							exitState();
							CComplex.MainRegion.S4.Region4.setCurrentState(context, context.Complex_MainRegion_S4_Region4_S41);
							return true;
						}
						@Override
						public boolean Event2() {
							// Handle S42 ---> S5C12112
							context.OnDebugMessage( "TRANSITION: S42 ---> S5C12112");
							context.Complex_MainRegion_S4.exitState();
							CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S5);
							CComplex.MainRegion.S5.RegionC.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1);
							CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12);
							CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121);
							CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211);
							CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12112);
							// default initialize region RegionA of orthogonal state S5
							CComplex.MainRegion.S5.RegionA.setCurrentState(context, CComplex.MainRegion.S5.RegionA.getInitState(context));
							// default initialize region RegionB of orthogonal state S5
							CComplex.MainRegion.S5.RegionB.getCurrentState(context).entryState();
							CComplex.MainRegion.S5.RegionB.getCurrentState(context).initSubStates();
							return true;
						}
						@Override
						public void entryState() {
							context.OnEntryS42();
						}
						@Override
						public void exitState() {
							context.OnExitS42();
						}
					}

					// Implementation for State 'FinalS4'
					public static class FinalS4 extends Region4State
					{
						public FinalS4(ComplexController context) {
							this.context = context;
						}
						@Override
						public String getName() {
							return "FinalS4";
						}
						@Override
						public TStateId getId() {
							return TStateId.Complex_MainRegion_S4_Region4_FinalS4;
						}
						@Override
						public IRegion[] getRegions() {
							return new IRegion[] {
							};
						}
					}
				}
			}
		}
	}
}