////////////////////////////////////////////////////////////////////////
//
// AirConditionController.java
//
// This file was generated by UModel 2011r2 Enterprise Edition
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the UModel Documentation for further details.
// http://www.altova.com/umodel
//
////////////////////////////////////////////////////////////////////////
package AirCondition;

import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.Action;

@SuppressWarnings({"serial", "unused"})

public class AirConditionController
{
	public enum TStateId
	{
		AirCondition_Root,
		AirCondition_MainRegion_Operating,
		AirCondition_MainRegion_Operating_RegionMode_Heater,
		AirCondition_MainRegion_Operating_RegionMode_Cooler,
		AirCondition_MainRegion_Operating_RegionSpeed_High,
		AirCondition_MainRegion_Operating_RegionSpeed_Off,
		AirCondition_MainRegion_Operating_RegionSpeed_Low,
		AirCondition_MainRegion_Off,
		AirCondition_MainRegion_Standby
	}

	public interface IState
	{
		String getName();
		TStateId getId();
		IRegion[] getRegions();
	}

	public interface IRegion
	{
		String getName();
		IState[] getStates();
		IState getCurrentState();
	}

	// get the Root State
	public IState getRootState() {
		return _getRootState();
	}
	public IState getCurrentTopLevelState() {
		return getRootState().getRegions()[0].getCurrentState();
	}

	// Initialize the State Machine
	public void Initialize() {
		OnDebugMessage( "BEGIN_INITIALIZE" );
		AirCondition_MainRegion_Operating = new CAirCondition.MainRegion.Operating(this);
		AirCondition_MainRegion_Operating_RegionMode_Heater = new CAirCondition.MainRegion.Operating.RegionMode.Heater(this);
		AirCondition_MainRegion_Operating_RegionMode_Cooler = new CAirCondition.MainRegion.Operating.RegionMode.Cooler(this);
		AirCondition_MainRegion_Operating_RegionSpeed_High = new CAirCondition.MainRegion.Operating.RegionSpeed.High(this);
		AirCondition_MainRegion_Operating_RegionSpeed_Off = new CAirCondition.MainRegion.Operating.RegionSpeed.Off(this);
		AirCondition_MainRegion_Operating_RegionSpeed_Low = new CAirCondition.MainRegion.Operating.RegionSpeed.Low(this);
		AirCondition_MainRegion_Off = new CAirCondition.MainRegion.Off(this);
		AirCondition_MainRegion_Standby = new CAirCondition.MainRegion.Standby(this);

		rootState = new CAirCondition(this);

		CAirCondition.MainRegion.setCurrentState(this, CAirCondition.MainRegion.getInitState(this));
		CAirCondition.MainRegion.Operating.RegionMode.setCurrentState(this, CAirCondition.MainRegion.Operating.RegionMode.getInitState(this));
		CAirCondition.MainRegion.Operating.RegionSpeed.setCurrentState(this, CAirCondition.MainRegion.Operating.RegionSpeed.getInitState(this));
		OnDebugMessage( "END_INITIALIZE" );
	}

	// get all possible call event actions
	public Action[] getCallEvents() {
		return new Action[] {
			new AbstractAction("modeSelect") {
				public void actionPerformed(ActionEvent e) {
					modeSelect();
				}
			},
			new AbstractAction("powerButton") {
				public void actionPerformed(ActionEvent e) {
					powerButton();
				}
			},
			new AbstractAction("speedSelect") {
				public void actionPerformed(ActionEvent e) {
					speedSelect();
				}
			},
			new AbstractAction("standbyButton") {
				public void actionPerformed(ActionEvent e) {
					standbyButton();
				}
			}
		};
	}

	// call event method implementations
	public boolean modeSelect() {
		OnDebugMessage("BEGIN_EVENT: modeSelect");
		boolean bHandled = _getRootState().modeSelect();
		OnDebugMessage("END_EVENT: modeSelect");
		return bHandled;
	}
	public boolean powerButton() {
		OnDebugMessage("BEGIN_EVENT: powerButton");
		boolean bHandled = _getRootState().powerButton();
		OnDebugMessage("END_EVENT: powerButton");
		return bHandled;
	}
	public boolean speedSelect() {
		OnDebugMessage("BEGIN_EVENT: speedSelect");
		boolean bHandled = _getRootState().speedSelect();
		OnDebugMessage("END_EVENT: speedSelect");
		return bHandled;
	}
	public boolean standbyButton() {
		OnDebugMessage("BEGIN_EVENT: standbyButton");
		boolean bHandled = _getRootState().standbyButton();
		OnDebugMessage("END_EVENT: standbyButton");
		return bHandled;
	}

	// Overwrite to handle entry/exit/do actions, transition effects,...:
	public void OnEntryHeater() {OnDebugMessage("ACTION: OnEntryHeater");}
	public void OnExitHeater() {OnDebugMessage("ACTION: OnExitHeater");}
	public void OnEntryCooler() {OnDebugMessage("ACTION: OnEntryCooler");}
	public void OnExitCooler() {OnDebugMessage("ACTION: OnExitCooler");}
	public void OnEntryOperating() {OnDebugMessage("ACTION: OnEntryOperating");}
	public void OnExitOperating() {OnDebugMessage("ACTION: OnExitOperating");}
	public void OnEntryStandby() {OnDebugMessage("ACTION: OnEntryStandby");}
	public void OnExitStandby() {OnDebugMessage("ACTION: OnExitStandby");}
	public void On_Off_Operating_Effect() {OnDebugMessage("ACTION: On_Off_Operating_Effect");}

	// Overwrite to handle debug messages:
	public void OnDebugMessage(String str) {
	}

	// Internal Definitions and Implementations

	// Root State Definition
	private CAirCondition rootState = null;
	private CAirCondition _getRootState() {
		if(rootState == null)
			Initialize();

		return rootState;
	}

	// State Variable Definitions
	private CAirCondition.MainRegion.Operating AirCondition_MainRegion_Operating = null;
	private CAirCondition.MainRegion.Operating.RegionMode.Heater AirCondition_MainRegion_Operating_RegionMode_Heater = null;
	private CAirCondition.MainRegion.Operating.RegionMode.Cooler AirCondition_MainRegion_Operating_RegionMode_Cooler = null;
	private CAirCondition.MainRegion.Operating.RegionSpeed.High AirCondition_MainRegion_Operating_RegionSpeed_High = null;
	private CAirCondition.MainRegion.Operating.RegionSpeed.Off AirCondition_MainRegion_Operating_RegionSpeed_Off = null;
	private CAirCondition.MainRegion.Operating.RegionSpeed.Low AirCondition_MainRegion_Operating_RegionSpeed_Low = null;
	private CAirCondition.MainRegion.Off AirCondition_MainRegion_Off = null;
	private CAirCondition.MainRegion.Standby AirCondition_MainRegion_Standby = null;

	// Implementation for StateMachine 'AirCondition'
	private static class CAirCondition implements IState
	{
		private AirConditionController context;
		private MainRegion.MainRegionState svMainRegion; // State Variable for Region 'MainRegion'

		public CAirCondition(AirConditionController context) {
			this.context = context;
		}
		public String getName() {
			return "AirCondition";
		}
		public TStateId getId() {
			return TStateId.AirCondition_Root;
		}
		public IRegion[] getRegions() {
			return new IRegion[] {
				new MainRegion(context)
			};
		}
		public boolean modeSelect() {
			return MainRegion.getCurrentState(context).modeSelect();
		}
		public boolean powerButton() {
			return MainRegion.getCurrentState(context).powerButton();
		}
		public boolean speedSelect() {
			return MainRegion.getCurrentState(context).speedSelect();
		}
		public boolean standbyButton() {
			return MainRegion.getCurrentState(context).standbyButton();
		}

		// Implementation for Region 'MainRegion'
		public static class MainRegion implements IRegion
		{
			private AirConditionController context;

			public MainRegion(AirConditionController context) {
				this.context = context;
			}
			public String getName() {
				return "MainRegion";
			}
			public IState[] getStates() {
				 return new IState[] {
					new Operating(context),
					new Off(context),
					new Standby(context)
				};
			}
			public IState getCurrentState() {
				return getCurrentState(context);
			}
			public static MainRegionState getCurrentState(AirConditionController context) {
				return context._getRootState().svMainRegion;
			}
			public static void setCurrentState(AirConditionController context, MainRegionState state) {
				context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() );
				context._getRootState().svMainRegion = state;
				context._getRootState().svMainRegion.entryState();
			}
			public static MainRegionState getInitState(AirConditionController context) {
				return context.AirCondition_MainRegion_Off;
			}

			// Base class for all states of Region 'MainRegion'
			public static abstract class MainRegionState implements IState
			{
				protected AirConditionController context;
				public boolean modeSelect() {return false;}
				public boolean powerButton() {return false;}
				public boolean speedSelect() {return false;}
				public boolean standbyButton() {return false;}
				public void initSubStates() {}
				public void entryState() {}
				public void exitState() {}
			}

			// Implementation for State 'Operating'
			public static class Operating extends MainRegionState
			{
				private RegionMode.RegionModeState svRegionMode; // State Variable for Region 'RegionMode'
				private RegionSpeed.RegionSpeedState svRegionSpeed; // State Variable for Region 'RegionSpeed'

				public Operating(AirConditionController context) {
					this.context = context;
				}
				@Override
				public String getName() {
					return "Operating";
				}
				@Override
				public TStateId getId() {
					return TStateId.AirCondition_MainRegion_Operating;
				}
				@Override
				public IRegion[] getRegions() {
					return new IRegion[] {
						new RegionMode(context),
						new RegionSpeed(context)
					};
				}
				@Override
				public boolean modeSelect() {
					if(RegionMode.getCurrentState(context).modeSelect())
						return true;

					return false;
				}
				@Override
				public boolean powerButton() {
					// Handle Operating ---> Off
					context.OnDebugMessage( "TRANSITION: Operating ---> Off");
					exitState();
					context.On_Off_Operating_Effect(); // Handle effect of transition Operating ---> Off
					CAirCondition.MainRegion.setCurrentState(context, context.AirCondition_MainRegion_Off);
					return true;
				}
				@Override
				public boolean speedSelect() {
					if(RegionSpeed.getCurrentState(context).speedSelect())
						return true;

					return false;
				}
				@Override
				public boolean standbyButton() {
					// Handle Operating ---> Standby
					context.OnDebugMessage( "TRANSITION: Operating ---> Standby");
					exitState();
					CAirCondition.MainRegion.setCurrentState(context, context.AirCondition_MainRegion_Standby);
					return true;
				}
				@Override
				public void entryState() {
					context.OnEntryOperating();
				}
				@Override
				public void exitState() {
					RegionMode.getCurrentState(context).exitState();
					context.OnExitOperating();
				}
				@Override
				public void initSubStates() {
					RegionMode.setCurrentState(context, RegionMode.getInitState(context));
					RegionSpeed.setCurrentState(context, RegionSpeed.getInitState(context));
				}

				// Implementation for Region 'RegionMode'
				public static class RegionMode implements IRegion
				{
					private AirConditionController context;

					public RegionMode(AirConditionController context) {
						this.context = context;
					}
					public String getName() {
						return "RegionMode";
					}
					public IState[] getStates() {
						 return new IState[] {
							new Heater(context),
							new Cooler(context)
						};
					}
					public IState getCurrentState() {
						return getCurrentState(context);
					}
					public static RegionModeState getCurrentState(AirConditionController context) {
						return context.AirCondition_MainRegion_Operating.svRegionMode;
					}
					public static void setCurrentState(AirConditionController context, RegionModeState state) {
						context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() );
						context.AirCondition_MainRegion_Operating.svRegionMode = state;
						context.AirCondition_MainRegion_Operating.svRegionMode.entryState();
					}
					public static RegionModeState getInitState(AirConditionController context) {
						return context.AirCondition_MainRegion_Operating_RegionMode_Heater;
					}

					// Base class for all states of Region 'RegionMode'
					public static abstract class RegionModeState implements IState
					{
						protected AirConditionController context;
						public boolean modeSelect() {return false;}
						public void entryState() {}
						public void exitState() {}
					}

					// Implementation for State 'Heater'
					public static class Heater extends RegionModeState
					{
						public Heater(AirConditionController context) {
							this.context = context;
						}
						@Override
						public String getName() {
							return "Heater";
						}
						@Override
						public TStateId getId() {
							return TStateId.AirCondition_MainRegion_Operating_RegionMode_Heater;
						}
						@Override
						public IRegion[] getRegions() {
							return new IRegion[] {
							};
						}
						@Override
						public boolean modeSelect() {
							// Handle Heater ---> Cooler
							context.OnDebugMessage( "TRANSITION: Heater ---> Cooler");
							exitState();
							CAirCondition.MainRegion.Operating.RegionMode.setCurrentState(context, context.AirCondition_MainRegion_Operating_RegionMode_Cooler);
							return true;
						}
						@Override
						public void entryState() {
							context.OnEntryHeater();
						}
						@Override
						public void exitState() {
							context.OnExitHeater();
						}
					}

					// Implementation for State 'Cooler'
					public static class Cooler extends RegionModeState
					{
						public Cooler(AirConditionController context) {
							this.context = context;
						}
						@Override
						public String getName() {
							return "Cooler";
						}
						@Override
						public TStateId getId() {
							return TStateId.AirCondition_MainRegion_Operating_RegionMode_Cooler;
						}
						@Override
						public IRegion[] getRegions() {
							return new IRegion[] {
							};
						}
						@Override
						public boolean modeSelect() {
							// Handle Cooler ---> Heater
							context.OnDebugMessage( "TRANSITION: Cooler ---> Heater");
							exitState();
							CAirCondition.MainRegion.Operating.RegionMode.setCurrentState(context, context.AirCondition_MainRegion_Operating_RegionMode_Heater);
							return true;
						}
						@Override
						public void entryState() {
							context.OnEntryCooler();
						}
						@Override
						public void exitState() {
							context.OnExitCooler();
						}
					}
				}

				// Implementation for Region 'RegionSpeed'
				public static class RegionSpeed implements IRegion
				{
					private AirConditionController context;

					public RegionSpeed(AirConditionController context) {
						this.context = context;
					}
					public String getName() {
						return "RegionSpeed";
					}
					public IState[] getStates() {
						 return new IState[] {
							new High(context),
							new Off(context),
							new Low(context)
						};
					}
					public IState getCurrentState() {
						return getCurrentState(context);
					}
					public static RegionSpeedState getCurrentState(AirConditionController context) {
						return context.AirCondition_MainRegion_Operating.svRegionSpeed;
					}
					public static void setCurrentState(AirConditionController context, RegionSpeedState state) {
						context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() );
						context.AirCondition_MainRegion_Operating.svRegionSpeed = state;
					}
					public static RegionSpeedState getInitState(AirConditionController context) {
						return context.AirCondition_MainRegion_Operating_RegionSpeed_Off;
					}

					// Base class for all states of Region 'RegionSpeed'
					public static abstract class RegionSpeedState implements IState
					{
						protected AirConditionController context;
						public boolean speedSelect() {return false;}
					}

					// Implementation for State 'High'
					public static class High extends RegionSpeedState
					{
						public High(AirConditionController context) {
							this.context = context;
						}
						@Override
						public String getName() {
							return "High";
						}
						@Override
						public TStateId getId() {
							return TStateId.AirCondition_MainRegion_Operating_RegionSpeed_High;
						}
						@Override
						public IRegion[] getRegions() {
							return new IRegion[] {
							};
						}
						@Override
						public boolean speedSelect() {
							// Handle High ---> Off
							context.OnDebugMessage( "TRANSITION: High ---> Off");
							CAirCondition.MainRegion.Operating.RegionSpeed.setCurrentState(context, context.AirCondition_MainRegion_Operating_RegionSpeed_Off);
							return true;
						}
					}

					// Implementation for State 'Off'
					public static class Off extends RegionSpeedState
					{
						public Off(AirConditionController context) {
							this.context = context;
						}
						@Override
						public String getName() {
							return "Off";
						}
						@Override
						public TStateId getId() {
							return TStateId.AirCondition_MainRegion_Operating_RegionSpeed_Off;
						}
						@Override
						public IRegion[] getRegions() {
							return new IRegion[] {
							};
						}
						@Override
						public boolean speedSelect() {
							// Handle Off ---> Low
							context.OnDebugMessage( "TRANSITION: Off ---> Low");
							CAirCondition.MainRegion.Operating.RegionSpeed.setCurrentState(context, context.AirCondition_MainRegion_Operating_RegionSpeed_Low);
							return true;
						}
					}

					// Implementation for State 'Low'
					public static class Low extends RegionSpeedState
					{
						public Low(AirConditionController context) {
							this.context = context;
						}
						@Override
						public String getName() {
							return "Low";
						}
						@Override
						public TStateId getId() {
							return TStateId.AirCondition_MainRegion_Operating_RegionSpeed_Low;
						}
						@Override
						public IRegion[] getRegions() {
							return new IRegion[] {
							};
						}
						@Override
						public boolean speedSelect() {
							// Handle Low ---> High
							context.OnDebugMessage( "TRANSITION: Low ---> High");
							CAirCondition.MainRegion.Operating.RegionSpeed.setCurrentState(context, context.AirCondition_MainRegion_Operating_RegionSpeed_High);
							return true;
						}
					}
				}
			}

			// Implementation for State 'Off'
			public static class Off extends MainRegionState
			{
				public Off(AirConditionController context) {
					this.context = context;
				}
				@Override
				public String getName() {
					return "Off";
				}
				@Override
				public TStateId getId() {
					return TStateId.AirCondition_MainRegion_Off;
				}
				@Override
				public IRegion[] getRegions() {
					return new IRegion[] {
					};
				}
				@Override
				public boolean powerButton() {
					// Handle Off ---> <Fork>
					context.OnDebugMessage( "TRANSITION: Off ---> <Fork>");
					CAirCondition.MainRegion.setCurrentState(context, context.AirCondition_MainRegion_Operating);
					// Handle <Fork> ---> Heater
					context.OnDebugMessage( "TRANSITION: <Fork> ---> Heater");
					CAirCondition.MainRegion.Operating.RegionMode.setCurrentState(context, context.AirCondition_MainRegion_Operating_RegionMode_Heater);
					// Handle <Fork> ---> Low
					context.OnDebugMessage( "TRANSITION: <Fork> ---> Low");
					CAirCondition.MainRegion.Operating.RegionSpeed.setCurrentState(context, context.AirCondition_MainRegion_Operating_RegionSpeed_Low);
					return true;
				}
			}

			// Implementation for State 'Standby'
			public static class Standby extends MainRegionState
			{
				public Standby(AirConditionController context) {
					this.context = context;
				}
				@Override
				public String getName() {
					return "Standby";
				}
				@Override
				public TStateId getId() {
					return TStateId.AirCondition_MainRegion_Standby;
				}
				@Override
				public IRegion[] getRegions() {
					return new IRegion[] {
					};
				}
				@Override
				public boolean standbyButton() {
					// Handle Standby ---> <Fork>
					context.OnDebugMessage( "TRANSITION: Standby ---> <Fork>");
					exitState();
					CAirCondition.MainRegion.setCurrentState(context, context.AirCondition_MainRegion_Operating);
					// Handle <Fork> ---> <ShallowHistory>
					context.OnDebugMessage( "TRANSITION: <Fork> ---> <ShallowHistory>");
					CAirCondition.MainRegion.Operating.RegionMode.getCurrentState(context).entryState();
					// Handle <Fork> ---> <ShallowHistory>
					context.OnDebugMessage( "TRANSITION: <Fork> ---> <ShallowHistory>");
					return true;
				}
				@Override
				public void entryState() {
					context.OnEntryStandby();
				}
				@Override
				public void exitState() {
					context.OnExitStandby();
				}
			}
		}
	}
}