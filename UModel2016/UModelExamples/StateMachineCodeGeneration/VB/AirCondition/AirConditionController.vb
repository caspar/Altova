'//////////////////////////////////////////////////////////////////////
'
' AirConditionController.vb
'
' This file was generated by UModel 2011r2 Enterprise Edition
'
' YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
' OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
'
' Refer to the UModel Documentation for further details.
' http://www.altova.com/umodel
'
'//////////////////////////////////////////////////////////////////////
Imports System

Namespace AirCondition

	Public Class AirConditionController

		public Enum TStateId
			AirCondition_Root
			AirCondition_MainRegion_Operating
			AirCondition_MainRegion_Operating_RegionMode_Heater
			AirCondition_MainRegion_Operating_RegionMode_Cooler
			AirCondition_MainRegion_Operating_RegionSpeed_High
			AirCondition_MainRegion_Operating_RegionSpeed_Off
			AirCondition_MainRegion_Operating_RegionSpeed_Low
			AirCondition_MainRegion_Off
			AirCondition_MainRegion_Standby
		End Enum

		public Interface IState
			Function getName() As String
			Function getId() As TStateId
			Function getRegions() As IRegion()
		End Interface

		public Interface IRegion
			Function getName() As String
			Function getStates() As IState()
			Function getCurrentState() As IState
		End Interface

		' get the Root State
		Public Function getRootState() As IState
			return _getRootState()
		End Function
		Public Function getCurrentTopLevelState() As IState
			return getRootState().getRegions()(0).getCurrentState()
		End Function

		' Initialize the State Machine
		Public Sub Initialize()
			OnDebugMessage( "BEGIN_INITIALIZE" )
			AirCondition_MainRegion_Operating = new CAirCondition.MainRegion.Operating(Me)
			AirCondition_MainRegion_Operating_RegionMode_Heater = new CAirCondition.MainRegion.Operating.RegionMode.Heater(Me)
			AirCondition_MainRegion_Operating_RegionMode_Cooler = new CAirCondition.MainRegion.Operating.RegionMode.Cooler(Me)
			AirCondition_MainRegion_Operating_RegionSpeed_High = new CAirCondition.MainRegion.Operating.RegionSpeed.High(Me)
			AirCondition_MainRegion_Operating_RegionSpeed_Off = new CAirCondition.MainRegion.Operating.RegionSpeed.Off(Me)
			AirCondition_MainRegion_Operating_RegionSpeed_Low = new CAirCondition.MainRegion.Operating.RegionSpeed.Low(Me)
			AirCondition_MainRegion_Off = new CAirCondition.MainRegion.Off(Me)
			AirCondition_MainRegion_Standby = new CAirCondition.MainRegion.Standby(Me)

			rootState = new CAirCondition(Me)

			CAirCondition.MainRegion.setCurrentState(Me, CAirCondition.MainRegion.getInitState(Me))
			CAirCondition.MainRegion.Operating.RegionMode.setCurrentState(Me, CAirCondition.MainRegion.Operating.RegionMode.getInitState(Me))
			CAirCondition.MainRegion.Operating.RegionSpeed.setCurrentState(Me, CAirCondition.MainRegion.Operating.RegionSpeed.getInitState(Me))
			OnDebugMessage( "END_INITIALIZE" )
		End Sub

		' get all possible call event actions
		Public Delegate Function CallEventAction() As Boolean 
		Public Function getCallEvents() As CallEventAction()
			return new CallEventAction() { _ 
				new CallEventAction(AddressOf modeSelect), _ 
				new CallEventAction(AddressOf powerButton), _ 
				new CallEventAction(AddressOf speedSelect), _ 
				new CallEventAction(AddressOf standbyButton) _ 
			}
		End Function

		' call event method implementations
		Public Function modeSelect() As Boolean
			OnDebugMessage("BEGIN_EVENT: modeSelect")
			Dim bHandled As Boolean = _getRootState().modeSelect()
			OnDebugMessage("END_EVENT: modeSelect")
			return bHandled
		End Function
		Public Function powerButton() As Boolean
			OnDebugMessage("BEGIN_EVENT: powerButton")
			Dim bHandled As Boolean = _getRootState().powerButton()
			OnDebugMessage("END_EVENT: powerButton")
			return bHandled
		End Function
		Public Function speedSelect() As Boolean
			OnDebugMessage("BEGIN_EVENT: speedSelect")
			Dim bHandled As Boolean = _getRootState().speedSelect()
			OnDebugMessage("END_EVENT: speedSelect")
			return bHandled
		End Function
		Public Function standbyButton() As Boolean
			OnDebugMessage("BEGIN_EVENT: standbyButton")
			Dim bHandled As Boolean = _getRootState().standbyButton()
			OnDebugMessage("END_EVENT: standbyButton")
			return bHandled
		End Function

		' Overwrite to handle entry/exit/do actions, transition effects,...:
		Public Overridable Sub OnEntryHeater()
			OnDebugMessage("ACTION: OnEntryHeater")
		End Sub
		Public Overridable Sub OnExitHeater()
			OnDebugMessage("ACTION: OnExitHeater")
		End Sub
		Public Overridable Sub OnEntryCooler()
			OnDebugMessage("ACTION: OnEntryCooler")
		End Sub
		Public Overridable Sub OnExitCooler()
			OnDebugMessage("ACTION: OnExitCooler")
		End Sub
		Public Overridable Sub OnEntryOperating()
			OnDebugMessage("ACTION: OnEntryOperating")
		End Sub
		Public Overridable Sub OnExitOperating()
			OnDebugMessage("ACTION: OnExitOperating")
		End Sub
		Public Overridable Sub OnEntryStandby()
			OnDebugMessage("ACTION: OnEntryStandby")
		End Sub
		Public Overridable Sub OnExitStandby()
			OnDebugMessage("ACTION: OnExitStandby")
		End Sub
		Public Overridable Sub On_Off_Operating_Effect()
			OnDebugMessage("ACTION: On_Off_Operating_Effect")
		End Sub

		' Overwrite to handle debug messages:
		Public Overridable Sub OnDebugMessage(ByVal str As String)
			if ( Not str.StartsWith("BEGIN_EVENT" ) AndAlso Not str.StartsWith( "END_EVENT" ) AndAlso Not str.StartsWith( "BEGIN_INITIALIZE" ) AndAlso Not str.StartsWith( "END_INITIALIZE" ) )
				System.Diagnostics.Debug.WriteLine("\t"+ str)
			Else
				System.Diagnostics.Debug.WriteLine(str)
			End If
		End Sub

		' Internal Definitions and Implementations

		' Root State Definition
		Private Dim rootState As CAirCondition = Nothing
		Private Function _getRootState() As CAirCondition
			if(rootState Is Nothing) Then
				Initialize()
			End If

			return rootState
		End Function

		' State Variable Definitions
		Private Dim AirCondition_MainRegion_Operating As CAirCondition.MainRegion.Operating = Nothing
		Private Dim AirCondition_MainRegion_Operating_RegionMode_Heater As CAirCondition.MainRegion.Operating.RegionMode.Heater = Nothing
		Private Dim AirCondition_MainRegion_Operating_RegionMode_Cooler As CAirCondition.MainRegion.Operating.RegionMode.Cooler = Nothing
		Private Dim AirCondition_MainRegion_Operating_RegionSpeed_High As CAirCondition.MainRegion.Operating.RegionSpeed.High = Nothing
		Private Dim AirCondition_MainRegion_Operating_RegionSpeed_Off As CAirCondition.MainRegion.Operating.RegionSpeed.Off = Nothing
		Private Dim AirCondition_MainRegion_Operating_RegionSpeed_Low As CAirCondition.MainRegion.Operating.RegionSpeed.Low = Nothing
		Private Dim AirCondition_MainRegion_Off As CAirCondition.MainRegion.Off = Nothing
		Private Dim AirCondition_MainRegion_Standby As CAirCondition.MainRegion.Standby = Nothing

		' Implementation for StateMachine 'AirCondition'
		Private Class CAirCondition : Implements IState
			Private Dim context As AirConditionController
			Private Dim svMainRegion As MainRegion.MainRegionState ' State Variable for Region 'MainRegion'

			Public Sub New(ByVal context As AirConditionController)
				Me.context = context
			End Sub
			Public Function getName() As String Implements IState.getName
				return "AirCondition"
			End Function
			Public Function getId() As TStateId Implements IState.getId
				return TStateId.AirCondition_Root
			End Function
			Public Function getRegions() As IRegion() Implements IState.getRegions
				return new IRegion() { _ 
					new MainRegion(context) _ 
				}
			End Function
			Public Function modeSelect() As Boolean
				return MainRegion.getCurrentState(context).modeSelect()
			End Function
			Public Function powerButton() As Boolean
				return MainRegion.getCurrentState(context).powerButton()
			End Function
			Public Function speedSelect() As Boolean
				return MainRegion.getCurrentState(context).speedSelect()
			End Function
			Public Function standbyButton() As Boolean
				return MainRegion.getCurrentState(context).standbyButton()
			End Function

			' Implementation for Region 'MainRegion'
			Public Class MainRegion : Implements IRegion
				Private Dim context As AirConditionController

				Public Sub New(ByVal context As AirConditionController)
					Me.context = context
				End Sub
				Public Function getName() As String Implements IRegion.getName
					return "MainRegion"
				End Function
				Public Function getStates() As IState() Implements IRegion.getStates
					 return new IState() { _ 
						new Operating(context), _ 
						new Off(context), _ 
						new Standby(context) _ 
					}
				End Function
				Public Function getCurrentState() As IState Implements IRegion.getCurrentState
					return getCurrentState(context)
				End Function
				Public Shared Function getCurrentState(ByVal context As AirConditionController) As MainRegionState
					return context._getRootState().svMainRegion
				End Function
				Public Shared Sub setCurrentState(ByVal context As AirConditionController, ByVal state As MainRegionState)
					context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() )
					context._getRootState().svMainRegion = state
					context._getRootState().svMainRegion.entryState()
				End Sub
				Public Shared Function getInitState(ByVal context As AirConditionController) As MainRegionState
					return context.AirCondition_MainRegion_Off
				End Function

				' Base class for all states of Region 'MainRegion'
				Public MustInherit Class MainRegionState : Implements IState
					Protected Dim context As AirConditionController
					Public Overridable Function modeSelect() As Boolean
						return false
					End Function
					Public Overridable Function powerButton() As Boolean
						return false
					End Function
					Public Overridable Function speedSelect() As Boolean
						return false
					End Function
					Public Overridable Function standbyButton() As Boolean
						return false
					End Function
					Public Overridable Sub initSubStates()
					End Sub
					Public Overridable Sub entryState()
					End Sub
					Public Overridable Sub exitState()
					End Sub
					Public MustOverride Function getName() As String Implements IState.getName
					Public MustOverride Function getId() As TStateId Implements IState.getId
					Public MustOverride Function getRegions() As IRegion() Implements IState.getRegions
				End Class

				' Implementation for State 'Operating'
				Public Class Operating : Inherits MainRegionState
					Private Dim svRegionMode As RegionMode.RegionModeState ' State Variable for Region 'RegionMode'
					Private Dim svRegionSpeed As RegionSpeed.RegionSpeedState ' State Variable for Region 'RegionSpeed'

					Public Sub New(ByVal context As AirConditionController)
						Me.context = context
					End Sub
					Public Overrides Function getName() As String
						return "Operating"
					End Function
					Public Overrides Function getId() As TStateId
						return TStateId.AirCondition_MainRegion_Operating
					End Function
					Public Overrides Function getRegions() As IRegion()
						return new IRegion() { _ 
							new RegionMode(context), _ 
							new RegionSpeed(context) _ 
						}
					End Function
					Public Overrides Function modeSelect() As Boolean
						if(RegionMode.getCurrentState(context).modeSelect()) Then
							return true
						End If

						return false
					End Function
					Public Overrides Function powerButton() As Boolean
						' Handle Operating ---> Off
						context.OnDebugMessage( "TRANSITION: Operating ---> Off")
						exitState()
						context.On_Off_Operating_Effect() ' Handle effect of transition Operating ---> Off
						CAirCondition.MainRegion.setCurrentState(context, context.AirCondition_MainRegion_Off)
						return true
					End Function
					Public Overrides Function speedSelect() As Boolean
						if(RegionSpeed.getCurrentState(context).speedSelect()) Then
							return true
						End If

						return false
					End Function
					Public Overrides Function standbyButton() As Boolean
						' Handle Operating ---> Standby
						context.OnDebugMessage( "TRANSITION: Operating ---> Standby")
						exitState()
						CAirCondition.MainRegion.setCurrentState(context, context.AirCondition_MainRegion_Standby)
						return true
					End Function
					Public Overrides Sub entryState()
						context.OnEntryOperating()
					End Sub
					Public Overrides Sub exitState()
						RegionMode.getCurrentState(context).exitState()
						context.OnExitOperating()
					End Sub
					Public Overrides Sub initSubStates()
						RegionMode.setCurrentState(context, RegionMode.getInitState(context))
						RegionSpeed.setCurrentState(context, RegionSpeed.getInitState(context))
					End Sub

					' Implementation for Region 'RegionMode'
					Public Class RegionMode : Implements IRegion
						Private Dim context As AirConditionController

						Public Sub New(ByVal context As AirConditionController)
							Me.context = context
						End Sub
						Public Function getName() As String Implements IRegion.getName
							return "RegionMode"
						End Function
						Public Function getStates() As IState() Implements IRegion.getStates
							 return new IState() { _ 
								new Heater(context), _ 
								new Cooler(context) _ 
							}
						End Function
						Public Function getCurrentState() As IState Implements IRegion.getCurrentState
							return getCurrentState(context)
						End Function
						Public Shared Function getCurrentState(ByVal context As AirConditionController) As RegionModeState
							return context.AirCondition_MainRegion_Operating.svRegionMode
						End Function
						Public Shared Sub setCurrentState(ByVal context As AirConditionController, ByVal state As RegionModeState)
							context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() )
							context.AirCondition_MainRegion_Operating.svRegionMode = state
							context.AirCondition_MainRegion_Operating.svRegionMode.entryState()
						End Sub
						Public Shared Function getInitState(ByVal context As AirConditionController) As RegionModeState
							return context.AirCondition_MainRegion_Operating_RegionMode_Heater
						End Function

						' Base class for all states of Region 'RegionMode'
						Public MustInherit Class RegionModeState : Implements IState
							Protected Dim context As AirConditionController
							Public Overridable Function modeSelect() As Boolean
								return false
							End Function
							Public Overridable Sub entryState()
							End Sub
							Public Overridable Sub exitState()
							End Sub
							Public MustOverride Function getName() As String Implements IState.getName
							Public MustOverride Function getId() As TStateId Implements IState.getId
							Public MustOverride Function getRegions() As IRegion() Implements IState.getRegions
						End Class

						' Implementation for State 'Heater'
						Public Class Heater : Inherits RegionModeState
							Public Sub New(ByVal context As AirConditionController)
								Me.context = context
							End Sub
							Public Overrides Function getName() As String
								return "Heater"
							End Function
							Public Overrides Function getId() As TStateId
								return TStateId.AirCondition_MainRegion_Operating_RegionMode_Heater
							End Function
							Public Overrides Function getRegions() As IRegion()
								return new IRegion() { _ 
								}
							End Function
							Public Overrides Function modeSelect() As Boolean
								' Handle Heater ---> Cooler
								context.OnDebugMessage( "TRANSITION: Heater ---> Cooler")
								exitState()
								CAirCondition.MainRegion.Operating.RegionMode.setCurrentState(context, context.AirCondition_MainRegion_Operating_RegionMode_Cooler)
								return true
							End Function
							Public Overrides Sub entryState()
								context.OnEntryHeater()
							End Sub
							Public Overrides Sub exitState()
								context.OnExitHeater()
							End Sub
						End Class

						' Implementation for State 'Cooler'
						Public Class Cooler : Inherits RegionModeState
							Public Sub New(ByVal context As AirConditionController)
								Me.context = context
							End Sub
							Public Overrides Function getName() As String
								return "Cooler"
							End Function
							Public Overrides Function getId() As TStateId
								return TStateId.AirCondition_MainRegion_Operating_RegionMode_Cooler
							End Function
							Public Overrides Function getRegions() As IRegion()
								return new IRegion() { _ 
								}
							End Function
							Public Overrides Function modeSelect() As Boolean
								' Handle Cooler ---> Heater
								context.OnDebugMessage( "TRANSITION: Cooler ---> Heater")
								exitState()
								CAirCondition.MainRegion.Operating.RegionMode.setCurrentState(context, context.AirCondition_MainRegion_Operating_RegionMode_Heater)
								return true
							End Function
							Public Overrides Sub entryState()
								context.OnEntryCooler()
							End Sub
							Public Overrides Sub exitState()
								context.OnExitCooler()
							End Sub
						End Class
					End Class

					' Implementation for Region 'RegionSpeed'
					Public Class RegionSpeed : Implements IRegion
						Private Dim context As AirConditionController

						Public Sub New(ByVal context As AirConditionController)
							Me.context = context
						End Sub
						Public Function getName() As String Implements IRegion.getName
							return "RegionSpeed"
						End Function
						Public Function getStates() As IState() Implements IRegion.getStates
							 return new IState() { _ 
								new High(context), _ 
								new Off(context), _ 
								new Low(context) _ 
							}
						End Function
						Public Function getCurrentState() As IState Implements IRegion.getCurrentState
							return getCurrentState(context)
						End Function
						Public Shared Function getCurrentState(ByVal context As AirConditionController) As RegionSpeedState
							return context.AirCondition_MainRegion_Operating.svRegionSpeed
						End Function
						Public Shared Sub setCurrentState(ByVal context As AirConditionController, ByVal state As RegionSpeedState)
							context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() )
							context.AirCondition_MainRegion_Operating.svRegionSpeed = state
						End Sub
						Public Shared Function getInitState(ByVal context As AirConditionController) As RegionSpeedState
							return context.AirCondition_MainRegion_Operating_RegionSpeed_Off
						End Function

						' Base class for all states of Region 'RegionSpeed'
						Public MustInherit Class RegionSpeedState : Implements IState
							Protected Dim context As AirConditionController
							Public Overridable Function speedSelect() As Boolean
								return false
							End Function
							Public MustOverride Function getName() As String Implements IState.getName
							Public MustOverride Function getId() As TStateId Implements IState.getId
							Public MustOverride Function getRegions() As IRegion() Implements IState.getRegions
						End Class

						' Implementation for State 'High'
						Public Class High : Inherits RegionSpeedState
							Public Sub New(ByVal context As AirConditionController)
								Me.context = context
							End Sub
							Public Overrides Function getName() As String
								return "High"
							End Function
							Public Overrides Function getId() As TStateId
								return TStateId.AirCondition_MainRegion_Operating_RegionSpeed_High
							End Function
							Public Overrides Function getRegions() As IRegion()
								return new IRegion() { _ 
								}
							End Function
							Public Overrides Function speedSelect() As Boolean
								' Handle High ---> Off
								context.OnDebugMessage( "TRANSITION: High ---> Off")
								CAirCondition.MainRegion.Operating.RegionSpeed.setCurrentState(context, context.AirCondition_MainRegion_Operating_RegionSpeed_Off)
								return true
							End Function
						End Class

						' Implementation for State 'Off'
						Public Class Off : Inherits RegionSpeedState
							Public Sub New(ByVal context As AirConditionController)
								Me.context = context
							End Sub
							Public Overrides Function getName() As String
								return "Off"
							End Function
							Public Overrides Function getId() As TStateId
								return TStateId.AirCondition_MainRegion_Operating_RegionSpeed_Off
							End Function
							Public Overrides Function getRegions() As IRegion()
								return new IRegion() { _ 
								}
							End Function
							Public Overrides Function speedSelect() As Boolean
								' Handle Off ---> Low
								context.OnDebugMessage( "TRANSITION: Off ---> Low")
								CAirCondition.MainRegion.Operating.RegionSpeed.setCurrentState(context, context.AirCondition_MainRegion_Operating_RegionSpeed_Low)
								return true
							End Function
						End Class

						' Implementation for State 'Low'
						Public Class Low : Inherits RegionSpeedState
							Public Sub New(ByVal context As AirConditionController)
								Me.context = context
							End Sub
							Public Overrides Function getName() As String
								return "Low"
							End Function
							Public Overrides Function getId() As TStateId
								return TStateId.AirCondition_MainRegion_Operating_RegionSpeed_Low
							End Function
							Public Overrides Function getRegions() As IRegion()
								return new IRegion() { _ 
								}
							End Function
							Public Overrides Function speedSelect() As Boolean
								' Handle Low ---> High
								context.OnDebugMessage( "TRANSITION: Low ---> High")
								CAirCondition.MainRegion.Operating.RegionSpeed.setCurrentState(context, context.AirCondition_MainRegion_Operating_RegionSpeed_High)
								return true
							End Function
						End Class
					End Class
				End Class

				' Implementation for State 'Off'
				Public Class Off : Inherits MainRegionState
					Public Sub New(ByVal context As AirConditionController)
						Me.context = context
					End Sub
					Public Overrides Function getName() As String
						return "Off"
					End Function
					Public Overrides Function getId() As TStateId
						return TStateId.AirCondition_MainRegion_Off
					End Function
					Public Overrides Function getRegions() As IRegion()
						return new IRegion() { _ 
						}
					End Function
					Public Overrides Function powerButton() As Boolean
						' Handle Off ---> <Fork>
						context.OnDebugMessage( "TRANSITION: Off ---> <Fork>")
						CAirCondition.MainRegion.setCurrentState(context, context.AirCondition_MainRegion_Operating)
						' Handle <Fork> ---> Heater
						context.OnDebugMessage( "TRANSITION: <Fork> ---> Heater")
						CAirCondition.MainRegion.Operating.RegionMode.setCurrentState(context, context.AirCondition_MainRegion_Operating_RegionMode_Heater)
						' Handle <Fork> ---> Low
						context.OnDebugMessage( "TRANSITION: <Fork> ---> Low")
						CAirCondition.MainRegion.Operating.RegionSpeed.setCurrentState(context, context.AirCondition_MainRegion_Operating_RegionSpeed_Low)
						return true
					End Function
				End Class

				' Implementation for State 'Standby'
				Public Class Standby : Inherits MainRegionState
					Public Sub New(ByVal context As AirConditionController)
						Me.context = context
					End Sub
					Public Overrides Function getName() As String
						return "Standby"
					End Function
					Public Overrides Function getId() As TStateId
						return TStateId.AirCondition_MainRegion_Standby
					End Function
					Public Overrides Function getRegions() As IRegion()
						return new IRegion() { _ 
						}
					End Function
					Public Overrides Function standbyButton() As Boolean
						' Handle Standby ---> <Fork>
						context.OnDebugMessage( "TRANSITION: Standby ---> <Fork>")
						exitState()
						CAirCondition.MainRegion.setCurrentState(context, context.AirCondition_MainRegion_Operating)
						' Handle <Fork> ---> <ShallowHistory>
						context.OnDebugMessage( "TRANSITION: <Fork> ---> <ShallowHistory>")
						CAirCondition.MainRegion.Operating.RegionMode.getCurrentState(context).entryState()
						' Handle <Fork> ---> <ShallowHistory>
						context.OnDebugMessage( "TRANSITION: <Fork> ---> <ShallowHistory>")
						return true
					End Function
					Public Overrides Sub entryState()
						context.OnEntryStandby()
					End Sub
					Public Overrides Sub exitState()
						context.OnExitStandby()
					End Sub
				End Class
			End Class
		End Class
	End Class
End Namespace