'//////////////////////////////////////////////////////////////////////
'
' ComplexController.vb
'
' This file was generated by UModel 2011r2 Enterprise Edition
'
' YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
' OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
'
' Refer to the UModel Documentation for further details.
' http://www.altova.com/umodel
'
'//////////////////////////////////////////////////////////////////////
Imports System

Namespace Complex

	Public MustInherit Class ComplexController

		public Enum TStateId
			Complex_Root
			Complex_MainRegion_S5
			Complex_MainRegion_S5_RegionA_S5A1
			Complex_MainRegion_S5_RegionA_S5A2
			Complex_MainRegion_S5_RegionA_S5A3
			Complex_MainRegion_S5_RegionB_S5B1
			Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B11
			Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B12
			Complex_MainRegion_S5_RegionB_S5B2
			Complex_MainRegion_S5_RegionC_S5C1
			Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C11
			Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12
			Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121
			Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211
			Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12111
			Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12112
			Complex_MainRegion_S5_RegionC_S5C2
			Complex_MainRegion_S1
			Complex_MainRegion_S2
			Complex_MainRegion_S3
			Complex_MainRegion_S4
			Complex_MainRegion_S4_Region4_S41
			Complex_MainRegion_S4_Region4_S42
			Complex_MainRegion_S4_Region4_FinalS4
		End Enum

		public Interface IState
			Function getName() As String
			Function getId() As TStateId
			Function getRegions() As IRegion()
		End Interface

		public Interface IRegion
			Function getName() As String
			Function getStates() As IState()
			Function getCurrentState() As IState
		End Interface

		' get the Root State
		Public Function getRootState() As IState
			return _getRootState()
		End Function
		Public Function getCurrentTopLevelState() As IState
			return getRootState().getRegions()(0).getCurrentState()
		End Function

		' Initialize the State Machine
		Public Sub Initialize()
			OnDebugMessage( "BEGIN_INITIALIZE" )
			Complex_MainRegion_S5 = new CComplex.MainRegion.S5(Me)
			Complex_MainRegion_S5_RegionA_S5A1 = new CComplex.MainRegion.S5.RegionA.S5A1(Me)
			Complex_MainRegion_S5_RegionA_S5A2 = new CComplex.MainRegion.S5.RegionA.S5A2(Me)
			Complex_MainRegion_S5_RegionA_S5A3 = new CComplex.MainRegion.S5.RegionA.S5A3(Me)
			Complex_MainRegion_S5_RegionB_S5B1 = new CComplex.MainRegion.S5.RegionB.S5B1(Me)
			Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B11 = new CComplex.MainRegion.S5.RegionB.S5B1.RegionB1.S5B11(Me)
			Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B12 = new CComplex.MainRegion.S5.RegionB.S5B1.RegionB1.S5B12(Me)
			Complex_MainRegion_S5_RegionB_S5B2 = new CComplex.MainRegion.S5.RegionB.S5B2(Me)
			Complex_MainRegion_S5_RegionC_S5C1 = new CComplex.MainRegion.S5.RegionC.S5C1(Me)
			Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C11 = new CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C11(Me)
			Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12 = new CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12(Me)
			Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121 = new CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121(Me)
			Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211 = new CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211(Me)
			Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12111 = new CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.S5C12111(Me)
			Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12112 = new CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.S5C12112(Me)
			Complex_MainRegion_S5_RegionC_S5C2 = new CComplex.MainRegion.S5.RegionC.S5C2(Me)
			Complex_MainRegion_S1 = new CComplex.MainRegion.S1(Me)
			Complex_MainRegion_S2 = new CComplex.MainRegion.S2(Me)
			Complex_MainRegion_S3 = new CComplex.MainRegion.S3(Me)
			Complex_MainRegion_S4 = new CComplex.MainRegion.S4(Me)
			Complex_MainRegion_S4_Region4_S41 = new CComplex.MainRegion.S4.Region4.S41(Me)
			Complex_MainRegion_S4_Region4_S42 = new CComplex.MainRegion.S4.Region4.S42(Me)
			Complex_MainRegion_S4_Region4_FinalS4 = new CComplex.MainRegion.S4.Region4.FinalS4(Me)

			rootState = new CComplex(Me)

			CComplex.MainRegion.setCurrentState(Me, CComplex.MainRegion.getInitState(Me))
			CComplex.MainRegion.S5.RegionA.setCurrentState(Me, CComplex.MainRegion.S5.RegionA.getInitState(Me))
			CComplex.MainRegion.S5.RegionB.setCurrentState(Me, CComplex.MainRegion.S5.RegionB.getInitState(Me))
			CComplex.MainRegion.S5.RegionB.S5B1.RegionB1.setCurrentState(Me, CComplex.MainRegion.S5.RegionB.S5B1.RegionB1.getInitState(Me))
			CComplex.MainRegion.S5.RegionC.setCurrentState(Me, CComplex.MainRegion.S5.RegionC.getInitState(Me))
			CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.setCurrentState(Me, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.getInitState(Me))
			CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.setCurrentState(Me, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.getInitState(Me))
			CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.setCurrentState(Me, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.getInitState(Me))
			CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.setCurrentState(Me, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.getInitState(Me))
			CComplex.MainRegion.S4.Region4.setCurrentState(Me, CComplex.MainRegion.S4.Region4.getInitState(Me))
			OnDebugMessage( "END_INITIALIZE" )
		End Sub

		' get all possible call event actions
		Public Delegate Function CallEventAction() As Boolean 
		Public Function getCallEvents() As CallEventAction()
			return new CallEventAction() { _ 
				new CallEventAction(AddressOf Event1), _ 
				new CallEventAction(AddressOf Event2), _ 
				new CallEventAction(AddressOf Event3), _ 
				new CallEventAction(AddressOf Event4) _ 
			}
		End Function

		' call event method implementations
		Public Function Event1() As Boolean
			OnDebugMessage("BEGIN_EVENT: Event1")
			Dim bHandled As Boolean = _getRootState().Event1()
			OnDebugMessage("END_EVENT: Event1")
			return bHandled
		End Function
		Public Function Event2() As Boolean
			OnDebugMessage("BEGIN_EVENT: Event2")
			Dim bHandled As Boolean = _getRootState().Event2()
			OnDebugMessage("END_EVENT: Event2")
			return bHandled
		End Function
		Public Function Event3() As Boolean
			OnDebugMessage("BEGIN_EVENT: Event3")
			Dim bHandled As Boolean = _getRootState().Event3()
			OnDebugMessage("END_EVENT: Event3")
			return bHandled
		End Function
		Public Function Event4() As Boolean
			OnDebugMessage("BEGIN_EVENT: Event4")
			Dim bHandled As Boolean = _getRootState().Event4()
			OnDebugMessage("END_EVENT: Event4")
			return bHandled
		End Function

		' Overwrite to handle entry/exit/do actions, transition effects,...:
		Public Overridable Sub OnEntryS5C12111()
			OnDebugMessage("ACTION: OnEntryS5C12111")
		End Sub
		Public Overridable Sub OnExitS5C12111()
			OnDebugMessage("ACTION: OnExitS5C12111")
		End Sub
		Public Overridable Sub OnEntryS5C12112()
			OnDebugMessage("ACTION: OnEntryS5C12112")
		End Sub
		Public Overridable Sub OnExitS5C12112()
			OnDebugMessage("ACTION: OnExitS5C12112")
		End Sub
		Public Overridable Sub OnEntryS5C1211()
			OnDebugMessage("ACTION: OnEntryS5C1211")
		End Sub
		Public Overridable Sub OnExitS5C1211()
			OnDebugMessage("ACTION: OnExitS5C1211")
		End Sub
		Public Overridable Sub OnEntryS5C121()
			OnDebugMessage("ACTION: OnEntryS5C121")
		End Sub
		Public Overridable Sub OnExitS5C121()
			OnDebugMessage("ACTION: OnExitS5C121")
		End Sub
		Public Overridable Sub OnEntryS5B11()
			OnDebugMessage("ACTION: OnEntryS5B11")
		End Sub
		Public Overridable Sub OnExitS5B11()
			OnDebugMessage("ACTION: OnExitS5B11")
		End Sub
		Public Overridable Sub OnEntryS5B12()
			OnDebugMessage("ACTION: OnEntryS5B12")
		End Sub
		Public Overridable Sub OnExitS5B12()
			OnDebugMessage("ACTION: OnExitS5B12")
		End Sub
		Public Overridable Sub OnEntryS5C11()
			OnDebugMessage("ACTION: OnEntryS5C11")
		End Sub
		Public Overridable Sub OnExitS5C11()
			OnDebugMessage("ACTION: OnExitS5C11")
		End Sub
		Public Overridable Sub OnEntryS5C12()
			OnDebugMessage("ACTION: OnEntryS5C12")
		End Sub
		Public Overridable Sub OnExitS5C12()
			OnDebugMessage("ACTION: OnExitS5C12")
		End Sub
		Public Overridable Sub OnEntryS5A1()
			OnDebugMessage("ACTION: OnEntryS5A1")
		End Sub
		Public Overridable Sub OnExitS5A1()
			OnDebugMessage("ACTION: OnExitS5A1")
		End Sub
		Public Overridable Sub OnDoS5A1()
			OnDebugMessage("ACTION: OnDoS5A1")
		End Sub
		Public Overridable Sub OnEntryS5A2()
			OnDebugMessage("ACTION: OnEntryS5A2")
		End Sub
		Public Overridable Sub OnExitS5A2()
			OnDebugMessage("ACTION: OnExitS5A2")
		End Sub
		Public Overridable Sub OnDoS5A2()
			OnDebugMessage("ACTION: OnDoS5A2")
		End Sub
		Public Overridable Sub OnEntryS5A3()
			OnDebugMessage("ACTION: OnEntryS5A3")
		End Sub
		Public Overridable Sub OnExitS5A3()
			OnDebugMessage("ACTION: OnExitS5A3")
		End Sub
		Public Overridable Sub OnDoS5A3()
			OnDebugMessage("ACTION: OnDoS5A3")
		End Sub
		Public Overridable Sub OnEntryS5B1()
			OnDebugMessage("ACTION: OnEntryS5B1")
		End Sub
		Public Overridable Sub OnExitS5B1()
			OnDebugMessage("ACTION: OnExitS5B1")
		End Sub
		Public Overridable Sub OnEntryS5B2()
			OnDebugMessage("ACTION: OnEntryS5B2")
		End Sub
		Public Overridable Sub OnExitS5B2()
			OnDebugMessage("ACTION: OnExitS5B2")
		End Sub
		Public Overridable Sub OnEntryS5C1()
			OnDebugMessage("ACTION: OnEntryS5C1")
		End Sub
		Public Overridable Sub OnExitS5C1()
			OnDebugMessage("ACTION: OnExitS5C1")
		End Sub
		Public Overridable Sub OnEntryS5C2()
			OnDebugMessage("ACTION: OnEntryS5C2")
		End Sub
		Public Overridable Sub OnExitS5C2()
			OnDebugMessage("ACTION: OnExitS5C2")
		End Sub
		Public Overridable Sub OnEntryS41()
			OnDebugMessage("ACTION: OnEntryS41")
		End Sub
		Public Overridable Sub OnExitS41()
			OnDebugMessage("ACTION: OnExitS41")
		End Sub
		Public Overridable Sub OnEntryS42()
			OnDebugMessage("ACTION: OnEntryS42")
		End Sub
		Public Overridable Sub OnExitS42()
			OnDebugMessage("ACTION: OnExitS42")
		End Sub
		Public Overridable Sub OnEntryS5()
			OnDebugMessage("ACTION: OnEntryS5")
		End Sub
		Public Overridable Sub OnExitS5()
			OnDebugMessage("ACTION: OnExitS5")
		End Sub
		Public Overridable Sub OnEntryS1()
			OnDebugMessage("ACTION: OnEntryS1")
		End Sub
		Public Overridable Sub OnExitS1()
			OnDebugMessage("ACTION: OnExitS1")
		End Sub
		Public Overridable Sub OnEntryS2()
			OnDebugMessage("ACTION: OnEntryS2")
		End Sub
		Public Overridable Sub OnExitS2()
			OnDebugMessage("ACTION: OnExitS2")
		End Sub
		Public Overridable Sub OnEntryS3()
			OnDebugMessage("ACTION: OnEntryS3")
		End Sub
		Public Overridable Sub OnExitS3()
			OnDebugMessage("ACTION: OnExitS3")
		End Sub
		Public Overridable Sub OnEntryS4()
			OnDebugMessage("ACTION: OnEntryS4")
		End Sub
		Public Overridable Sub OnExitS4()
			OnDebugMessage("ACTION: OnExitS4")
		End Sub
		Public Overridable Sub OnEffectLeaveRegionA()
			OnDebugMessage("ACTION: OnEffectLeaveRegionA")
		End Sub
		Public Overridable Sub OnEffectLeaveRegionB()
			OnDebugMessage("ACTION: OnEffectLeaveRegionB")
		End Sub
		Public Overridable Sub OnEffectLeaveRegionC()
			OnDebugMessage("ACTION: OnEffectLeaveRegionC")
		End Sub
		Public Overridable Sub OnEffectS5_S4()
			OnDebugMessage("ACTION: OnEffectS5_S4")
		End Sub
		Public Overridable Sub OnEffectS4_S5()
			OnDebugMessage("ACTION: OnEffectS4_S5")
		End Sub
		Public Overridable Sub OnEffectLeaveJoin()
			OnDebugMessage("ACTION: OnEffectLeaveJoin")
		End Sub

		' Overwrite to handle debug messages:
		Public Overridable Sub OnDebugMessage(ByVal str As String)
			if ( Not str.StartsWith("BEGIN_EVENT" ) AndAlso Not str.StartsWith( "END_EVENT" ) AndAlso Not str.StartsWith( "BEGIN_INITIALIZE" ) AndAlso Not str.StartsWith( "END_INITIALIZE" ) )
				System.Diagnostics.Debug.WriteLine("\t"+ str)
			Else
				System.Diagnostics.Debug.WriteLine(str)
			End If
		End Sub

		' Additional defined operations of the controller class:
		Public MustOverride Function CanGoS5() As Boolean
		Public MustOverride Function CanGoS2() As Boolean
		Public Overridable Sub OnExitntryS5C11()
			OnDebugMessage( "OPERATION: OnExitntryS5C11")
		End Sub

		' Internal Definitions and Implementations

		' Root State Definition
		Private Dim rootState As CComplex = Nothing
		Private Function _getRootState() As CComplex
			if(rootState Is Nothing) Then
				Initialize()
			End If

			return rootState
		End Function

		' State Variable Definitions
		Private Dim Complex_MainRegion_S5 As CComplex.MainRegion.S5 = Nothing
		Private Dim Complex_MainRegion_S5_RegionA_S5A1 As CComplex.MainRegion.S5.RegionA.S5A1 = Nothing
		Private Dim Complex_MainRegion_S5_RegionA_S5A2 As CComplex.MainRegion.S5.RegionA.S5A2 = Nothing
		Private Dim Complex_MainRegion_S5_RegionA_S5A3 As CComplex.MainRegion.S5.RegionA.S5A3 = Nothing
		Private Dim Complex_MainRegion_S5_RegionB_S5B1 As CComplex.MainRegion.S5.RegionB.S5B1 = Nothing
		Private Dim Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B11 As CComplex.MainRegion.S5.RegionB.S5B1.RegionB1.S5B11 = Nothing
		Private Dim Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B12 As CComplex.MainRegion.S5.RegionB.S5B1.RegionB1.S5B12 = Nothing
		Private Dim Complex_MainRegion_S5_RegionB_S5B2 As CComplex.MainRegion.S5.RegionB.S5B2 = Nothing
		Private Dim Complex_MainRegion_S5_RegionC_S5C1 As CComplex.MainRegion.S5.RegionC.S5C1 = Nothing
		Private Dim Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C11 As CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C11 = Nothing
		Private Dim Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12 As CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12 = Nothing
		Private Dim Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121 As CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121 = Nothing
		Private Dim Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211 As CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211 = Nothing
		Private Dim Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12111 As CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.S5C12111 = Nothing
		Private Dim Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12112 As CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.S5C12112 = Nothing
		Private Dim Complex_MainRegion_S5_RegionC_S5C2 As CComplex.MainRegion.S5.RegionC.S5C2 = Nothing
		Private Dim Complex_MainRegion_S1 As CComplex.MainRegion.S1 = Nothing
		Private Dim Complex_MainRegion_S2 As CComplex.MainRegion.S2 = Nothing
		Private Dim Complex_MainRegion_S3 As CComplex.MainRegion.S3 = Nothing
		Private Dim Complex_MainRegion_S4 As CComplex.MainRegion.S4 = Nothing
		Private Dim Complex_MainRegion_S4_Region4_S41 As CComplex.MainRegion.S4.Region4.S41 = Nothing
		Private Dim Complex_MainRegion_S4_Region4_S42 As CComplex.MainRegion.S4.Region4.S42 = Nothing
		Private Dim Complex_MainRegion_S4_Region4_FinalS4 As CComplex.MainRegion.S4.Region4.FinalS4 = Nothing

		' Implementation for StateMachine 'Complex'
		Private Class CComplex : Implements IState
			Private Dim context As ComplexController
			Private Dim svMainRegion As MainRegion.MainRegionState ' State Variable for Region 'MainRegion'

			Public Sub New(ByVal context As ComplexController)
				Me.context = context
			End Sub
			Public Function getName() As String Implements IState.getName
				return "Complex"
			End Function
			Public Function getId() As TStateId Implements IState.getId
				return TStateId.Complex_Root
			End Function
			Public Function getRegions() As IRegion() Implements IState.getRegions
				return new IRegion() { _ 
					new MainRegion(context) _ 
				}
			End Function
			Public Function Event1() As Boolean
				return MainRegion.getCurrentState(context).Event1()
			End Function
			Public Function Event2() As Boolean
				return MainRegion.getCurrentState(context).Event2()
			End Function
			Public Function Event3() As Boolean
				return MainRegion.getCurrentState(context).Event3()
			End Function
			Public Function Event4() As Boolean
				return MainRegion.getCurrentState(context).Event4()
			End Function

			' Implementation for Region 'MainRegion'
			Public Class MainRegion : Implements IRegion
				Private Dim context As ComplexController

				Public Sub New(ByVal context As ComplexController)
					Me.context = context
				End Sub
				Public Function getName() As String Implements IRegion.getName
					return "MainRegion"
				End Function
				Public Function getStates() As IState() Implements IRegion.getStates
					 return new IState() { _ 
						new S5(context), _ 
						new S1(context), _ 
						new S2(context), _ 
						new S3(context), _ 
						new S4(context) _ 
					}
				End Function
				Public Function getCurrentState() As IState Implements IRegion.getCurrentState
					return getCurrentState(context)
				End Function
				Public Shared Function getCurrentState(ByVal context As ComplexController) As MainRegionState
					return context._getRootState().svMainRegion
				End Function
				Public Shared Sub setCurrentState(ByVal context As ComplexController, ByVal state As MainRegionState)
					context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() )
					context._getRootState().svMainRegion = state
					context._getRootState().svMainRegion.entryState()
				End Sub
				Public Shared Function getInitState(ByVal context As ComplexController) As MainRegionState
					return context.Complex_MainRegion_S1
				End Function

				' Base class for all states of Region 'MainRegion'
				Public MustInherit Class MainRegionState : Implements IState
					Protected Dim context As ComplexController
					Public Overridable Function Event1() As Boolean
						return false
					End Function
					Public Overridable Function Event2() As Boolean
						return false
					End Function
					Public Overridable Function Event3() As Boolean
						return false
					End Function
					Public Overridable Function Event4() As Boolean
						return false
					End Function
					Public Overridable Sub enterSubStates()
					End Sub
					Public Overridable Sub initSubStates()
					End Sub
					Public Overridable Sub entryState()
					End Sub
					Public Overridable Sub exitState()
					End Sub
					Public MustOverride Function getName() As String Implements IState.getName
					Public MustOverride Function getId() As TStateId Implements IState.getId
					Public MustOverride Function getRegions() As IRegion() Implements IState.getRegions
				End Class

				' Implementation for State 'S5'
				Public Class S5 : Inherits MainRegionState
					Private Dim svRegionA As RegionA.RegionAState ' State Variable for Region 'RegionA'
					Private Dim svRegionB As RegionB.RegionBState ' State Variable for Region 'RegionB'
					Private Dim svRegionC As RegionC.RegionCState ' State Variable for Region 'RegionC'

					Public Sub New(ByVal context As ComplexController)
						Me.context = context
					End Sub
					Public Overrides Function getName() As String
						return "S5"
					End Function
					Public Overrides Function getId() As TStateId
						return TStateId.Complex_MainRegion_S5
					End Function
					Public Overrides Function getRegions() As IRegion()
						return new IRegion() { _ 
							new RegionA(context), _ 
							new RegionB(context), _ 
							new RegionC(context) _ 
						}
					End Function
					Public Overrides Function Event1() As Boolean
						Dim bHandled As Boolean = false

						if(RegionA.getCurrentState(context).Event1()) Then
							bHandled = true
						End If

						if(RegionB.getCurrentState(context).Event1()) Then
							bHandled = true
						End If

						if(RegionC.getCurrentState(context).Event1()) Then
							bHandled = true
						End If

						if(bHandled) Then
							return true
						End If

						return false
					End Function
					Public Overrides Function Event3() As Boolean
						if(RegionC.getCurrentState(context).Event3()) Then
							return true
						End If

						return false
					End Function
					Public Overrides Function Event4() As Boolean
						' Handle S5 ---> S4
						context.OnDebugMessage( "TRANSITION: S5 ---> S4")
						exitState()
						context.OnEffectS5_S4() ' Handle effect of transition S5 ---> S4
						CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S4)
						CComplex.MainRegion.S4.Region4.setCurrentState(context, CComplex.MainRegion.S4.Region4.getInitState(context))
						return true
					End Function
					Public Overrides Sub entryState()
						context.OnEntryS5()
					End Sub
					Public Overrides Sub exitState()
						RegionA.getCurrentState(context).exitState()
						RegionB.getCurrentState(context).exitState()
						RegionC.getCurrentState(context).exitState()
						context.OnExitS5()
					End Sub
					Public Overrides Sub initSubStates()
						RegionB.setCurrentState(context, RegionB.getInitState(context))
						RegionB.getCurrentState(context).initSubStates()
					End Sub
					Public Overrides Sub enterSubStates()
						RegionC.getCurrentState(context).entryState()
						RegionC.getCurrentState(context).enterSubStates()
					End Sub
					Public Function processJoin_S5A3_S5B2_S5C2() As Boolean
						' Handle <Join> ---> S42
						context.OnDebugMessage( "TRANSITION: <Join> ---> S42")
						exitState()
						context.OnEffectLeaveRegionA() ' Handle effect of transition S5A3 ---> <Join>
						context.OnEffectLeaveRegionB() ' Handle effect of transition S5B2 ---> <Join>
						context.OnEffectLeaveRegionC() ' Handle effect of transition S5C2 ---> <Join>
						context.OnEffectLeaveJoin() ' Handle effect of transition <Join> ---> S42
						CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S4)
						CComplex.MainRegion.S4.Region4.setCurrentState(context, context.Complex_MainRegion_S4_Region4_S42)
						return true
					End Function

					' Implementation for Region 'RegionA'
					Public Class RegionA : Implements IRegion
						Private Dim context As ComplexController

						Public Sub New(ByVal context As ComplexController)
							Me.context = context
						End Sub
						Public Function getName() As String Implements IRegion.getName
							return "RegionA"
						End Function
						Public Function getStates() As IState() Implements IRegion.getStates
							 return new IState() { _ 
								new S5A1(context), _ 
								new S5A2(context), _ 
								new S5A3(context) _ 
							}
						End Function
						Public Function getCurrentState() As IState Implements IRegion.getCurrentState
							return getCurrentState(context)
						End Function
						Public Shared Function getCurrentState(ByVal context As ComplexController) As RegionAState
							return context.Complex_MainRegion_S5.svRegionA
						End Function
						Public Shared Sub setCurrentState(ByVal context As ComplexController, ByVal state As RegionAState)
							context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() )
							context.Complex_MainRegion_S5.svRegionA = state
							context.Complex_MainRegion_S5.svRegionA.entryState()
						End Sub
						Public Shared Function getInitState(ByVal context As ComplexController) As RegionAState
							return context.Complex_MainRegion_S5_RegionA_S5A1
						End Function

						' Base class for all states of Region 'RegionA'
						Public MustInherit Class RegionAState : Implements IState
							Protected Dim context As ComplexController
							Public Overridable Function Event1() As Boolean
								return false
							End Function
							Public Overridable Sub entryState()
							End Sub
							Public Overridable Sub exitState()
							End Sub
							Public MustOverride Function getName() As String Implements IState.getName
							Public MustOverride Function getId() As TStateId Implements IState.getId
							Public MustOverride Function getRegions() As IRegion() Implements IState.getRegions
						End Class

						' Implementation for State 'S5A1'
						Public Class S5A1 : Inherits RegionAState
							Public Sub New(ByVal context As ComplexController)
								Me.context = context
							End Sub
							Public Overrides Function getName() As String
								return "S5A1"
							End Function
							Public Overrides Function getId() As TStateId
								return TStateId.Complex_MainRegion_S5_RegionA_S5A1
							End Function
							Public Overrides Function getRegions() As IRegion()
								return new IRegion() { _ 
								}
							End Function
							Public Overrides Function Event1() As Boolean
								' Handle S5A1 ---> S5A2
								context.OnDebugMessage( "TRANSITION: S5A1 ---> S5A2")
								exitState()
								CComplex.MainRegion.S5.RegionA.setCurrentState(context, context.Complex_MainRegion_S5_RegionA_S5A2)
								return true
							End Function
							Public Overrides Sub entryState()
								context.OnEntryS5A1()
								context.OnDoS5A1()
							End Sub
							Public Overrides Sub exitState()
								context.OnExitS5A1()
							End Sub
						End Class

						' Implementation for State 'S5A2'
						Public Class S5A2 : Inherits RegionAState
							Public Sub New(ByVal context As ComplexController)
								Me.context = context
							End Sub
							Public Overrides Function getName() As String
								return "S5A2"
							End Function
							Public Overrides Function getId() As TStateId
								return TStateId.Complex_MainRegion_S5_RegionA_S5A2
							End Function
							Public Overrides Function getRegions() As IRegion()
								return new IRegion() { _ 
								}
							End Function
							Public Overrides Function Event1() As Boolean
								' Handle S5A2 ---> S5A3
								context.OnDebugMessage( "TRANSITION: S5A2 ---> S5A3")
								exitState()
								CComplex.MainRegion.S5.RegionA.setCurrentState(context, context.Complex_MainRegion_S5_RegionA_S5A3)
								if(CComplex.MainRegion.S5.RegionB.getCurrentState(context) Is context.Complex_MainRegion_S5_RegionB_S5B2 AndAlso _ 
								   CComplex.MainRegion.S5.RegionC.getCurrentState(context) Is context.Complex_MainRegion_S5_RegionC_S5C2) Then
									if ( context.Complex_MainRegion_S5.processJoin_S5A3_S5B2_S5C2() ) Then
										return true
									End If

									' else ERROR!
								End If
								return true
							End Function
							Public Overrides Sub entryState()
								context.OnEntryS5A2()
								context.OnDoS5A2()
							End Sub
							Public Overrides Sub exitState()
								context.OnExitS5A2()
							End Sub
						End Class

						' Implementation for State 'S5A3'
						Public Class S5A3 : Inherits RegionAState
							Public Sub New(ByVal context As ComplexController)
								Me.context = context
							End Sub
							Public Overrides Function getName() As String
								return "S5A3"
							End Function
							Public Overrides Function getId() As TStateId
								return TStateId.Complex_MainRegion_S5_RegionA_S5A3
							End Function
							Public Overrides Function getRegions() As IRegion()
								return new IRegion() { _ 
								}
							End Function
							Public Overrides Sub entryState()
								context.OnEntryS5A3()
								context.OnDoS5A3()
							End Sub
							Public Overrides Sub exitState()
								context.OnExitS5A3()
							End Sub
						End Class
					End Class

					' Implementation for Region 'RegionB'
					Public Class RegionB : Implements IRegion
						Private Dim context As ComplexController

						Public Sub New(ByVal context As ComplexController)
							Me.context = context
						End Sub
						Public Function getName() As String Implements IRegion.getName
							return "RegionB"
						End Function
						Public Function getStates() As IState() Implements IRegion.getStates
							 return new IState() { _ 
								new S5B1(context), _ 
								new S5B2(context) _ 
							}
						End Function
						Public Function getCurrentState() As IState Implements IRegion.getCurrentState
							return getCurrentState(context)
						End Function
						Public Shared Function getCurrentState(ByVal context As ComplexController) As RegionBState
							return context.Complex_MainRegion_S5.svRegionB
						End Function
						Public Shared Sub setCurrentState(ByVal context As ComplexController, ByVal state As RegionBState)
							context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() )
							context.Complex_MainRegion_S5.svRegionB = state
							context.Complex_MainRegion_S5.svRegionB.entryState()
						End Sub
						Public Shared Function getInitState(ByVal context As ComplexController) As RegionBState
							return context.Complex_MainRegion_S5_RegionB_S5B1
						End Function

						' Base class for all states of Region 'RegionB'
						Public MustInherit Class RegionBState : Implements IState
							Protected Dim context As ComplexController
							Public Overridable Function Event1() As Boolean
								return false
							End Function
							Public Overridable Sub initSubStates()
							End Sub
							Public Overridable Sub entryState()
							End Sub
							Public Overridable Sub exitState()
							End Sub
							Public MustOverride Function getName() As String Implements IState.getName
							Public MustOverride Function getId() As TStateId Implements IState.getId
							Public MustOverride Function getRegions() As IRegion() Implements IState.getRegions
						End Class

						' Implementation for State 'S5B1'
						Public Class S5B1 : Inherits RegionBState
							Private Dim svRegionB1 As RegionB1.RegionB1State ' State Variable for Region 'RegionB1'

							Public Sub New(ByVal context As ComplexController)
								Me.context = context
							End Sub
							Public Overrides Function getName() As String
								return "S5B1"
							End Function
							Public Overrides Function getId() As TStateId
								return TStateId.Complex_MainRegion_S5_RegionB_S5B1
							End Function
							Public Overrides Function getRegions() As IRegion()
								return new IRegion() { _ 
									new RegionB1(context) _ 
								}
							End Function
							Public Overrides Function Event1() As Boolean
								if(RegionB1.getCurrentState(context).Event1()) Then
									return true
								End If

								return false
							End Function
							Public Overrides Sub entryState()
								context.OnEntryS5B1()
							End Sub
							Public Overrides Sub exitState()
								RegionB1.getCurrentState(context).exitState()
								context.OnExitS5B1()
							End Sub
							Public Overrides Sub initSubStates()
								RegionB1.setCurrentState(context, RegionB1.getInitState(context))
							End Sub

							' Implementation for Region 'RegionB1'
							Public Class RegionB1 : Implements IRegion
								Private Dim context As ComplexController

								Public Sub New(ByVal context As ComplexController)
									Me.context = context
								End Sub
								Public Function getName() As String Implements IRegion.getName
									return "RegionB1"
								End Function
								Public Function getStates() As IState() Implements IRegion.getStates
									 return new IState() { _ 
										new S5B11(context), _ 
										new S5B12(context) _ 
									}
								End Function
								Public Function getCurrentState() As IState Implements IRegion.getCurrentState
									return getCurrentState(context)
								End Function
								Public Shared Function getCurrentState(ByVal context As ComplexController) As RegionB1State
									return context.Complex_MainRegion_S5_RegionB_S5B1.svRegionB1
								End Function
								Public Shared Sub setCurrentState(ByVal context As ComplexController, ByVal state As RegionB1State)
									context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() )
									context.Complex_MainRegion_S5_RegionB_S5B1.svRegionB1 = state
									context.Complex_MainRegion_S5_RegionB_S5B1.svRegionB1.entryState()
								End Sub
								Public Shared Function getInitState(ByVal context As ComplexController) As RegionB1State
									return context.Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B11
								End Function

								' Base class for all states of Region 'RegionB1'
								Public MustInherit Class RegionB1State : Implements IState
									Protected Dim context As ComplexController
									Public Overridable Function Event1() As Boolean
										return false
									End Function
									Public Overridable Sub entryState()
									End Sub
									Public Overridable Sub exitState()
									End Sub
									Public MustOverride Function getName() As String Implements IState.getName
									Public MustOverride Function getId() As TStateId Implements IState.getId
									Public MustOverride Function getRegions() As IRegion() Implements IState.getRegions
								End Class

								' Implementation for State 'S5B11'
								Public Class S5B11 : Inherits RegionB1State
									Public Sub New(ByVal context As ComplexController)
										Me.context = context
									End Sub
									Public Overrides Function getName() As String
										return "S5B11"
									End Function
									Public Overrides Function getId() As TStateId
										return TStateId.Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B11
									End Function
									Public Overrides Function getRegions() As IRegion()
										return new IRegion() { _ 
										}
									End Function
									Public Overrides Function Event1() As Boolean
										' Handle S5B11 ---> S5B12
										context.OnDebugMessage( "TRANSITION: S5B11 ---> S5B12")
										exitState()
										CComplex.MainRegion.S5.RegionB.S5B1.RegionB1.setCurrentState(context, context.Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B12)
										return true
									End Function
									Public Overrides Sub entryState()
										context.OnEntryS5B11()
									End Sub
									Public Overrides Sub exitState()
										context.OnExitS5B11()
									End Sub
								End Class

								' Implementation for State 'S5B12'
								Public Class S5B12 : Inherits RegionB1State
									Public Sub New(ByVal context As ComplexController)
										Me.context = context
									End Sub
									Public Overrides Function getName() As String
										return "S5B12"
									End Function
									Public Overrides Function getId() As TStateId
										return TStateId.Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B12
									End Function
									Public Overrides Function getRegions() As IRegion()
										return new IRegion() { _ 
										}
									End Function
									Public Overrides Function Event1() As Boolean
										' Handle S5B12 ---> S5B2
										context.OnDebugMessage( "TRANSITION: S5B12 ---> S5B2")
										context.Complex_MainRegion_S5_RegionB_S5B1.exitState()
										CComplex.MainRegion.S5.RegionB.setCurrentState(context, context.Complex_MainRegion_S5_RegionB_S5B2)
										if(CComplex.MainRegion.S5.RegionA.getCurrentState(context) Is context.Complex_MainRegion_S5_RegionA_S5A3 AndAlso _ 
										   CComplex.MainRegion.S5.RegionC.getCurrentState(context) Is context.Complex_MainRegion_S5_RegionC_S5C2) Then
											if ( context.Complex_MainRegion_S5.processJoin_S5A3_S5B2_S5C2() ) Then
												return true
											End If

											' else ERROR!
										End If
										return true
									End Function
									Public Overrides Sub entryState()
										context.OnEntryS5B12()
									End Sub
									Public Overrides Sub exitState()
										context.OnExitS5B12()
									End Sub
								End Class
							End Class
						End Class

						' Implementation for State 'S5B2'
						Public Class S5B2 : Inherits RegionBState
							Public Sub New(ByVal context As ComplexController)
								Me.context = context
							End Sub
							Public Overrides Function getName() As String
								return "S5B2"
							End Function
							Public Overrides Function getId() As TStateId
								return TStateId.Complex_MainRegion_S5_RegionB_S5B2
							End Function
							Public Overrides Function getRegions() As IRegion()
								return new IRegion() { _ 
								}
							End Function
							Public Overrides Sub entryState()
								context.OnEntryS5B2()
							End Sub
							Public Overrides Sub exitState()
								context.OnExitS5B2()
							End Sub
						End Class
					End Class

					' Implementation for Region 'RegionC'
					Public Class RegionC : Implements IRegion
						Private Dim context As ComplexController

						Public Sub New(ByVal context As ComplexController)
							Me.context = context
						End Sub
						Public Function getName() As String Implements IRegion.getName
							return "RegionC"
						End Function
						Public Function getStates() As IState() Implements IRegion.getStates
							 return new IState() { _ 
								new S5C1(context), _ 
								new S5C2(context) _ 
							}
						End Function
						Public Function getCurrentState() As IState Implements IRegion.getCurrentState
							return getCurrentState(context)
						End Function
						Public Shared Function getCurrentState(ByVal context As ComplexController) As RegionCState
							return context.Complex_MainRegion_S5.svRegionC
						End Function
						Public Shared Sub setCurrentState(ByVal context As ComplexController, ByVal state As RegionCState)
							context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() )
							context.Complex_MainRegion_S5.svRegionC = state
							context.Complex_MainRegion_S5.svRegionC.entryState()
						End Sub
						Public Shared Function getInitState(ByVal context As ComplexController) As RegionCState
							return context.Complex_MainRegion_S5_RegionC_S5C1
						End Function

						' Base class for all states of Region 'RegionC'
						Public MustInherit Class RegionCState : Implements IState
							Protected Dim context As ComplexController
							Public Overridable Function Event1() As Boolean
								return false
							End Function
							Public Overridable Function Event3() As Boolean
								return false
							End Function
							Public Overridable Sub enterSubStates()
							End Sub
							Public Overridable Sub entryState()
							End Sub
							Public Overridable Sub exitState()
							End Sub
							Public MustOverride Function getName() As String Implements IState.getName
							Public MustOverride Function getId() As TStateId Implements IState.getId
							Public MustOverride Function getRegions() As IRegion() Implements IState.getRegions
						End Class

						' Implementation for State 'S5C1'
						Public Class S5C1 : Inherits RegionCState
							Private Dim svRegionC1 As RegionC1.RegionC1State ' State Variable for Region 'RegionC1'

							Public Sub New(ByVal context As ComplexController)
								Me.context = context
							End Sub
							Public Overrides Function getName() As String
								return "S5C1"
							End Function
							Public Overrides Function getId() As TStateId
								return TStateId.Complex_MainRegion_S5_RegionC_S5C1
							End Function
							Public Overrides Function getRegions() As IRegion()
								return new IRegion() { _ 
									new RegionC1(context) _ 
								}
							End Function
							Public Overrides Function Event1() As Boolean
								if(RegionC1.getCurrentState(context).Event1()) Then
									return true
								End If

								return false
							End Function
							Public Overrides Function Event3() As Boolean
								if(RegionC1.getCurrentState(context).Event3()) Then
									return true
								End If

								return false
							End Function
							Public Overrides Sub entryState()
								context.OnEntryS5C1()
							End Sub
							Public Overrides Sub exitState()
								RegionC1.getCurrentState(context).exitState()
								context.OnExitS5C1()
							End Sub
							Public Overrides Sub enterSubStates()
								RegionC1.getCurrentState(context).entryState()
								RegionC1.getCurrentState(context).enterSubStates()
							End Sub

							' Implementation for Region 'RegionC1'
							Public Class RegionC1 : Implements IRegion
								Private Dim context As ComplexController

								Public Sub New(ByVal context As ComplexController)
									Me.context = context
								End Sub
								Public Function getName() As String Implements IRegion.getName
									return "RegionC1"
								End Function
								Public Function getStates() As IState() Implements IRegion.getStates
									 return new IState() { _ 
										new S5C11(context), _ 
										new S5C12(context) _ 
									}
								End Function
								Public Function getCurrentState() As IState Implements IRegion.getCurrentState
									return getCurrentState(context)
								End Function
								Public Shared Function getCurrentState(ByVal context As ComplexController) As RegionC1State
									return context.Complex_MainRegion_S5_RegionC_S5C1.svRegionC1
								End Function
								Public Shared Sub setCurrentState(ByVal context As ComplexController, ByVal state As RegionC1State)
									context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() )
									context.Complex_MainRegion_S5_RegionC_S5C1.svRegionC1 = state
									context.Complex_MainRegion_S5_RegionC_S5C1.svRegionC1.entryState()
								End Sub
								Public Shared Function getInitState(ByVal context As ComplexController) As RegionC1State
									return context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C11
								End Function

								' Base class for all states of Region 'RegionC1'
								Public MustInherit Class RegionC1State : Implements IState
									Protected Dim context As ComplexController
									Public Overridable Function Event1() As Boolean
										return false
									End Function
									Public Overridable Function Event3() As Boolean
										return false
									End Function
									Public Overridable Sub enterSubStates()
									End Sub
									Public Overridable Sub entryState()
									End Sub
									Public Overridable Sub exitState()
									End Sub
									Public MustOverride Function getName() As String Implements IState.getName
									Public MustOverride Function getId() As TStateId Implements IState.getId
									Public MustOverride Function getRegions() As IRegion() Implements IState.getRegions
								End Class

								' Implementation for State 'S5C11'
								Public Class S5C11 : Inherits RegionC1State
									Public Sub New(ByVal context As ComplexController)
										Me.context = context
									End Sub
									Public Overrides Function getName() As String
										return "S5C11"
									End Function
									Public Overrides Function getId() As TStateId
										return TStateId.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C11
									End Function
									Public Overrides Function getRegions() As IRegion()
										return new IRegion() { _ 
										}
									End Function
									Public Overrides Function Event1() As Boolean
										' Handle S5C11 ---> S5C12
										context.OnDebugMessage( "TRANSITION: S5C11 ---> S5C12")
										exitState()
										CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12)
										CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.setCurrentState(context, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.getInitState(context))
										CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.setCurrentState(context, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.getInitState(context))
										CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.setCurrentState(context, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.getInitState(context))
										return true
									End Function
									Public Overrides Sub entryState()
										context.OnEntryS5C11()
									End Sub
									Public Overrides Sub exitState()
										context.OnExitS5C11()
									End Sub
								End Class

								' Implementation for State 'S5C12'
								Public Class S5C12 : Inherits RegionC1State
									Private Dim svRegionC12 As RegionC12.RegionC12State ' State Variable for Region 'RegionC12'

									Public Sub New(ByVal context As ComplexController)
										Me.context = context
									End Sub
									Public Overrides Function getName() As String
										return "S5C12"
									End Function
									Public Overrides Function getId() As TStateId
										return TStateId.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12
									End Function
									Public Overrides Function getRegions() As IRegion()
										return new IRegion() { _ 
											new RegionC12(context) _ 
										}
									End Function
									Public Overrides Function Event3() As Boolean
										if(RegionC12.getCurrentState(context).Event3()) Then
											return true
										End If

										' Handle S5C12 ---> S5C2
										context.OnDebugMessage( "TRANSITION: S5C12 ---> S5C2")
										context.Complex_MainRegion_S5_RegionC_S5C1.exitState()
										CComplex.MainRegion.S5.RegionC.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C2)
										if(CComplex.MainRegion.S5.RegionA.getCurrentState(context) Is context.Complex_MainRegion_S5_RegionA_S5A3 AndAlso _ 
										   CComplex.MainRegion.S5.RegionB.getCurrentState(context) Is context.Complex_MainRegion_S5_RegionB_S5B2) Then
											if ( context.Complex_MainRegion_S5.processJoin_S5A3_S5B2_S5C2() ) Then
												return true
											End If

											' else ERROR!
										End If
										return true
									End Function
									Public Overrides Sub entryState()
										context.OnEntryS5C12()
									End Sub
									Public Overrides Sub exitState()
										RegionC12.getCurrentState(context).exitState()
										context.OnExitS5C12()
									End Sub
									Public Overrides Sub enterSubStates()
										RegionC12.getCurrentState(context).entryState()
										RegionC12.getCurrentState(context).enterSubStates()
									End Sub

									' Implementation for Region 'RegionC12'
									Public Class RegionC12 : Implements IRegion
										Private Dim context As ComplexController

										Public Sub New(ByVal context As ComplexController)
											Me.context = context
										End Sub
										Public Function getName() As String Implements IRegion.getName
											return "RegionC12"
										End Function
										Public Function getStates() As IState() Implements IRegion.getStates
											 return new IState() { _ 
												new S5C121(context) _ 
											}
										End Function
										Public Function getCurrentState() As IState Implements IRegion.getCurrentState
											return getCurrentState(context)
										End Function
										Public Shared Function getCurrentState(ByVal context As ComplexController) As RegionC12State
											return context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12.svRegionC12
										End Function
										Public Shared Sub setCurrentState(ByVal context As ComplexController, ByVal state As RegionC12State)
											context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() )
											context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12.svRegionC12 = state
											context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12.svRegionC12.entryState()
										End Sub
										Public Shared Function getInitState(ByVal context As ComplexController) As RegionC12State
											return context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121
										End Function

										' Base class for all states of Region 'RegionC12'
										Public MustInherit Class RegionC12State : Implements IState
											Protected Dim context As ComplexController
											Public Overridable Function Event3() As Boolean
												return false
											End Function
											Public Overridable Sub enterSubStates()
											End Sub
											Public Overridable Sub entryState()
											End Sub
											Public Overridable Sub exitState()
											End Sub
											Public MustOverride Function getName() As String Implements IState.getName
											Public MustOverride Function getId() As TStateId Implements IState.getId
											Public MustOverride Function getRegions() As IRegion() Implements IState.getRegions
										End Class

										' Implementation for State 'S5C121'
										Public Class S5C121 : Inherits RegionC12State
											Private Dim svRegionC121 As RegionC121.RegionC121State ' State Variable for Region 'RegionC121'

											Public Sub New(ByVal context As ComplexController)
												Me.context = context
											End Sub
											Public Overrides Function getName() As String
												return "S5C121"
											End Function
											Public Overrides Function getId() As TStateId
												return TStateId.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121
											End Function
											Public Overrides Function getRegions() As IRegion()
												return new IRegion() { _ 
													new RegionC121(context) _ 
												}
											End Function
											Public Overrides Function Event3() As Boolean
												if(RegionC121.getCurrentState(context).Event3()) Then
													return true
												End If

												return false
											End Function
											Public Overrides Sub entryState()
												context.OnEntryS5C121()
											End Sub
											Public Overrides Sub exitState()
												RegionC121.getCurrentState(context).exitState()
												context.OnExitS5C121()
											End Sub
											Public Overrides Sub enterSubStates()
												RegionC121.getCurrentState(context).entryState()
												RegionC121.getCurrentState(context).enterSubStates()
											End Sub

											' Implementation for Region 'RegionC121'
											Public Class RegionC121 : Implements IRegion
												Private Dim context As ComplexController

												Public Sub New(ByVal context As ComplexController)
													Me.context = context
												End Sub
												Public Function getName() As String Implements IRegion.getName
													return "RegionC121"
												End Function
												Public Function getStates() As IState() Implements IRegion.getStates
													 return new IState() { _ 
														new S5C1211(context) _ 
													}
												End Function
												Public Function getCurrentState() As IState Implements IRegion.getCurrentState
													return getCurrentState(context)
												End Function
												Public Shared Function getCurrentState(ByVal context As ComplexController) As RegionC121State
													return context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121.svRegionC121
												End Function
												Public Shared Sub setCurrentState(ByVal context As ComplexController, ByVal state As RegionC121State)
													context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() )
													context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121.svRegionC121 = state
													context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121.svRegionC121.entryState()
												End Sub
												Public Shared Function getInitState(ByVal context As ComplexController) As RegionC121State
													return context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211
												End Function

												' Base class for all states of Region 'RegionC121'
												Public MustInherit Class RegionC121State : Implements IState
													Protected Dim context As ComplexController
													Public Overridable Function Event3() As Boolean
														return false
													End Function
													Public Overridable Sub enterSubStates()
													End Sub
													Public Overridable Sub entryState()
													End Sub
													Public Overridable Sub exitState()
													End Sub
													Public MustOverride Function getName() As String Implements IState.getName
													Public MustOverride Function getId() As TStateId Implements IState.getId
													Public MustOverride Function getRegions() As IRegion() Implements IState.getRegions
												End Class

												' Implementation for State 'S5C1211'
												Public Class S5C1211 : Inherits RegionC121State
													Private Dim svRegionC1211 As RegionC1211.RegionC1211State ' State Variable for Region 'RegionC1211'

													Public Sub New(ByVal context As ComplexController)
														Me.context = context
													End Sub
													Public Overrides Function getName() As String
														return "S5C1211"
													End Function
													Public Overrides Function getId() As TStateId
														return TStateId.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211
													End Function
													Public Overrides Function getRegions() As IRegion()
														return new IRegion() { _ 
															new RegionC1211(context) _ 
														}
													End Function
													Public Overrides Function Event3() As Boolean
														if(RegionC1211.getCurrentState(context).Event3()) Then
															return true
														End If

														return false
													End Function
													Public Overrides Sub entryState()
														context.OnEntryS5C1211()
													End Sub
													Public Overrides Sub exitState()
														RegionC1211.getCurrentState(context).exitState()
														context.OnExitS5C1211()
													End Sub
													Public Overrides Sub enterSubStates()
														RegionC1211.getCurrentState(context).entryState()
													End Sub

													' Implementation for Region 'RegionC1211'
													Public Class RegionC1211 : Implements IRegion
														Private Dim context As ComplexController

														Public Sub New(ByVal context As ComplexController)
															Me.context = context
														End Sub
														Public Function getName() As String Implements IRegion.getName
															return "RegionC1211"
														End Function
														Public Function getStates() As IState() Implements IRegion.getStates
															 return new IState() { _ 
																new S5C12111(context), _ 
																new S5C12112(context) _ 
															}
														End Function
														Public Function getCurrentState() As IState Implements IRegion.getCurrentState
															return getCurrentState(context)
														End Function
														Public Shared Function getCurrentState(ByVal context As ComplexController) As RegionC1211State
															return context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211.svRegionC1211
														End Function
														Public Shared Sub setCurrentState(ByVal context As ComplexController, ByVal state As RegionC1211State)
															context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() )
															context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211.svRegionC1211 = state
															context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211.svRegionC1211.entryState()
														End Sub
														Public Shared Function getInitState(ByVal context As ComplexController) As RegionC1211State
															return context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12111
														End Function

														' Base class for all states of Region 'RegionC1211'
														Public MustInherit Class RegionC1211State : Implements IState
															Protected Dim context As ComplexController
															Public Overridable Function Event3() As Boolean
																return false
															End Function
															Public Overridable Sub entryState()
															End Sub
															Public Overridable Sub exitState()
															End Sub
															Public MustOverride Function getName() As String Implements IState.getName
															Public MustOverride Function getId() As TStateId Implements IState.getId
															Public MustOverride Function getRegions() As IRegion() Implements IState.getRegions
														End Class

														' Implementation for State 'S5C12111'
														Public Class S5C12111 : Inherits RegionC1211State
															Public Sub New(ByVal context As ComplexController)
																Me.context = context
															End Sub
															Public Overrides Function getName() As String
																return "S5C12111"
															End Function
															Public Overrides Function getId() As TStateId
																return TStateId.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12111
															End Function
															Public Overrides Function getRegions() As IRegion()
																return new IRegion() { _ 
																}
															End Function
															Public Overrides Function Event3() As Boolean
																' Handle S5C12111 ---> S5C12112
																context.OnDebugMessage( "TRANSITION: S5C12111 ---> S5C12112")
																exitState()
																CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12112)
																return true
															End Function
															Public Overrides Sub entryState()
																context.OnEntryS5C12111()
															End Sub
															Public Overrides Sub exitState()
																context.OnExitS5C12111()
															End Sub
														End Class

														' Implementation for State 'S5C12112'
														Public Class S5C12112 : Inherits RegionC1211State
															Public Sub New(ByVal context As ComplexController)
																Me.context = context
															End Sub
															Public Overrides Function getName() As String
																return "S5C12112"
															End Function
															Public Overrides Function getId() As TStateId
																return TStateId.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12112
															End Function
															Public Overrides Function getRegions() As IRegion()
																return new IRegion() { _ 
																}
															End Function
															Public Overrides Sub entryState()
																context.OnEntryS5C12112()
															End Sub
															Public Overrides Sub exitState()
																context.OnExitS5C12112()
															End Sub
														End Class
													End Class
												End Class
											End Class
										End Class
									End Class
								End Class
							End Class
						End Class

						' Implementation for State 'S5C2'
						Public Class S5C2 : Inherits RegionCState
							Public Sub New(ByVal context As ComplexController)
								Me.context = context
							End Sub
							Public Overrides Function getName() As String
								return "S5C2"
							End Function
							Public Overrides Function getId() As TStateId
								return TStateId.Complex_MainRegion_S5_RegionC_S5C2
							End Function
							Public Overrides Function getRegions() As IRegion()
								return new IRegion() { _ 
								}
							End Function
							Public Overrides Sub entryState()
								context.OnEntryS5C2()
							End Sub
							Public Overrides Sub exitState()
								context.OnExitS5C2()
							End Sub
						End Class
					End Class
				End Class

				' Implementation for State 'S1'
				Public Class S1 : Inherits MainRegionState
					Public Sub New(ByVal context As ComplexController)
						Me.context = context
					End Sub
					Public Overrides Function getName() As String
						return "S1"
					End Function
					Public Overrides Function getId() As TStateId
						return TStateId.Complex_MainRegion_S1
					End Function
					Public Overrides Function getRegions() As IRegion()
						return new IRegion() { _ 
						}
					End Function
					Public Overrides Function Event1() As Boolean
						' Handle S1 ---> <Fork>
						context.OnDebugMessage( "TRANSITION: S1 ---> <Fork>")
						exitState()
						CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S5)
						' Handle <Fork> ---> S5A1
						context.OnDebugMessage( "TRANSITION: <Fork> ---> S5A1")
						CComplex.MainRegion.S5.RegionA.setCurrentState(context, context.Complex_MainRegion_S5_RegionA_S5A1)
						' Handle <Fork> ---> S5B11
						context.OnDebugMessage( "TRANSITION: <Fork> ---> S5B11")
						CComplex.MainRegion.S5.RegionB.setCurrentState(context, context.Complex_MainRegion_S5_RegionB_S5B1)
						CComplex.MainRegion.S5.RegionB.S5B1.RegionB1.setCurrentState(context, context.Complex_MainRegion_S5_RegionB_S5B1_RegionB1_S5B11)
						' Handle <Fork> ---> S5C12
						context.OnDebugMessage( "TRANSITION: <Fork> ---> S5C12")
						CComplex.MainRegion.S5.RegionC.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1)
						CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12)
						CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.setCurrentState(context, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.getInitState(context))
						CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.setCurrentState(context, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.getInitState(context))
						CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.setCurrentState(context, CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.getInitState(context))
						return true
					End Function
					Public Overrides Function Event2() As Boolean
						' Handle S1 ---> <Choice>
						context.OnDebugMessage( "TRANSITION: S1 ---> <Choice>")
						exitState()
						if (context.CanGoS5()) Then
							' Handle <Choice> ---> <DeepHistory>
							context.OnDebugMessage( "TRANSITION: <Choice> ---> <DeepHistory>")
							CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S5)
							CComplex.MainRegion.getCurrentState(context).enterSubStates()
							' default initialize region RegionA of orthogonal state S5
							CComplex.MainRegion.S5.RegionA.setCurrentState(context, CComplex.MainRegion.S5.RegionA.getInitState(context))
							' default initialize region RegionB of orthogonal state S5
							CComplex.MainRegion.S5.RegionB.getCurrentState(context).entryState()
							CComplex.MainRegion.S5.RegionB.getCurrentState(context).initSubStates()
							return true
						Else 
							' Handle <Choice> ---> S2
							context.OnDebugMessage( "TRANSITION: <Choice> ---> S2")
							CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S2)
							return true
						End If
					End Function
					Public Overrides Function Event3() As Boolean
						' Handle S1 ---> S2
						context.OnDebugMessage( "TRANSITION: S1 ---> S2")
						exitState()
						CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S2)
						return true
					End Function
					Public Overrides Function Event4() As Boolean
						' Handle S1 ---> <Junction>
						context.OnDebugMessage( "TRANSITION: S1 ---> <Junction>")
						exitState()
						' Handle <Junction> ---> S3
						context.OnDebugMessage( "TRANSITION: <Junction> ---> S3")
						CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S3)
						return true
					End Function
					Public Overrides Sub entryState()
						context.OnEntryS1()
					End Sub
					Public Overrides Sub exitState()
						context.OnExitS1()
					End Sub
				End Class

				' Implementation for State 'S2'
				Public Class S2 : Inherits MainRegionState
					Public Sub New(ByVal context As ComplexController)
						Me.context = context
					End Sub
					Public Overrides Function getName() As String
						return "S2"
					End Function
					Public Overrides Function getId() As TStateId
						return TStateId.Complex_MainRegion_S2
					End Function
					Public Overrides Function getRegions() As IRegion()
						return new IRegion() { _ 
						}
					End Function
					Public Overrides Function Event1() As Boolean
						' Handle S2 ---> S2
						context.OnDebugMessage( "TRANSITION: S2 ---> S2")
						return true
					End Function
					Public Overrides Function Event2() As Boolean
						' Handle S2 ---> S2
						context.OnDebugMessage( "TRANSITION: S2 ---> S2")
						exitState()
						CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S2)
						return true
					End Function
					Public Overrides Function Event4() As Boolean
						' Handle S2 ---> <Junction>
						context.OnDebugMessage( "TRANSITION: S2 ---> <Junction>")
						exitState()
						' Handle <Junction> ---> S3
						context.OnDebugMessage( "TRANSITION: <Junction> ---> S3")
						CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S3)
						return true
					End Function
					Public Overrides Sub entryState()
						context.OnEntryS2()
					End Sub
					Public Overrides Sub exitState()
						context.OnExitS2()
					End Sub
				End Class

				' Implementation for State 'S3'
				Public Class S3 : Inherits MainRegionState
					Public Sub New(ByVal context As ComplexController)
						Me.context = context
					End Sub
					Public Overrides Function getName() As String
						return "S3"
					End Function
					Public Overrides Function getId() As TStateId
						return TStateId.Complex_MainRegion_S3
					End Function
					Public Overrides Function getRegions() As IRegion()
						return new IRegion() { _ 
						}
					End Function
					Public Overrides Function Event1() As Boolean
						if (context.CanGoS2()) Then
							' Handle S3 ---> S2
							context.OnDebugMessage( "TRANSITION: S3 ---> S2")
							exitState()
							CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S2)
							return true
						ElseIf (context.CanGoS5()) Then
							' Handle S3 ---> S5
							context.OnDebugMessage( "TRANSITION: S3 ---> S5")
							exitState()
							CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S5)
							CComplex.MainRegion.S5.RegionA.setCurrentState(context, CComplex.MainRegion.S5.RegionA.getInitState(context))
							CComplex.MainRegion.S5.RegionB.getCurrentState(context).entryState()
							CComplex.MainRegion.S5.RegionB.getCurrentState(context).initSubStates()
							CComplex.MainRegion.getCurrentState(context).enterSubStates()
							return true
						Else 
							' Handle S3 ---> S1
							context.OnDebugMessage( "TRANSITION: S3 ---> S1")
							exitState()
							CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S1)
							return true
						End If
					End Function
					Public Overrides Sub entryState()
						context.OnEntryS3()
					End Sub
					Public Overrides Sub exitState()
						context.OnExitS3()
					End Sub
				End Class

				' Implementation for State 'S4'
				Public Class S4 : Inherits MainRegionState
					Private Dim svRegion4 As Region4.Region4State ' State Variable for Region 'Region4'

					Public Sub New(ByVal context As ComplexController)
						Me.context = context
					End Sub
					Public Overrides Function getName() As String
						return "S4"
					End Function
					Public Overrides Function getId() As TStateId
						return TStateId.Complex_MainRegion_S4
					End Function
					Public Overrides Function getRegions() As IRegion()
						return new IRegion() { _ 
							new Region4(context) _ 
						}
					End Function
					Public Overrides Function Event1() As Boolean
						if(Region4.getCurrentState(context).Event1()) Then
							return true
						End If

						return false
					End Function
					Public Overrides Function Event2() As Boolean
						if(Region4.getCurrentState(context).Event2()) Then
							return true
						End If

						return false
					End Function
					Public Overrides Function Event3() As Boolean
						if(Region4.getCurrentState(context).Event3()) Then
							return true
						End If

						' Handle S4 ---> S41
						context.OnDebugMessage( "TRANSITION: S4 ---> S41")
						Region4.getCurrentState(context).exitState()
						CComplex.MainRegion.S4.Region4.setCurrentState(context, context.Complex_MainRegion_S4_Region4_S41)
						return true
					End Function
					Public Overrides Function Event4() As Boolean
						' Handle S4 ---> S5
						context.OnDebugMessage( "TRANSITION: S4 ---> S5")
						exitState()
						context.OnEffectS4_S5() ' Handle effect of transition S4 ---> S5
						CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S5)
						CComplex.MainRegion.S5.RegionA.setCurrentState(context, CComplex.MainRegion.S5.RegionA.getInitState(context))
						CComplex.MainRegion.S5.RegionB.getCurrentState(context).entryState()
						CComplex.MainRegion.S5.RegionB.getCurrentState(context).initSubStates()
						CComplex.MainRegion.getCurrentState(context).enterSubStates()
						return true
					End Function
					Public Overrides Sub entryState()
						context.OnEntryS4()
					End Sub
					Public Overrides Sub exitState()
						Region4.getCurrentState(context).exitState()
						context.OnExitS4()
					End Sub

					' Implementation for Region 'Region4'
					Public Class Region4 : Implements IRegion
						Private Dim context As ComplexController

						Public Sub New(ByVal context As ComplexController)
							Me.context = context
						End Sub
						Public Function getName() As String Implements IRegion.getName
							return "Region4"
						End Function
						Public Function getStates() As IState() Implements IRegion.getStates
							 return new IState() { _ 
								new S41(context), _ 
								new S42(context), _ 
								new FinalS4(context) _ 
							}
						End Function
						Public Function getCurrentState() As IState Implements IRegion.getCurrentState
							return getCurrentState(context)
						End Function
						Public Shared Function getCurrentState(ByVal context As ComplexController) As Region4State
							return context.Complex_MainRegion_S4.svRegion4
						End Function
						Public Shared Sub setCurrentState(ByVal context As ComplexController, ByVal state As Region4State)
							context.OnDebugMessage( "SET_CURRENT_STATE: " + state.getName() )
							context.Complex_MainRegion_S4.svRegion4 = state
							context.Complex_MainRegion_S4.svRegion4.entryState()
						End Sub
						Public Shared Function getInitState(ByVal context As ComplexController) As Region4State
							return context.Complex_MainRegion_S4_Region4_S41
						End Function

						' Base class for all states of Region 'Region4'
						Public MustInherit Class Region4State : Implements IState
							Protected Dim context As ComplexController
							Public Overridable Function Event1() As Boolean
								return false
							End Function
							Public Overridable Function Event2() As Boolean
								return false
							End Function
							Public Overridable Function Event3() As Boolean
								return false
							End Function
							Public Overridable Sub entryState()
							End Sub
							Public Overridable Sub exitState()
							End Sub
							Public MustOverride Function getName() As String Implements IState.getName
							Public MustOverride Function getId() As TStateId Implements IState.getId
							Public MustOverride Function getRegions() As IRegion() Implements IState.getRegions
						End Class

						' Implementation for State 'S41'
						Public Class S41 : Inherits Region4State
							Public Sub New(ByVal context As ComplexController)
								Me.context = context
							End Sub
							Public Overrides Function getName() As String
								return "S41"
							End Function
							Public Overrides Function getId() As TStateId
								return TStateId.Complex_MainRegion_S4_Region4_S41
							End Function
							Public Overrides Function getRegions() As IRegion()
								return new IRegion() { _ 
								}
							End Function
							Public Overrides Function Event1() As Boolean
								' Handle S41 ---> S42
								context.OnDebugMessage( "TRANSITION: S41 ---> S42")
								exitState()
								CComplex.MainRegion.S4.Region4.setCurrentState(context, context.Complex_MainRegion_S4_Region4_S42)
								return true
							End Function
							Public Overrides Function Event3() As Boolean
								' Handle S41 ---> FinalS4
								context.OnDebugMessage( "TRANSITION: S41 ---> FinalS4")
								exitState()
								CComplex.MainRegion.S4.Region4.setCurrentState(context, context.Complex_MainRegion_S4_Region4_FinalS4)
								' Handle S4 ---> S2
								context.OnDebugMessage( "TRANSITION: S4 ---> S2")
								context.Complex_MainRegion_S4.exitState()
								CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S2)
								return true
							End Function
							Public Overrides Sub entryState()
								context.OnEntryS41()
							End Sub
							Public Overrides Sub exitState()
								context.OnExitS41()
							End Sub
						End Class

						' Implementation for State 'S42'
						Public Class S42 : Inherits Region4State
							Public Sub New(ByVal context As ComplexController)
								Me.context = context
							End Sub
							Public Overrides Function getName() As String
								return "S42"
							End Function
							Public Overrides Function getId() As TStateId
								return TStateId.Complex_MainRegion_S4_Region4_S42
							End Function
							Public Overrides Function getRegions() As IRegion()
								return new IRegion() { _ 
								}
							End Function
							Public Overrides Function Event1() As Boolean
								' Handle S42 ---> S41
								context.OnDebugMessage( "TRANSITION: S42 ---> S41")
								exitState()
								CComplex.MainRegion.S4.Region4.setCurrentState(context, context.Complex_MainRegion_S4_Region4_S41)
								return true
							End Function
							Public Overrides Function Event2() As Boolean
								' Handle S42 ---> S5C12112
								context.OnDebugMessage( "TRANSITION: S42 ---> S5C12112")
								context.Complex_MainRegion_S4.exitState()
								CComplex.MainRegion.setCurrentState(context, context.Complex_MainRegion_S5)
								CComplex.MainRegion.S5.RegionC.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1)
								CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12)
								CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121)
								CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211)
								CComplex.MainRegion.S5.RegionC.S5C1.RegionC1.S5C12.RegionC12.S5C121.RegionC121.S5C1211.RegionC1211.setCurrentState(context, context.Complex_MainRegion_S5_RegionC_S5C1_RegionC1_S5C12_RegionC12_S5C121_RegionC121_S5C1211_RegionC1211_S5C12112)
								' default initialize region RegionA of orthogonal state S5
								CComplex.MainRegion.S5.RegionA.setCurrentState(context, CComplex.MainRegion.S5.RegionA.getInitState(context))
								' default initialize region RegionB of orthogonal state S5
								CComplex.MainRegion.S5.RegionB.getCurrentState(context).entryState()
								CComplex.MainRegion.S5.RegionB.getCurrentState(context).initSubStates()
								return true
							End Function
							Public Overrides Sub entryState()
								context.OnEntryS42()
							End Sub
							Public Overrides Sub exitState()
								context.OnExitS42()
							End Sub
						End Class

						' Implementation for State 'FinalS4'
						Public Class FinalS4 : Inherits Region4State
							Public Sub New(ByVal context As ComplexController)
								Me.context = context
							End Sub
							Public Overrides Function getName() As String
								return "FinalS4"
							End Function
							Public Overrides Function getId() As TStateId
								return TStateId.Complex_MainRegion_S4_Region4_FinalS4
							End Function
							Public Overrides Function getRegions() As IRegion()
								return new IRegion() { _ 
								}
							End Function
						End Class
					End Class
				End Class
			End Class
		End Class
	End Class
End Namespace