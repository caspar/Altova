<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2010 rel. 3 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:clitype="clitype" xmlns:ct="http://www.govtalk.gov.uk/uk/fr/tax/uk-hmrc-ct/2009-07-03" xmlns:ct-CG="http://www.govtalk.gov.uk/uk/fr/tax/uk-hmrc-ct-CG/2009-07-03" xmlns:ct-CT="http://www.govtalk.gov.uk/uk/fr/tax/uk-hmrc-ct-CT/2009-07-03" xmlns:ct-CaseI="http://www.govtalk.gov.uk/uk/fr/tax/uk-hmrc-ct-CaseI/2009-07-03" xmlns:ct-CaseV="http://www.govtalk.gov.uk/uk/fr/tax/uk-hmrc-ct-CaseV/2009-07-03" xmlns:ct-DR="http://www.govtalk.gov.uk/uk/fr/tax/uk-hmrc-ct-DR/2009-07-03" xmlns:ct-OtherInc="http://www.govtalk.gov.uk/uk/fr/tax/uk-hmrc-ct-OtherInc/2009-07-03" xmlns:ct-PL="http://www.govtalk.gov.uk/uk/fr/tax/uk-hmrc-ct-PL/2009-07-03" xmlns:ct-SchA="http://www.govtalk.gov.uk/uk/fr/tax/uk-hmrc-ct-SchA/2009-07-03" xmlns:ct-Tax="http://www.govtalk.gov.uk/uk/fr/tax/uk-hmrc-ct-Tax/2009-07-03" xmlns:ct-default="http://www.govtalk.gov.uk/uk/fr/tax/uk-hmrc-ct-default/2009-07-03" xmlns:ct-roles="http://www.govtalk.gov.uk/uk/fr/tax/uk-hmrc-ct-roles/2009-07-03" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xl="http://www.xbrl.org/2003/XLink" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:altova="http://www.altova.com" exclude-result-prefixes="#all">
	<xsl:output version="4.0" method="html" indent="no" encoding="UTF-8" use-character-maps="spaces" doctype-public="-//W3C//DTD HTML 4.01 Transitional//EN" doctype-system="http://www.w3.org/TR/html4/loose.dtd"/>
	<xsl:character-map name="spaces">
		<xsl:output-character character="&#160;" string="&amp;nbsp;"/>
	</xsl:character-map>
	<xsl:param name="SV_OutputFormat" select="'HTML'"/>
	<xsl:variable name="XBRL" select="/"/>
	<xsl:variable name="altova:XBRLRoot" select="$XBRL"/>
	<xsl:variable name="altova:bIXBRLGenerateAllFacts" select="0"/>
	<xsl:variable name="altova:sIXBRLLanguage" select="'en'"/>
	<xsl:decimal-format name="format1" grouping-separator="." decimal-separator=","/>
	<xsl:import-schema schema-location="taxonomies\comp\2009-07-03\ct-2009-07-03.xsd" namespace="http://www.govtalk.gov.uk/uk/fr/tax/uk-hmrc-ct/2009-07-03"/>
	<xsl:function name="altova:distinct-nodes">
		<xsl:param name="Param1"/>
		<xsl:sequence select="altovaext:distinct-nodes($Param1)" use-when="function-available('altovaext:distinct-nodes', 1)"/>
		<xsl:sequence select="$Param1[fn:empty(for $node in fn:subsequence($Param1, 1, position() - 1) return if (fn:deep-equal($node, .)) then $node else ())]" use-when="not(function-available('altovaext:distinct-nodes', 1))"/>
	</xsl:function>
	<xsl:function name="altova:xbrl-footnotes">
		<xsl:sequence select="altovaext:xbrl-footnotes" use-when="function-available('altovaext:xbrl-footnotes', 0)"/>
		<xsl:sequence select="()" use-when="not(function-available('altovaext:xbrl-footnotes', 0))"/>
	</xsl:function>
	<xsl:function name="altova:xbrl-labels">
		<xsl:sequence select="altovaext:xbrl-labels" use-when="function-available('altovaext:xbrl-labels', 0)"/>
		<xsl:sequence select="()" use-when="not(function-available('altovaext:xbrl-labels', 0))"/>
	</xsl:function>
	<xsl:variable name="altova:XBRL-xbrl-contexts" select="$XBRL/xbrli:xbrl/xbrli:context"/>
	<xsl:key name="altova:id-key" match="document-node()|node()|@*" use="generate-id()"/>
	<xsl:key name="altova:xbrl-context-key" match="/xbrli:xbrl/xbrli:context" use="@id"/>
	<xsl:variable name="altova:DesignAfterStep1">
		<html>
			<head>
				<title>
					<xsl:text> </xsl:text>
				</title>
				<meta http-equiv="X-UA-Compatible" content="IE=7"/>
				<style type="text/css">
					<xsl:comment>.total { border-bottom-color:black;
border-bottom-style:double;
border-top:1px solid black;
 }</xsl:comment>
				</style>
				<xsl:comment>[if IE]&gt;&lt;STYLE type=&quot;text/css&quot;&gt;.altova-rotate-left-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=3)} .altova-rotate-right-textbox{filter: progid:DXImageTransform.Microsoft.BasicImage(rotation=1)} &lt;/STYLE&gt;&lt;![endif]</xsl:comment>
				<xsl:comment>[if !IE]&gt;</xsl:comment>
				<style type="text/css">.altova-rotate-left-textbox{-webkit-transform: rotate(-90deg) translate(-100%, 0%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(-90deg) translate(-100%, 0%); -moz-transform-origin: 0% 0%}.altova-rotate-right-textbox{-webkit-transform: rotate(90deg) translate(0%, -100%); -webkit-transform-origin: 0% 0%;-moz-transform: rotate(90deg) translate(0%, -100%); -moz-transform-origin: 0% 0%}</style>
				<xsl:comment>&lt;![endif]</xsl:comment>
				<style type="text/css">@page { margin-left:0.60in; margin-right:0.60in; margin-top:0.79in; margin-bottom:0.79in } @media print { br.altova-page-break { page-break-before: always; } }</style>
			</head>
			<body>
				<altova:IXBRLHeader/>
				<xsl:for-each select="$XBRL">
					<xsl:if test="true()">
						<table>
							<xsl:variable name="altova:CurrContextGrid_0AD92480" select="."/>
							<xsl:variable name="altova:ColumnData">
								<altova:Internal/>
								<xsl:for-each select="altova:distinct-nodes( $altova:XBRL-xbrl-contexts/xbrli:period[ exists( xbrli:instant ) ] )">
									<xsl:sort select="if ( exists( xbrli:instant ) ) then xbrli:instant else if ( exists( xbrli:endDate ) ) then xbrli:endDate else &apos;forever&apos;" data-type="text" order="descending"/>
									<xsl:variable name="altova:xbrl-contexts-178031960" select="$altova:XBRL-xbrl-contexts[ fn:deep-equal( xbrli:period, current() ) ]"/>
									<xsl:variable name="period" select="."/>
									<altova:Element altova:sDesignElemId="0A9C8D58" altova:sNodeId="{generate-id(.)}" altova:sDocumentUri="{document-uri(root(.))}">
										<xsl:for-each select="$altova:xbrl-contexts-178031960">
											<altova:XBRLContext>
												<xsl:value-of select="@id"/>
											</altova:XBRLContext>
										</xsl:for-each>
									</altova:Element>
								</xsl:for-each>
							</xsl:variable>
							<tbody>
								<tr>
									<th style="text-align:left; ">
										<span>
											<xsl:text>Name:</xsl:text>
										</span>
									</th>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8D58' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178031960" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:left; ">
											<xsl:variable name="altova:xbrl-contexts-182003104" select="$altova:xbrl-contexts-178031960"/>
											<xsl:variable name="altova:xbrl-contexts-178031816" select="$altova:xbrl-contexts-182003104[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CT:DescriptorCompanyName[ some $altova:context in $altova:xbrl-contexts-178031816 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_string"/>
											</xsl:for-each>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th style="text-align:left; ">
										<span>
											<xsl:text>Tax Reference:</xsl:text>
										</span>
									</th>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8D58' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178031960" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:left; ">
											<xsl:variable name="altova:xbrl-contexts-182003392" select="$altova:xbrl-contexts-178031960"/>
											<xsl:variable name="altova:xbrl-contexts-178031672" select="$altova:xbrl-contexts-182003392[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CT:DescriptorTaxReference[ some $altova:context in $altova:xbrl-contexts-178031672 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_string"/>
											</xsl:for-each>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th style="text-align:left; ">
										<span>
											<xsl:text>Return for period:</xsl:text>
										</span>
									</th>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8D58' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178031960" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-182003680" select="$altova:xbrl-contexts-178031960"/>
											<xsl:variable name="altova:xbrl-contexts-178031528" select="$altova:xbrl-contexts-182003680[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CT:DescriptorStartOfPeriodForWhichReturnRequired[ some $altova:context in $altova:xbrl-contexts-178031528 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<span>
													<xsl:text>from </xsl:text>
												</span>
												<xsl:call-template name="ix_dateYY"/>
												<span>
													<xsl:text> to </xsl:text>
												</span>
												<xsl:for-each select="$XBRL">
													<xsl:variable name="altova:xbrl-contexts-178031240" select="$altova:XBRL-xbrl-contexts[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
													<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CT:DescriptorEndOfPeriodForWhichReturnRequired[ some $altova:context in $altova:xbrl-contexts-178031240 satisfies @contextRef = $altova:context/@id ]">
														<xsl:variable name="altova:current-xbrl-item" select="."/>
														<xsl:variable name="altova:current-xbrl-concept" select="."/>
														<xsl:call-template name="ix_dateYYYY"/>
													</xsl:for-each>
												</xsl:for-each>
											</xsl:for-each>
											<span>
												<xsl:text>&#160;</xsl:text>
											</span>
										</td>
									</xsl:for-each>
								</tr>
							</tbody>
						</table>
					</xsl:if>
					<br/>
					<xsl:if test="true()">
						<table>
							<xsl:variable name="altova:CurrContextGrid_0A77FDE8" select="."/>
							<xsl:variable name="altova:ColumnData">
								<altova:Internal/>
								<xsl:for-each select="altova:distinct-nodes( $altova:XBRL-xbrl-contexts/xbrli:period[ exists( xbrli:startDate ) ] )">
									<xsl:sort select="if ( exists( xbrli:instant ) ) then xbrli:instant else if ( exists( xbrli:endDate ) ) then xbrli:endDate else &apos;forever&apos;" data-type="text" order="descending"/>
									<xsl:variable name="altova:xbrl-contexts-178030952" select="$altova:XBRL-xbrl-contexts[ fn:deep-equal( xbrli:period, current() ) ]"/>
									<xsl:variable name="period" select="."/>
									<altova:Element altova:sDesignElemId="0A9C8968" altova:sNodeId="{generate-id(.)}" altova:sDocumentUri="{document-uri(root(.))}">
										<xsl:for-each select="$altova:xbrl-contexts-178030952">
											<altova:XBRLContext>
												<xsl:value-of select="@id"/>
											</altova:XBRLContext>
										</xsl:for-each>
									</altova:Element>
								</xsl:for-each>
							</xsl:variable>
							<tbody>
								<tr>
									<th style="text-align:left; ">
										<span>
											<xsl:text>A. Corporation Tax</xsl:text>
										</span>
									</th>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-139381520" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-139381808" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-139381904" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-139381616" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-139382000" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-181147184" select="$altova:xbrl-contexts-178030952"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/xbrli:unit">
												<xsl:apply-templates select="xbrli:measure"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-181147088" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-181146992" select="$altova:xbrl-contexts-178030952"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/xbrli:unit">
												<xsl:apply-templates select="xbrli:measure"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-181150928" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-181147376" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Trading Profits</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-177798464" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178030520" select="$altova:xbrl-contexts-177798464[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsTotalProfitsAllTrades[ some $altova:context in $altova:xbrl-contexts-178030520 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-177798752" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-177798368" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-118422816" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-118422720" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Non-trading loan relationships</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-235732400" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178030376" select="$altova:xbrl-contexts-235732400[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-default:InvestmentIncomeAndReliefsNonTradingLoanRelationshipsProfitsAndGainsFromNTLR[ some $altova:context in $altova:xbrl-contexts-178030376 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235732496" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235732592" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235732688" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235732784" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Profits Chargeable</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; " class="total">
											<xsl:variable name="altova:xbrl-contexts-235733168" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178030232" select="$altova:xbrl-contexts-235733168[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-Tax:CalculationOfCTLiabilityProfits[ some $altova:context in $altova:xbrl-contexts-178030232 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235733360" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235733456" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235733552" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235733648" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235733936" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235734032" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235734128" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235734224" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235734320" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Financial year </xsl:text>
										</span>
										<xsl:variable name="altova:xbrl-contexts-178030088" select="$altova:XBRL-xbrl-contexts[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
										<xsl:for-each select="$XBRL/xbrli:xbrl/ct-Tax:CalculationOfCTLiabilityFinancialYear1Date[ some $altova:context in $altova:xbrl-contexts-178030088 satisfies @contextRef = $altova:context/@id ]">
											<xsl:variable name="altova:current-xbrl-item" select="."/>
											<xsl:variable name="altova:current-xbrl-concept" select="."/>
											<xsl:call-template name="ix_gYear"/>
										</xsl:for-each>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-235734704" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178029944" select="$altova:xbrl-contexts-235734704[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-Tax:CalculationOfCTLiabilityFinancialYear1AmountOfProfitChargeableAtFirstRate[ some $altova:context in $altova:xbrl-contexts-178029944 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235734800" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178029800" select="$altova:xbrl-contexts-235734800[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-Tax:CalculationOfCTLiabilityFinancialYear1FirstRateOfTax[ some $altova:context in $altova:xbrl-contexts-178029800 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<span>
													<xsl:text>@</xsl:text>
												</span>
												<span>
													<xsl:variable name="altova:seqContentStrings">
														<xsl:value-of select="format-number(number(number(.) * 100), '0.##########')"/>
													</xsl:variable>
													<xsl:variable name="sContent" as="xs:string" select="string($altova:seqContentStrings)"/>
													<xsl:if test="substring($sContent, 1, 1) eq '-'">
														<xsl:text>-</xsl:text>
													</xsl:if>
													<xsl:element name="ix:nonFraction">
														<xsl:choose>
															<xsl:when test="not(@contextRef)">
																<xsl:message select="concat('iXBRL Value Formatting was applied to a node that is not an XBRL fact (', name(), '); need a contextRef attribute.')" terminate="yes"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:attribute name="contextRef" select="@contextRef"/>
															</xsl:otherwise>
														</xsl:choose>
														<xsl:if test="@precision and @decimals">
															<xsl:message select="'Error in XBRL instance: A numeric item must not have both a precision attribute and a decimals attribute.'" terminate="yes"/>
														</xsl:if>
														<xsl:choose>
															<xsl:when test="@decimals">
																<xsl:attribute name="decimals" select="@decimals"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:choose>
																	<xsl:when test="@precision">
																		<xsl:attribute name="precision" select="@precision"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:attribute name="xsl:nil" select="true"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:otherwise>
														</xsl:choose>
														<xsl:variable name="altova:nodesFootnotes" select="altovaext:xbrl-footnotes(.)"/>
														<xsl:if test="exists($altova:nodesFootnotes)">
															<xsl:attribute name="footnoteRefs" select="string-join(for $i in $altova:nodesFootnotes return replace(generate-id($i), ':', '__'), ' ')"/>
														</xsl:if>
														<xsl:attribute name="name" select="name()"/>
														<xsl:attribute name="scale" select="'-2'"/>
														<xsl:if test="number(.) &lt; 0">
															<xsl:attribute name="sign" select="'-'"/>
														</xsl:if>
														<xsl:if test="altova:IsFactInTuple(.)">
															<xsl:attribute name="tupleRef" select="replace(generate-id(..), ':', '__')"/>
															<xsl:attribute name="order" select="count(preceding-sibling::*) + 1"/>
														</xsl:if>
														<xsl:attribute name="unitRef" select="@unitRef"/>
														<xsl:copy-of select="@*[namespace-uri() ne 'http://www.xbrl.org/2008/inlineXBRL']"/>
														<xsl:choose>
															<xsl:when test="substring($sContent, 1, 1) eq '-'">
																<xsl:value-of select="substring($sContent, 2)"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:value-of select="$sContent"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:element>
													<altova:IXBRLAnchor altova:ElementType="IXBRLNonFraction" altova:Id="{generate-id()}">
														<xsl:if test="altova:IsFactInTuple(.)">
															<xsl:attribute name="altova:bHasTupleRef" select="1"/>
														</xsl:if>
													</altova:IXBRLAnchor>
												</span>
												<span>
													<xsl:text>%</xsl:text>
												</span>
											</xsl:for-each>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-235735088" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178029656" select="$altova:xbrl-contexts-235735088[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-Tax:CalculationOfCTLiabilityFinancialYear1TaxAtFirstRate[ some $altova:context in $altova:xbrl-contexts-178029656 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma2"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235735184" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235735280" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr class="xbrl-row-data xbrl-row-even xbrl-row-level-0">
									<th/>
									<td>
										<span>
											<xsl:text>Corporation tax</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235735664" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235735760" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; " class="total">
											<xsl:variable name="altova:xbrl-contexts-235735856" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178029512" select="$altova:xbrl-contexts-235735856[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-Tax:CalculationOfCTLiabilityCorporationTax[ some $altova:context in $altova:xbrl-contexts-178029512 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma2"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235735952" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235736048" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235736336" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235736432" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235736528" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235736624" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235736720" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Corporation tax chargeable</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235737104" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235737200" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-235737296" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178029368" select="$altova:xbrl-contexts-235737296[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-Tax:CalculationOfCTLiabilityCTChargeable[ some $altova:context in $altova:xbrl-contexts-178029368 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma2"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235737392" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235737488" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th style="text-align:left; ">
										<a>
											<xsl:choose>
												<xsl:when test="substring(string(&apos;#C&apos;), 1, 1) = '#'">
													<xsl:attribute name="href">
														<xsl:value-of select="&apos;#C&apos;"/>
													</xsl:attribute>
												</xsl:when>
												<xsl:otherwise>
													<xsl:attribute name="href">
														<xsl:if test="substring(string(&apos;#C&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;#C&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
												</xsl:otherwise>
											</xsl:choose>
											<span>
												<xsl:text>C</xsl:text>
											</span>
										</a>
									</th>
									<td>
										<span>
											<xsl:text>Double taxation relief</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-235737968" select="$altova:xbrl-contexts-178030952"/>
											<a>
												<xsl:attribute name="name">
													<xsl:value-of select="&apos;doubletaxationrelief&apos;"/>
												</xsl:attribute>
											</a>
											<xsl:variable name="altova:xbrl-contexts-178029224" select="$altova:xbrl-contexts-235737968[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-Tax:CalculationOfCTLiabilityDoubleTaxationReliefAmount[ some $altova:context in $altova:xbrl-contexts-178029224 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma2"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235738064" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235738160" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235738256" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235738352" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235738640" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235738736" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235738832" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235738928" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235739024" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Total reliefs and deductions in terms of tax</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235739408" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235739504" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-235739600" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178029080" select="$altova:xbrl-contexts-235739600[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-Tax:CalculationOfCTLiabilityTotalReliefsDeductionsInTermsOfTax[ some $altova:context in $altova:xbrl-contexts-178029080 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma2"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235739696" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235739792" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Net corporation tax liability</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235740176" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235740272" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; " class="total">
											<xsl:variable name="altova:xbrl-contexts-235740368" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178028936" select="$altova:xbrl-contexts-235740368[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-Tax:CalculationOfCTLiabilityCTLiability[ some $altova:context in $altova:xbrl-contexts-178028936 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma2"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233871304" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233871400" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th style="text-align:left; ">
										<span>
											<xsl:text>B. Trading Profits</xsl:text>
										</span>
									</th>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:left; ">
											<xsl:variable name="altova:xbrl-contexts-233871784" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233871880" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233871976" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233872072" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233872168" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233872456" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233872552" select="$altova:xbrl-contexts-178030952"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/xbrli:unit">
												<xsl:apply-templates select="xbrli:measure"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233872648" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233872744" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233872840" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Profits per accounts</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233873224" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233873320" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178028648" select="$altova:xbrl-contexts-233873320[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradeProfitPerAccounts[ some $altova:context in $altova:xbrl-contexts-178028648 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233873416" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233873512" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233873608" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Depreciation</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233873992" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233874088" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178028504" select="$altova:xbrl-contexts-233874088[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradeAdjustmentsDepreciation[ some $altova:context in $altova:xbrl-contexts-178028504 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233874184" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233874280" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233874376" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Amortisation</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233874760" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233874856" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178028360" select="$altova:xbrl-contexts-233874856[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradeAdjustmentsAmortisation[ some $altova:context in $altova:xbrl-contexts-178028360 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233874952" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233875048" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233875144" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Capital expenditure</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233875528" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233875624" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178028216" select="$altova:xbrl-contexts-233875624[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradeAdjustmentsCapitalExpenditure[ some $altova:context in $altova:xbrl-contexts-178028216 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233875720" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233875816" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233875912" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th style="text-align:left; ">
										<a>
											<xsl:choose>
												<xsl:when test="substring(string(&apos;#B1&apos;), 1, 1) = '#'">
													<xsl:attribute name="href">
														<xsl:value-of select="&apos;#B1&apos;"/>
													</xsl:attribute>
												</xsl:when>
												<xsl:otherwise>
													<xsl:attribute name="href">
														<xsl:if test="substring(string(&apos;#B1&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;#B1&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
												</xsl:otherwise>
											</xsl:choose>
											<span>
												<xsl:text>B1</xsl:text>
											</span>
										</a>
									</th>
									<td>
										<span>
											<xsl:text>Legal and professional</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233876392" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233876488" select="$altova:xbrl-contexts-178030952"/>
											<a>
												<xsl:attribute name="name">
													<xsl:value-of select="&apos;legalandprofessional&apos;"/>
												</xsl:attribute>
											</a>
											<xsl:variable name="altova:xbrl-contexts-178028072" select="$altova:xbrl-contexts-233876488[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradeAdjustmentsAccountancyLegalAndProfessionalFees[ some $altova:context in $altova:xbrl-contexts-178028072 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233876584" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233876680" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233876776" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Entertaining</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233877160" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233877256" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178027928" select="$altova:xbrl-contexts-233877256[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradeAdjustmentsEntertaining[ some $altova:context in $altova:xbrl-contexts-178027928 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233877352" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233877448" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233877544" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Interest receivable</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233877928" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233878024" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178027784" select="$altova:xbrl-contexts-233878024[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradeAdjustmentsNTLRCreditsPerAccounts[ some $altova:context in $altova:xbrl-contexts-178027784 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233878120" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233878216" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233878312" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th style="text-align:left; ">
										<a>
											<xsl:choose>
												<xsl:when test="substring(string(&apos;#B2&apos;), 1, 1) = '#'">
													<xsl:attribute name="href">
														<xsl:value-of select="&apos;#B2&apos;"/>
													</xsl:attribute>
												</xsl:when>
												<xsl:otherwise>
													<xsl:attribute name="href">
														<xsl:if test="substring(string(&apos;#B2&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;#B2&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
												</xsl:otherwise>
											</xsl:choose>
											<span>
												<xsl:text>B2</xsl:text>
											</span>
										</a>
									</th>
									<td>
										<span>
											<xsl:text>Capital allowances</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233878792" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-233878888" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178027640" select="$altova:xbrl-contexts-233878888[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradeCapitalAllowancesNetAllowancesCharges[ some $altova:context in $altova:xbrl-contexts-178027640 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233878984" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233879080" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-233879176" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Adjusted profits</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-203608736" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; " class="total">
											<xsl:variable name="altova:xbrl-contexts-203608832" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-178027496" select="$altova:xbrl-contexts-203608832[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradeNetTradingProfitsIndividualTrade[ some $altova:context in $altova:xbrl-contexts-178027496 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203608928" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203609024" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203609120" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203609408" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203609504" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203609600" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203609696" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203609792" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th style="text-align:left; ">
										<a>
											<xsl:attribute name="name">
												<xsl:value-of select="&apos;B1&apos;"/>
											</xsl:attribute>
										</a>
										<span>
											<xsl:text>B1. Legal and professional</xsl:text>
										</span>
									</th>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203610176" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203610272" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203610368" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203610464" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203610560" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-203610848" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>Total</xsl:text>
											</span>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-203611040" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>Disallowed</xsl:text>
											</span>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203611232" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203611328" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203611424" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Solicitor</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-203611808" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>31,000</xsl:text>
											</span>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-203612000" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>-</xsl:text>
											</span>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203612192" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203612288" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203612384" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Surveyor</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-203612768" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>49,000</xsl:text>
											</span>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-203612960" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>49,000</xsl:text>
											</span>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203613152" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203613248" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203613344" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th style="text-align:left; "/>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; " class="total">
											<xsl:variable name="altova:xbrl-contexts-203613632" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>80,000</xsl:text>
											</span>
										</td>
										<td style="text-align:right; " class="total">
											<xsl:variable name="altova:xbrl-contexts-203613824" select="$altova:xbrl-contexts-178030952"/>
											<a>
												<xsl:choose>
													<xsl:when test="substring(string(&apos;#legalandprofessional&apos;), 1, 1) = '#'">
														<xsl:attribute name="href">
															<xsl:value-of select="&apos;#legalandprofessional&apos;"/>
														</xsl:attribute>
													</xsl:when>
													<xsl:otherwise>
														<xsl:attribute name="href">
															<xsl:if test="substring(string(&apos;#legalandprofessional&apos;), 2, 1) = ':'">
																<xsl:text>file:///</xsl:text>
															</xsl:if>
															<xsl:value-of select="translate(string(&apos;#legalandprofessional&apos;), '&#x5c;', '/')"/>
														</xsl:attribute>
													</xsl:otherwise>
												</xsl:choose>
												<span>
													<xsl:text>49,000</xsl:text>
												</span>
											</a>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203614016" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203614112" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203614208" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203614496" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203614592" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203614688" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203614784" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203614880" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th style="text-align:left; ">
										<a>
											<xsl:attribute name="name">
												<xsl:value-of select="&apos;B2&apos;"/>
											</xsl:attribute>
										</a>
										<span>
											<xsl:text>B2. Capital allowances</xsl:text>
										</span>
									</th>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203615264" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203615360" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203615456" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203615552" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203615648" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span style="font-style:italic; ">
											<xsl:text>Plant and machinery</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203616032" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203616128" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-203616224" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-203616320" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-203616416" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>Total allowances</xsl:text>
											</span>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Brought forward</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220180280" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220180376" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-220180376" select="altova:distinct-nodes( for $altova:context in $altova:xbrl-contexts-220180376 return $altova:XBRL-xbrl-contexts[ ( xs:date( if ( xbrli:period/xbrli:instant castable as xs:date ) then xbrli:period/xbrli:instant else xs:dateTime( xbrli:period/xbrli:instant ) ) = xs:date( if ( $altova:context/xbrli:period/xbrli:startDate castable as xs:date ) then $altova:context/xbrli:period/xbrli:startDate else xs:dateTime( $altova:context/xbrli:period/xbrli:startDate ) ) or xs:date( if ( xbrli:period/xbrli:instant castable as xs:date ) then xbrli:period/xbrli:instant else xs:dateTime( xbrli:period/xbrli:instant ) ) = xs:date( if ( $altova:context/xbrli:period/xbrli:startDate castable as xs:date ) then $altova:context/xbrli:period/xbrli:startDate else xs:dateTime( $altova:context/xbrli:period/xbrli:startDate ) ) - xs:dayTimeDuration( &apos;P1D&apos; ) ) and fn:deep-equal( xbrli:entity, $altova:context/xbrli:entity ) and fn:deep-equal( xbrli:scenario, $altova:context/xbrli:scenario ) ] )"/>
											<xsl:for-each select="altova:distinct-nodes( $altova:xbrl-contexts-220180376/xbrli:period )">
												<xsl:variable name="altova:xbrl-contexts-178027352" select="$altova:xbrl-contexts-220180376[ fn:deep-equal( xbrli:period, current() ) ]"/>
												<xsl:variable name="altova:xbrl-contexts-178027208" select="$altova:xbrl-contexts-178027352[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
												<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradePMAGeneralPoolWDVBF[ some $altova:context in $altova:xbrl-contexts-178027208 satisfies @contextRef = $altova:context/@id ]">
													<xsl:variable name="altova:current-xbrl-item" select="."/>
													<xsl:variable name="altova:current-xbrl-concept" select="."/>
													<xsl:call-template name="ix_monetary_PostComma0"/>
												</xsl:for-each>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220180472" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220180568" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220180664" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th style="text-align:left; ">
										<a>
											<xsl:choose>
												<xsl:when test="substring(string(&apos;#B21&apos;), 1, 1) = '#'">
													<xsl:attribute name="href">
														<xsl:value-of select="&apos;#B21&apos;"/>
													</xsl:attribute>
												</xsl:when>
												<xsl:otherwise>
													<xsl:attribute name="href">
														<xsl:if test="substring(string(&apos;#B21&apos;), 2, 1) = ':'">
															<xsl:text>file:///</xsl:text>
														</xsl:if>
														<xsl:value-of select="translate(string(&apos;#B21&apos;), '&#x5c;', '/')"/>
													</xsl:attribute>
												</xsl:otherwise>
											</xsl:choose>
											<span>
												<xsl:text>B2.1</xsl:text>
											</span>
										</a>
									</th>
									<td>
										<span>
											<xsl:text>Additions qualifying for WDA</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220181144" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220181240" select="$altova:xbrl-contexts-178030952"/>
											<a>
												<xsl:attribute name="name">
													<xsl:value-of select="&apos;additionsQualifyingForWDA&apos;"/>
												</xsl:attribute>
											</a>
											<xsl:variable name="altova:xbrl-contexts-178027064" select="$altova:xbrl-contexts-220181240[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradePMAGeneralPoolExpenditureQualifyingForWDA[ some $altova:context in $altova:xbrl-contexts-178027064 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220181336" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220181432" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220181528" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>WDA</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220181912" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220182008" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-183091712" select="$altova:xbrl-contexts-220182008[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradePMAGeneralPoolWritingDownAllowances[ some $altova:context in $altova:xbrl-contexts-183091712 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220182104" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220182200" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220182296" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-183061472" select="$altova:xbrl-contexts-220182296[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradePMAGeneralPoolTotalAllowances[ some $altova:context in $altova:xbrl-contexts-183061472 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Carried forward</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220182680" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; " class="total">
											<xsl:variable name="altova:xbrl-contexts-220182776" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-220182776" select="altova:distinct-nodes( for $altova:context in $altova:xbrl-contexts-220182776 return $altova:XBRL-xbrl-contexts[ ( xs:date( if ( xbrli:period/xbrli:instant castable as xs:date ) then xbrli:period/xbrli:instant else xs:dateTime( xbrli:period/xbrli:instant ) ) = xs:date( if ( $altova:context/xbrli:period/xbrli:endDate castable as xs:date ) then $altova:context/xbrli:period/xbrli:endDate else xs:dateTime( $altova:context/xbrli:period/xbrli:endDate ) ) ) and fn:deep-equal( xbrli:entity, $altova:context/xbrli:entity ) and fn:deep-equal( xbrli:scenario, $altova:context/xbrli:scenario ) ] )"/>
											<xsl:for-each select="altova:distinct-nodes( $altova:xbrl-contexts-220182776/xbrli:period )">
												<xsl:variable name="altova:xbrl-contexts-183059456" select="$altova:xbrl-contexts-220182776[ fn:deep-equal( xbrli:period, current() ) ]"/>
												<xsl:variable name="altova:xbrl-contexts-183061760" select="$altova:xbrl-contexts-183059456[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
												<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradePMAGeneralPoolWDVCF[ some $altova:context in $altova:xbrl-contexts-183061760 satisfies @contextRef = $altova:context/@id ]">
													<xsl:variable name="altova:current-xbrl-item" select="."/>
													<xsl:variable name="altova:current-xbrl-concept" select="."/>
													<xsl:call-template name="ix_monetary_PostComma0"/>
												</xsl:for-each>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220182872" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220182968" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220183064" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220183352" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220183448" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220183544" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220183640" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220183736" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span style="font-style:italic; ">
											<xsl:text>Cars not in main pool</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220184120" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220184216" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220184312" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220184408" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220184504" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>No of cars</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220184888" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220184984" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220185080" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220185176" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-183061904" select="$altova:xbrl-contexts-220185176[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradePMAExpensiveCarsSummaryNumberOfSingleAssetPools[ some $altova:context in $altova:xbrl-contexts-183061904 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<span>
													<xsl:variable name="altova:seqContentStrings">
														<xsl:value-of select="format-number(number(string(.)), '0.##########')"/>
													</xsl:variable>
													<xsl:variable name="sContent" as="xs:string" select="string($altova:seqContentStrings)"/>
													<xsl:if test="substring($sContent, 1, 1) eq '-'">
														<xsl:text>-</xsl:text>
													</xsl:if>
													<xsl:element name="ix:nonFraction">
														<xsl:choose>
															<xsl:when test="not(@contextRef)">
																<xsl:message select="concat('iXBRL Value Formatting was applied to a node that is not an XBRL fact (', name(), '); need a contextRef attribute.')" terminate="yes"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:attribute name="contextRef" select="@contextRef"/>
															</xsl:otherwise>
														</xsl:choose>
														<xsl:if test="@precision and @decimals">
															<xsl:message select="'Error in XBRL instance: A numeric item must not have both a precision attribute and a decimals attribute.'" terminate="yes"/>
														</xsl:if>
														<xsl:choose>
															<xsl:when test="@decimals">
																<xsl:attribute name="decimals" select="@decimals"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:choose>
																	<xsl:when test="@precision">
																		<xsl:attribute name="precision" select="@precision"/>
																	</xsl:when>
																	<xsl:otherwise>
																		<xsl:attribute name="xsl:nil" select="true"/>
																	</xsl:otherwise>
																</xsl:choose>
															</xsl:otherwise>
														</xsl:choose>
														<xsl:variable name="altova:nodesFootnotes" select="altovaext:xbrl-footnotes(.)"/>
														<xsl:if test="exists($altova:nodesFootnotes)">
															<xsl:attribute name="footnoteRefs" select="string-join(for $i in $altova:nodesFootnotes return replace(generate-id($i), ':', '__'), ' ')"/>
														</xsl:if>
														<xsl:attribute name="name" select="name()"/>
														<xsl:attribute name="scale" select="'0'"/>
														<xsl:if test="number(.) &lt; 0">
															<xsl:attribute name="sign" select="'-'"/>
														</xsl:if>
														<xsl:if test="altova:IsFactInTuple(.)">
															<xsl:attribute name="tupleRef" select="replace(generate-id(..), ':', '__')"/>
															<xsl:attribute name="order" select="count(preceding-sibling::*) + 1"/>
														</xsl:if>
														<xsl:attribute name="unitRef" select="@unitRef"/>
														<xsl:copy-of select="@*[namespace-uri() ne 'http://www.xbrl.org/2008/inlineXBRL']"/>
														<xsl:choose>
															<xsl:when test="substring($sContent, 1, 1) eq '-'">
																<xsl:value-of select="substring($sContent, 2)"/>
															</xsl:when>
															<xsl:otherwise>
																<xsl:value-of select="$sContent"/>
															</xsl:otherwise>
														</xsl:choose>
													</xsl:element>
													<altova:IXBRLAnchor altova:ElementType="IXBRLNonFraction" altova:Id="{generate-id()}">
														<xsl:if test="altova:IsFactInTuple(.)">
															<xsl:attribute name="altova:bHasTupleRef" select="1"/>
														</xsl:if>
													</altova:IXBRLAnchor>
												</span>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220185272" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Registration</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220185656" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>ABC 123</xsl:text>
											</span>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220185848" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>DEF 345</xsl:text>
											</span>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220186040" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>GHI 678</xsl:text>
											</span>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220186232" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220186328" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Additions</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220186712" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>30,000</xsl:text>
											</span>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220186904" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>30,000</xsl:text>
											</span>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220187096" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>30,000</xsl:text>
											</span>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220187288" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-183062048" select="$altova:xbrl-contexts-220187288[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradePMAExpensiveCarsSummaryExpenditureQualifyingForWDATotal[ some $altova:context in $altova:xbrl-contexts-183062048 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220187384" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>WDA</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220187768" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>3,000</xsl:text>
											</span>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220187960" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>3,000</xsl:text>
											</span>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220188152" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>3,000</xsl:text>
											</span>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220188376" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-183062192" select="$altova:xbrl-contexts-220188376[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradePMAExpensiveCarsSummaryWritingDownAllowancesTotal[ some $altova:context in $altova:xbrl-contexts-183062192 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220188472" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-183062336" select="$altova:xbrl-contexts-220188472[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradePMAExpensiveCarsSummaryTotalAllowancesTotal[ some $altova:context in $altova:xbrl-contexts-183062336 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Carried forward</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; " class="total">
											<xsl:variable name="altova:xbrl-contexts-220188856" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>27,000</xsl:text>
											</span>
										</td>
										<td style="text-align:right; " class="total">
											<xsl:variable name="altova:xbrl-contexts-220189048" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>27,000</xsl:text>
											</span>
										</td>
										<td style="text-align:right; " class="total">
											<xsl:variable name="altova:xbrl-contexts-220189240" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>27,000</xsl:text>
											</span>
										</td>
										<td style="text-align:right; " class="total">
											<xsl:variable name="altova:xbrl-contexts-220189432" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-220189432" select="altova:distinct-nodes( for $altova:context in $altova:xbrl-contexts-220189432 return $altova:XBRL-xbrl-contexts[ ( xs:date( if ( xbrli:period/xbrli:instant castable as xs:date ) then xbrli:period/xbrli:instant else xs:dateTime( xbrli:period/xbrli:instant ) ) = xs:date( if ( $altova:context/xbrli:period/xbrli:endDate castable as xs:date ) then $altova:context/xbrli:period/xbrli:endDate else xs:dateTime( $altova:context/xbrli:period/xbrli:endDate ) ) ) and fn:deep-equal( xbrli:entity, $altova:context/xbrli:entity ) and fn:deep-equal( xbrli:scenario, $altova:context/xbrli:scenario ) ] )"/>
											<xsl:for-each select="altova:distinct-nodes( $altova:xbrl-contexts-220189432/xbrli:period )">
												<xsl:variable name="altova:xbrl-contexts-183062480" select="$altova:xbrl-contexts-220189432[ fn:deep-equal( xbrli:period, current() ) ]"/>
												<xsl:variable name="altova:xbrl-contexts-183062624" select="$altova:xbrl-contexts-183062480[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
												<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradePMAExpensiveCarsSummaryWDVCFTotal[ some $altova:context in $altova:xbrl-contexts-183062624 satisfies @contextRef = $altova:context/@id ]">
													<xsl:variable name="altova:current-xbrl-item" select="."/>
													<xsl:variable name="altova:current-xbrl-concept" select="."/>
													<xsl:call-template name="ix_monetary_PostComma0"/>
												</xsl:for-each>
											</xsl:for-each>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220189528" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220189816" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220189912" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220190008" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220190104" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220190200" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Total Allowances</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220190584" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220190680" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220190776" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220190872" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; " class="total">
											<xsl:variable name="altova:xbrl-contexts-220190968" select="$altova:xbrl-contexts-178030952"/>
											<xsl:variable name="altova:xbrl-contexts-183062768" select="$altova:xbrl-contexts-220190968[ fn:count( xbrli:entity/xbrli:segment/xbrldi:typedMember) = 0 and fn:count( xbrli:entity/xbrli:segment/xbrldi:explicitMember) = 0 and fn:count( xbrli:scenario/xbrldi:typedMember) = 0 and fn:count( xbrli:scenario/xbrldi:explicitMember) = 0]"/>
											<xsl:for-each select="$XBRL/xbrli:xbrl/ct-CaseI:TradingProfitsIndividualTradeCapitalAllowancesSummaryTotalAllowances[ some $altova:context in $altova:xbrl-contexts-183062768 satisfies @contextRef = $altova:context/@id ]">
												<xsl:variable name="altova:current-xbrl-item" select="."/>
												<xsl:variable name="altova:current-xbrl-concept" select="."/>
												<xsl:call-template name="ix_monetary_PostComma0"/>
											</xsl:for-each>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220191256" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220191352" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220191448" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220191544" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220191640" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th style="text-align:left; ">
										<a>
											<xsl:attribute name="name">
												<xsl:value-of select="&apos;B21&apos;"/>
											</xsl:attribute>
										</a>
										<span>
											<xsl:text>B2.1 Additions to main pool</xsl:text>
										</span>
									</th>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220192024" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220192120" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220192216" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220192312" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220192408" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Fixed asset additions</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220192792" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220192888" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>648,000</xsl:text>
											</span>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220193080" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220193176" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220193272" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Capital expenditure in revenue</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220193656" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-220193752" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>2,000</xsl:text>
											</span>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220193944" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220194040" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220194136" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220194424" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td style="text-align:right; " class="total">
											<xsl:variable name="altova:xbrl-contexts-220194520" select="$altova:xbrl-contexts-178030952"/>
											<a>
												<xsl:choose>
													<xsl:when test="substring(string(&apos;#additionsQualifyingForWDA&apos;), 1, 1) = '#'">
														<xsl:attribute name="href">
															<xsl:value-of select="&apos;#additionsQualifyingForWDA&apos;"/>
														</xsl:attribute>
													</xsl:when>
													<xsl:otherwise>
														<xsl:attribute name="href">
															<xsl:if test="substring(string(&apos;#additionsQualifyingForWDA&apos;), 2, 1) = ':'">
																<xsl:text>file:///</xsl:text>
															</xsl:if>
															<xsl:value-of select="translate(string(&apos;#additionsQualifyingForWDA&apos;), '&#x5c;', '/')"/>
														</xsl:attribute>
													</xsl:otherwise>
												</xsl:choose>
												<span>
													<xsl:text>650,000</xsl:text>
												</span>
											</a>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220194712" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220194808" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220194904" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220195192" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220195288" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220195384" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220195480" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220195576" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th style="text-align:left; ">
										<a>
											<xsl:attribute name="name">
												<xsl:value-of select="&apos;C&apos;"/>
											</xsl:attribute>
										</a>
										<span>
											<xsl:text>C Double taxation relief</xsl:text>
										</span>
									</th>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220195960" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220196056" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220196152" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220196248" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-220196344" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td/>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-235740592" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>Spanish</xsl:text>
											</span>
										</td>
										<td style="text-align:right; ">
											<xsl:variable name="altova:xbrl-contexts-235740784" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>French</xsl:text>
											</span>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235740976" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235741072" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235741168" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Foreign tax</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235741552" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>15,000.00</xsl:text>
											</span>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235741744" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>30,000.00</xsl:text>
											</span>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235741936" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235742032" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235742128" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>UK tax on profits</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235742512" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>17,000.00</xsl:text>
											</span>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235742704" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>30,000.00</xsl:text>
											</span>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235742896" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235742992" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235743088" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
								<tr>
									<th/>
									<td>
										<span>
											<xsl:text>Double taxation relief</xsl:text>
										</span>
									</td>
									<xsl:variable name="altova:nodesNextPseudo" select="$altova:ColumnData/altova:Element[ @altova:sDesignElemId = '0A9C8968' ]"/>
									<xsl:for-each select="for $altova:nodePseudo in $altova:nodesNextPseudo return key('altova:id-key',$altova:nodePseudo/@altova:sNodeId,document($altova:nodePseudo/@altova:sDocumentUri))">
										<xsl:variable name="altova:posCurrPseudo" select="position()"/>
										<xsl:variable name="altova:nodeCurrPseudo" select="$altova:nodesNextPseudo[ $altova:posCurrPseudo ]"/>
										<xsl:variable name="period" select="."/>
										<xsl:variable name="altova:xbrl-contexts-178030952" select="key( 'altova:xbrl-context-key', $altova:nodeCurrPseudo/altova:XBRLContext, $XBRL )"/>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235743472" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>15,000.00</xsl:text>
											</span>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235743664" select="$altova:xbrl-contexts-178030952"/>
											<span>
												<xsl:text>30,000.00</xsl:text>
											</span>
										</td>
										<td style="text-align:right; " class="total">
											<xsl:variable name="altova:xbrl-contexts-235743856" select="$altova:xbrl-contexts-178030952"/>
											<a>
												<xsl:choose>
													<xsl:when test="substring(string(&apos;#doubletaxationrelief&apos;), 1, 1) = '#'">
														<xsl:attribute name="href">
															<xsl:value-of select="&apos;#doubletaxationrelief&apos;"/>
														</xsl:attribute>
													</xsl:when>
													<xsl:otherwise>
														<xsl:attribute name="href">
															<xsl:if test="substring(string(&apos;#doubletaxationrelief&apos;), 2, 1) = ':'">
																<xsl:text>file:///</xsl:text>
															</xsl:if>
															<xsl:value-of select="translate(string(&apos;#doubletaxationrelief&apos;), '&#x5c;', '/')"/>
														</xsl:attribute>
													</xsl:otherwise>
												</xsl:choose>
												<span>
													<xsl:text>45,000.00</xsl:text>
												</span>
											</a>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235744048" select="$altova:xbrl-contexts-178030952"/>
										</td>
										<td>
											<xsl:variable name="altova:xbrl-contexts-235744144" select="$altova:xbrl-contexts-178030952"/>
										</td>
									</xsl:for-each>
								</tr>
							</tbody>
						</table>
					</xsl:if>
				</xsl:for-each>
			</body>
		</html>
	</xsl:variable>
	<xsl:template match="xbrli:measure">
		<xsl:choose>
			<xsl:when test="fn:resolve-QName( text(), . ) eq fn:QName( &apos;http://www.xbrl.org/2003/iso4217&apos;, &apos;USD&apos; )">
				<span>
					<xsl:text>$</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="fn:resolve-QName( text(), . ) eq fn:QName( &apos;http://www.xbrl.org/2003/iso4217&apos;, &apos;EUR&apos; )">
				<span>
					<xsl:text>€</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="fn:resolve-QName( text(), . ) eq fn:QName( &apos;http://www.xbrl.org/2003/iso4217&apos;, &apos;GBP&apos; )">
				<span>
					<xsl:text>£</xsl:text>
				</span>
			</xsl:when>
			<xsl:when test="fn:resolve-QName( text(), . ) eq fn:QName( &apos;http://www.xbrl.org/2003/iso4217&apos;, &apos;JPY&apos; )">
				<span>
					<xsl:text>¥</xsl:text>
				</span>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ix_monetary_PostComma0">
		<xsl:choose>
			<xsl:when test="number( . ) &gt;= 0">
				<span>
					<xsl:variable name="altova:seqContentStrings">
						<xsl:value-of select="format-number(number(number( . )), '#,##0.##########')"/>
					</xsl:variable>
					<xsl:variable name="sContent" as="xs:string" select="string($altova:seqContentStrings)"/>
					<xsl:if test="substring($sContent, 1, 1) eq '-'">
						<xsl:text>-</xsl:text>
					</xsl:if>
					<xsl:element name="ix:nonFraction">
						<xsl:choose>
							<xsl:when test="not(@contextRef)">
								<xsl:message select="concat('iXBRL Value Formatting was applied to a node that is not an XBRL fact (', name(), '); need a contextRef attribute.')" terminate="yes"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="contextRef" select="@contextRef"/>
							</xsl:otherwise>
						</xsl:choose>
						<xsl:if test="@precision and @decimals">
							<xsl:message select="'Error in XBRL instance: A numeric item must not have both a precision attribute and a decimals attribute.'" terminate="yes"/>
						</xsl:if>
						<xsl:choose>
							<xsl:when test="@decimals">
								<xsl:attribute name="decimals" select="@decimals"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:choose>
									<xsl:when test="@precision">
										<xsl:attribute name="precision" select="@precision"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:attribute name="xsl:nil" select="true"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:otherwise>
						</xsl:choose>
						<xsl:attribute name="format" select="'ixt:numcommadot'"/>
						<xsl:variable name="altova:nodesFootnotes" select="altovaext:xbrl-footnotes(.)"/>
						<xsl:if test="exists($altova:nodesFootnotes)">
							<xsl:attribute name="footnoteRefs" select="string-join(for $i in $altova:nodesFootnotes return replace(generate-id($i), ':', '__'), ' ')"/>
						</xsl:if>
						<xsl:attribute name="name" select="name()"/>
						<xsl:attribute name="scale" select="'0'"/>
						<xsl:if test="number(.) &lt; 0">
							<xsl:attribute name="sign" select="'-'"/>
						</xsl:if>
						<xsl:if test="altova:IsFactInTuple(.)">
							<xsl:attribute name="tupleRef" select="replace(generate-id(..), ':', '__')"/>
							<xsl:attribute name="order" select="count(preceding-sibling::*) + 1"/>
						</xsl:if>
						<xsl:attribute name="unitRef" select="@unitRef"/>
						<xsl:copy-of select="@*[namespace-uri() ne 'http://www.xbrl.org/2008/inlineXBRL']"/>
						<xsl:choose>
							<xsl:when test="substring($sContent, 1, 1) eq '-'">
								<xsl:value-of select="substring($sContent, 2)"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="$sContent"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:element>
					<altova:IXBRLAnchor altova:ElementType="IXBRLNonFraction" altova:Id="{generate-id()}">
						<xsl:if test="altova:IsFactInTuple(.)">
							<xsl:attribute name="altova:bHasTupleRef" select="1"/>
						</xsl:if>
					</altova:IXBRLAnchor>
				</span>
			</xsl:when>
			<xsl:otherwise>
				<span>
					<xsl:variable name="altova:seqContentStrings">
						<xsl:value-of select="format-number(number(number( . ) * -1), '#,##0.##########')"/>
					</xsl:variable>
					<xsl:variable name="sContent" as="xs:string" select="string($altova:seqContentStrings)"/>
					<xsl:if test="substring($sContent, 1, 1) eq '-'">
						<xsl:text>-</xsl:text>
					</xsl:if>
					<xsl:element name="ix:nonFraction">
						<xsl:choose>
							<xsl:when test="not(@contextRef)">
								<xsl:message select="concat('iXBRL Value Formatting was applied to a node that is not an XBRL fact (', name(), '); need a contextRef attribute.')" terminate="yes"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="contextRef" select="@contextRef"/>
							</xsl:otherwise>
						</xsl:choose>
						<xsl:if test="@precision and @decimals">
							<xsl:message select="'Error in XBRL instance: A numeric item must not have both a precision attribute and a decimals attribute.'" terminate="yes"/>
						</xsl:if>
						<xsl:choose>
							<xsl:when test="@decimals">
								<xsl:attribute name="decimals" select="@decimals"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:choose>
									<xsl:when test="@precision">
										<xsl:attribute name="precision" select="@precision"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:attribute name="xsl:nil" select="true"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:otherwise>
						</xsl:choose>
						<xsl:attribute name="format" select="'ixt:numcommadot'"/>
						<xsl:variable name="altova:nodesFootnotes" select="altovaext:xbrl-footnotes(.)"/>
						<xsl:if test="exists($altova:nodesFootnotes)">
							<xsl:attribute name="footnoteRefs" select="string-join(for $i in $altova:nodesFootnotes return replace(generate-id($i), ':', '__'), ' ')"/>
						</xsl:if>
						<xsl:attribute name="name" select="name()"/>
						<xsl:attribute name="scale" select="'0'"/>
						<xsl:if test="number(.) &lt; 0">
							<xsl:attribute name="sign" select="'-'"/>
						</xsl:if>
						<xsl:if test="altova:IsFactInTuple(.)">
							<xsl:attribute name="tupleRef" select="replace(generate-id(..), ':', '__')"/>
							<xsl:attribute name="order" select="count(preceding-sibling::*) + 1"/>
						</xsl:if>
						<xsl:attribute name="unitRef" select="@unitRef"/>
						<xsl:copy-of select="@*[namespace-uri() ne 'http://www.xbrl.org/2008/inlineXBRL']"/>
						<xsl:choose>
							<xsl:when test="substring($sContent, 1, 1) eq '-'">
								<xsl:value-of select="substring($sContent, 2)"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="$sContent"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:element>
					<altova:IXBRLAnchor altova:ElementType="IXBRLNonFraction" altova:Id="{generate-id()}">
						<xsl:if test="altova:IsFactInTuple(.)">
							<xsl:attribute name="altova:bHasTupleRef" select="1"/>
						</xsl:if>
					</altova:IXBRLAnchor>
				</span>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ix_gYear">
		<xsl:element name="ix:nonNumeric">
			<xsl:choose>
				<xsl:when test="not(@contextRef)">
					<xsl:message select="concat('iXBRL Value Formatting was applied to a node that is not an XBRL fact (', name(), '); need a contextRef attribute.')" terminate="yes"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="contextRef" select="@contextRef"/>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:variable name="altova:nodesFootnotes" select="altovaext:xbrl-footnotes(.)"/>
			<xsl:if test="exists($altova:nodesFootnotes)">
				<xsl:attribute name="footnoteRefs" select="string-join(for $i in $altova:nodesFootnotes return replace(generate-id($i), ':', '__'), ' ')"/>
			</xsl:if>
			<xsl:attribute name="name" select="name()"/>
			<xsl:if test="altova:IsFactInTuple(.)">
				<xsl:attribute name="tupleRef" select="replace(generate-id(..), ':', '__')"/>
				<xsl:attribute name="order" select="count(preceding-sibling::*) + 1"/>
			</xsl:if>
			<xsl:copy-of select="@*[namespace-uri() ne 'http://www.xbrl.org/2008/inlineXBRL']"/>
			<xsl:choose>
				<xsl:when test=". instance of element()">
					<xsl:apply-templates/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:element>
		<altova:IXBRLAnchor altova:ElementType="IXBRLNonNumeric" altova:Id="{generate-id()}">
			<xsl:if test="altova:IsFactInTuple(.)">
				<xsl:attribute name="altova:bHasTupleRef" select="1"/>
			</xsl:if>
		</altova:IXBRLAnchor>
	</xsl:template>
	<xsl:template name="decimalItemType">
		<xsl:choose>
			<xsl:when test=". instance of element()">
				<xsl:apply-templates/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="."/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="integerItemType">
		<xsl:choose>
			<xsl:when test=". instance of element()">
				<xsl:apply-templates/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="."/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="pureItemType">
		<xsl:choose>
			<xsl:when test=". instance of element()">
				<xsl:apply-templates/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="."/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ix_string">
		<xsl:element name="ix:nonNumeric">
			<xsl:choose>
				<xsl:when test="not(@contextRef)">
					<xsl:message select="concat('iXBRL Value Formatting was applied to a node that is not an XBRL fact (', name(), '); need a contextRef attribute.')" terminate="yes"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:attribute name="contextRef" select="@contextRef"/>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:variable name="altova:nodesFootnotes" select="altovaext:xbrl-footnotes(.)"/>
			<xsl:if test="exists($altova:nodesFootnotes)">
				<xsl:attribute name="footnoteRefs" select="string-join(for $i in $altova:nodesFootnotes return replace(generate-id($i), ':', '__'), ' ')"/>
			</xsl:if>
			<xsl:attribute name="name" select="name()"/>
			<xsl:if test="altova:IsFactInTuple(.)">
				<xsl:attribute name="tupleRef" select="replace(generate-id(..), ':', '__')"/>
				<xsl:attribute name="order" select="count(preceding-sibling::*) + 1"/>
			</xsl:if>
			<xsl:copy-of select="@*[namespace-uri() ne 'http://www.xbrl.org/2008/inlineXBRL']"/>
			<xsl:choose>
				<xsl:when test=". instance of element()">
					<xsl:apply-templates/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:element>
		<altova:IXBRLAnchor altova:ElementType="IXBRLNonNumeric" altova:Id="{generate-id()}">
			<xsl:if test="altova:IsFactInTuple(.)">
				<xsl:attribute name="altova:bHasTupleRef" select="1"/>
			</xsl:if>
		</altova:IXBRLAnchor>
	</xsl:template>
	<xsl:template name="ix_dateYYYY">
		<span>
			<xsl:variable name="altova:seqContentStrings">
				<xsl:value-of select="format-number(number(substring(string(string(.)), 9, 2)), '00', 'format1')"/>
				<xsl:variable name="sText" as="xs:string?">
					<xsl:text>/</xsl:text>
				</xsl:variable>
				<xsl:value-of select="$sText"/>
				<xsl:value-of select="format-number(number(substring(string(string(.)), 6, 2)), '00', 'format1')"/>
				<xsl:variable name="sText" as="xs:string?">
					<xsl:text>/</xsl:text>
				</xsl:variable>
				<xsl:value-of select="$sText"/>
				<xsl:value-of select="format-number(number(substring(string(string(string(.))), 1, 4)), '0000', 'format1')"/>
			</xsl:variable>
			<xsl:variable name="sContent" as="xs:string" select="string($altova:seqContentStrings)"/>
			<xsl:element name="ix:nonNumeric">
				<xsl:choose>
					<xsl:when test="not(@contextRef)">
						<xsl:message select="concat('iXBRL Value Formatting was applied to a node that is not an XBRL fact (', name(), '); need a contextRef attribute.')" terminate="yes"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:attribute name="contextRef" select="@contextRef"/>
					</xsl:otherwise>
				</xsl:choose>
				<xsl:variable name="altova:nodesFootnotes" select="altovaext:xbrl-footnotes(.)"/>
				<xsl:if test="exists($altova:nodesFootnotes)">
					<xsl:attribute name="footnoteRefs" select="string-join(for $i in $altova:nodesFootnotes return replace(generate-id($i), ':', '__'), ' ')"/>
				</xsl:if>
				<xsl:attribute name="format" select="'ixt:dateslasheu'"/>
				<xsl:attribute name="name" select="name()"/>
				<xsl:if test="altova:IsFactInTuple(.)">
					<xsl:attribute name="tupleRef" select="replace(generate-id(..), ':', '__')"/>
					<xsl:attribute name="order" select="count(preceding-sibling::*) + 1"/>
				</xsl:if>
				<xsl:copy-of select="@*[namespace-uri() ne 'http://www.xbrl.org/2008/inlineXBRL']"/>
				<xsl:value-of select="$sContent"/>
			</xsl:element>
			<altova:IXBRLAnchor altova:ElementType="IXBRLNonNumeric" altova:Id="{generate-id()}">
				<xsl:if test="altova:IsFactInTuple(.)">
					<xsl:attribute name="altova:bHasTupleRef" select="1"/>
				</xsl:if>
			</altova:IXBRLAnchor>
		</span>
	</xsl:template>
	<xsl:template name="booleanItemType">
		<xsl:choose>
			<xsl:when test=". instance of element()">
				<xsl:apply-templates/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="."/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="dateTimeItemType">
		<xsl:choose>
			<xsl:when test=". instance of element()">
				<xsl:apply-templates/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="."/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ix_monetary_PostComma2">
		<xsl:choose>
			<xsl:when test="number( . ) &gt;= 0">
				<span>
					<xsl:variable name="altova:seqContentStrings">
						<xsl:value-of select="format-number(number(number( . )), '#,##0.00########')"/>
					</xsl:variable>
					<xsl:variable name="sContent" as="xs:string" select="string($altova:seqContentStrings)"/>
					<xsl:if test="substring($sContent, 1, 1) eq '-'">
						<xsl:text>-</xsl:text>
					</xsl:if>
					<xsl:element name="ix:nonFraction">
						<xsl:choose>
							<xsl:when test="not(@contextRef)">
								<xsl:message select="concat('iXBRL Value Formatting was applied to a node that is not an XBRL fact (', name(), '); need a contextRef attribute.')" terminate="yes"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="contextRef" select="@contextRef"/>
							</xsl:otherwise>
						</xsl:choose>
						<xsl:if test="@precision and @decimals">
							<xsl:message select="'Error in XBRL instance: A numeric item must not have both a precision attribute and a decimals attribute.'" terminate="yes"/>
						</xsl:if>
						<xsl:choose>
							<xsl:when test="@decimals">
								<xsl:attribute name="decimals" select="@decimals"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:choose>
									<xsl:when test="@precision">
										<xsl:attribute name="precision" select="@precision"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:attribute name="xsl:nil" select="true"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:otherwise>
						</xsl:choose>
						<xsl:attribute name="format" select="'ixt:numcommadot'"/>
						<xsl:variable name="altova:nodesFootnotes" select="altovaext:xbrl-footnotes(.)"/>
						<xsl:if test="exists($altova:nodesFootnotes)">
							<xsl:attribute name="footnoteRefs" select="string-join(for $i in $altova:nodesFootnotes return replace(generate-id($i), ':', '__'), ' ')"/>
						</xsl:if>
						<xsl:attribute name="name" select="name()"/>
						<xsl:attribute name="scale" select="'0'"/>
						<xsl:if test="number(.) &lt; 0">
							<xsl:attribute name="sign" select="'-'"/>
						</xsl:if>
						<xsl:if test="altova:IsFactInTuple(.)">
							<xsl:attribute name="tupleRef" select="replace(generate-id(..), ':', '__')"/>
							<xsl:attribute name="order" select="count(preceding-sibling::*) + 1"/>
						</xsl:if>
						<xsl:attribute name="unitRef" select="@unitRef"/>
						<xsl:copy-of select="@*[namespace-uri() ne 'http://www.xbrl.org/2008/inlineXBRL']"/>
						<xsl:choose>
							<xsl:when test="substring($sContent, 1, 1) eq '-'">
								<xsl:value-of select="substring($sContent, 2)"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="$sContent"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:element>
					<altova:IXBRLAnchor altova:ElementType="IXBRLNonFraction" altova:Id="{generate-id()}">
						<xsl:if test="altova:IsFactInTuple(.)">
							<xsl:attribute name="altova:bHasTupleRef" select="1"/>
						</xsl:if>
					</altova:IXBRLAnchor>
				</span>
			</xsl:when>
			<xsl:otherwise>
				<span>
					<xsl:variable name="altova:seqContentStrings">
						<xsl:value-of select="format-number(number(number( . ) * -1), '#,##0.00########')"/>
					</xsl:variable>
					<xsl:variable name="sContent" as="xs:string" select="string($altova:seqContentStrings)"/>
					<xsl:if test="substring($sContent, 1, 1) eq '-'">
						<xsl:text>-</xsl:text>
					</xsl:if>
					<xsl:element name="ix:nonFraction">
						<xsl:choose>
							<xsl:when test="not(@contextRef)">
								<xsl:message select="concat('iXBRL Value Formatting was applied to a node that is not an XBRL fact (', name(), '); need a contextRef attribute.')" terminate="yes"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:attribute name="contextRef" select="@contextRef"/>
							</xsl:otherwise>
						</xsl:choose>
						<xsl:if test="@precision and @decimals">
							<xsl:message select="'Error in XBRL instance: A numeric item must not have both a precision attribute and a decimals attribute.'" terminate="yes"/>
						</xsl:if>
						<xsl:choose>
							<xsl:when test="@decimals">
								<xsl:attribute name="decimals" select="@decimals"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:choose>
									<xsl:when test="@precision">
										<xsl:attribute name="precision" select="@precision"/>
									</xsl:when>
									<xsl:otherwise>
										<xsl:attribute name="xsl:nil" select="true"/>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:otherwise>
						</xsl:choose>
						<xsl:attribute name="format" select="'ixt:numcommadot'"/>
						<xsl:variable name="altova:nodesFootnotes" select="altovaext:xbrl-footnotes(.)"/>
						<xsl:if test="exists($altova:nodesFootnotes)">
							<xsl:attribute name="footnoteRefs" select="string-join(for $i in $altova:nodesFootnotes return replace(generate-id($i), ':', '__'), ' ')"/>
						</xsl:if>
						<xsl:attribute name="name" select="name()"/>
						<xsl:attribute name="scale" select="'0'"/>
						<xsl:if test="number(.) &lt; 0">
							<xsl:attribute name="sign" select="'-'"/>
						</xsl:if>
						<xsl:if test="altova:IsFactInTuple(.)">
							<xsl:attribute name="tupleRef" select="replace(generate-id(..), ':', '__')"/>
							<xsl:attribute name="order" select="count(preceding-sibling::*) + 1"/>
						</xsl:if>
						<xsl:attribute name="unitRef" select="@unitRef"/>
						<xsl:copy-of select="@*[namespace-uri() ne 'http://www.xbrl.org/2008/inlineXBRL']"/>
						<xsl:choose>
							<xsl:when test="substring($sContent, 1, 1) eq '-'">
								<xsl:value-of select="substring($sContent, 2)"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="$sContent"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:element>
					<altova:IXBRLAnchor altova:ElementType="IXBRLNonFraction" altova:Id="{generate-id()}">
						<xsl:if test="altova:IsFactInTuple(.)">
							<xsl:attribute name="altova:bHasTupleRef" select="1"/>
						</xsl:if>
					</altova:IXBRLAnchor>
				</span>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="ix_dateYY">
		<span>
			<xsl:variable name="altova:seqContentStrings">
				<xsl:value-of select="format-number(number(substring(string(string(.)), 9, 2)), '00', 'format1')"/>
				<xsl:variable name="sText" as="xs:string?">
					<xsl:text>/</xsl:text>
				</xsl:variable>
				<xsl:value-of select="$sText"/>
				<xsl:value-of select="format-number(number(substring(string(string(.)), 6, 2)), '00', 'format1')"/>
				<xsl:variable name="sText" as="xs:string?">
					<xsl:text>/</xsl:text>
				</xsl:variable>
				<xsl:value-of select="$sText"/>
				<xsl:value-of select="format-number(number(substring(string(string(string(.))), 3, 2)), '00', 'format1')"/>
			</xsl:variable>
			<xsl:variable name="sContent" as="xs:string" select="string($altova:seqContentStrings)"/>
			<xsl:element name="ix:nonNumeric">
				<xsl:choose>
					<xsl:when test="not(@contextRef)">
						<xsl:message select="concat('iXBRL Value Formatting was applied to a node that is not an XBRL fact (', name(), '); need a contextRef attribute.')" terminate="yes"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:attribute name="contextRef" select="@contextRef"/>
					</xsl:otherwise>
				</xsl:choose>
				<xsl:variable name="altova:nodesFootnotes" select="altovaext:xbrl-footnotes(.)"/>
				<xsl:if test="exists($altova:nodesFootnotes)">
					<xsl:attribute name="footnoteRefs" select="string-join(for $i in $altova:nodesFootnotes return replace(generate-id($i), ':', '__'), ' ')"/>
				</xsl:if>
				<xsl:attribute name="format" select="'ixt:dateslasheu'"/>
				<xsl:attribute name="name" select="name()"/>
				<xsl:if test="altova:IsFactInTuple(.)">
					<xsl:attribute name="tupleRef" select="replace(generate-id(..), ':', '__')"/>
					<xsl:attribute name="order" select="count(preceding-sibling::*) + 1"/>
				</xsl:if>
				<xsl:copy-of select="@*[namespace-uri() ne 'http://www.xbrl.org/2008/inlineXBRL']"/>
				<xsl:value-of select="$sContent"/>
			</xsl:element>
			<altova:IXBRLAnchor altova:ElementType="IXBRLNonNumeric" altova:Id="{generate-id()}">
				<xsl:if test="altova:IsFactInTuple(.)">
					<xsl:attribute name="altova:bHasTupleRef" select="1"/>
				</xsl:if>
			</altova:IXBRLAnchor>
		</span>
	</xsl:template>
	<xsl:template match="/">
		<xsl:for-each select="$altova:DesignAfterStep1">
			<xsl:apply-templates mode="altova:step2"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="@* | node()" mode="altova:step2">
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="table" mode="altova:step2">
		<xsl:variable name="altova:table">
			<xsl:copy>
				<xsl:apply-templates select="@* | node()" mode="#current"/>
			</xsl:copy>
		</xsl:variable>
		<xsl:apply-templates select="$altova:table" mode="altova:generate-table"/>
	</xsl:template>
	<xsl:variable name="altova:toc-xslt-tree1">
		<xsl:for-each select="$altova:DesignAfterStep1">
			<xsl:apply-templates mode="altova:generate-toc-xslt-tree"/>
		</xsl:for-each>
	</xsl:variable>
	<xsl:template match="altova:level" mode="altova:generate-toc-xslt-tree">
		<altova:level altova:design-id="{generate-id()}">
			<xsl:apply-templates mode="#current"/>
		</altova:level>
	</xsl:template>
	<xsl:template match="altova:marker" mode="altova:generate-toc-xslt-tree">
		<altova:marker altova:design-id="{generate-id()}" altova:name="{@altova:name}">
			<xsl:apply-templates mode="#current"/>
		</altova:marker>
	</xsl:template>
	<xsl:template match="@* | text()" mode="altova:generate-toc-xslt-tree"/>
	<xsl:template match="altova:UnescapedText" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:copy copy-namespaces="no">
			<xsl:apply-templates mode="#current"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="text()" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:value-of select="."/>
	</xsl:template>
	<xsl:template match="altova:num-lvl" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:copy>
			<xsl:attribute name="altova:level-design-id" select="$altova:level-design-id"/>
			<xsl:apply-templates select="@*"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="altova:num-seq" mode="altova:extract-text-from-marker">
		<xsl:param name="altova:level-design-id"/>
		<xsl:param name="altova:marker-design-id"/>
		<xsl:copy>
			<xsl:attribute name="altova:marker-design-id" select="$altova:marker-design-id"/>
			<xsl:apply-templates select="@*"/>
		</xsl:copy>
	</xsl:template>
	<xsl:variable name="altova:toc-xslt-tree" select="$altova:toc-xslt-tree1"/>
	<xsl:key name="altova:toc-xslt-tree-key" match="altova:level | altova:toc | altova:ref | altova:marker" use="@altova:design-id"/>
	<xsl:template match="altova:level" mode="altova:step2">
		<xsl:apply-templates select="node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:toc | altova:ref" mode="altova:step2">
		<xsl:apply-templates select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', generate-id( current() ) )/node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:marker" mode="altova:step2">
		<a name="{generate-id()}"/>
		<xsl:apply-templates select="node()" mode="#current"/>
	</xsl:template>
	<xsl:template match="altova:num-lvl" mode="altova:step2">
		<xsl:variable name="altova:format" select="@altova:format"/>
		<xsl:variable name="altova:omit-levels" select="@altova:omit-levels"/>
		<xsl:variable name="altova:level-design-id">
			<xsl:choose>
				<xsl:when test="@altova:level-design-id">
					<xsl:value-of select="@altova:level-design-id"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="generate-id( ancestor::altova:level[1] )"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', $altova:level-design-id )">
			<xsl:choose>
				<xsl:when test="$altova:omit-levels">
					<xsl:number level="multiple" count="altova:level[ count( ancestor::altova:level ) >= $altova:omit-levels ]" format="{$altova:format}"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:number level="multiple" count="altova:level" format="{$altova:format}"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="altova:num-seq" mode="altova:step2">
		<xsl:variable name="altova:format" select="@altova:format"/>
		<xsl:variable name="altova:marker-design-id">
			<xsl:choose>
				<xsl:when test="@altova:marker-design-id">
					<xsl:value-of select="@altova:marker-design-id"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="generate-id( ancestor::altova:marker[1] )"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:variable>
		<xsl:for-each select="$altova:toc-xslt-tree/key( 'altova:toc-xslt-tree-key', $altova:marker-design-id )">
			<xsl:variable name="altova:name" select="@altova:name"/>
			<xsl:number level="any" count="altova:marker[ @altova:name = $altova:name ]" format="{$altova:format}"/>
		</xsl:for-each>
	</xsl:template>
	<xsl:function name="altova:is-cell-empty" as="xs:boolean">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="altova:is-node-empty( $altova:cell )"/>
	</xsl:function>
	<xsl:function name="altova:is-node-empty" as="xs:boolean">
		<xsl:param name="altova:node" as="element()"/>
		<xsl:sequence select="every $altova:child in $altova:node/child::node() satisfies ( boolean( $altova:child/self::div ) or boolean( $altova:child/self::span ) or boolean( $altova:child/self::a ) ) and altova:is-node-empty( $altova:child )"/>
	</xsl:function>
	<xsl:function name="altova:col-span" as="xs:integer">
		<xsl:param name="altova:cell" as="element()"/>
		<xsl:sequence select="if ( exists( $altova:cell/@colspan ) ) then xs:integer( $altova:cell/@colspan ) else 1"/>
	</xsl:function>
	<xsl:template match="@* | node()" mode="altova:generate-table">
		<xsl:param name="altova:generate-cols"/>
		<xsl:copy>
			<xsl:apply-templates select="@* | node()" mode="#current">
				<xsl:with-param name="altova:generate-cols" select="$altova:generate-cols"/>
			</xsl:apply-templates>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="th | td" mode="altova:generate-table">
		<xsl:choose>
			<xsl:when test="altova:is-cell-empty( . )">
				<xsl:copy>
					<xsl:apply-templates select="@*" mode="#current"/>
					<xsl:text>&#160;</xsl:text>
				</xsl:copy>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy>
					<xsl:apply-templates select="@* | node()" mode="#current"/>
				</xsl:copy>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:AddFootnoteAttributes">
		<xsl:param name="nodeFootnote"/>
		<xsl:copy-of select="$nodeFootnote/@*[namespace-uri() eq 'xml']"/>
		<xsl:variable name="altova:sArcRoles" select="distinct-values($nodeFootnote/../link:footnoteArc[@xlink:to eq $nodeFootnote/@xlink:label]/@xlink:arcrole)"/>
		<xsl:if test="count($altova:sArcRoles) &gt; 1">
			<xsl:message select="'A footnote is referenced by several facts using different arcroles; unable to continue.'" terminate="yes"/>
		</xsl:if>
		<xsl:if test="exists($altova:sArcRoles)">
			<xsl:attribute name="arcrole" select="$altova:sArcRoles"/>
		</xsl:if>
		<xsl:attribute name="footnoteID" select="replace(generate-id($nodeFootnote), ':', '__')"/>
		<xsl:if test="$nodeFootnote/../@xlink:role">
			<xsl:attribute name="footnoteLinkRole" select="$nodeFootnote/../@xlink:role"/>
		</xsl:if>
		<xsl:if test="$nodeFootnote/@xlink:role">
			<xsl:attribute name="footnoteRole" select="$nodeFootnote/@xlink:role"/>
		</xsl:if>
		<xsl:sequence select="altova:GenerateIXBRLAttribute_Id($nodeFootnote)"/>
		<xsl:if test="$nodeFootnote/@xlink:title">
			<xsl:attribute name="title" select="$nodeFootnote/@xlink:title"/>
		</xsl:if>
		<xsl:if test="not($nodeFootnote/@xml:lang)">
			<xsl:attribute name="xml:lang" select="$altova:sIXBRLLanguage"/>
		</xsl:if>
	</xsl:template>
	<xsl:template match="altova:IXBRLHeader" mode="altova:step2">
		<div style="display: none">
			<ix:header>
				<xsl:variable name="altova:nodeReportedItemAnchorsAll" select="//altova:IXBRLAnchor"/>
				<xsl:variable name="altova:nodeReportedItemAnchorsVisible" select="$altova:nodeReportedItemAnchorsAll[not(exists(ancestor::altova:IXBRL-HiddenFactHolder))]"/>
				<xsl:variable name="altova:nodeReportedItemAnchorsHidden" select="$altova:nodeReportedItemAnchorsAll[exists(ancestor::altova:IXBRL-HiddenFactHolder)]"/>
				<xsl:variable name="altova:nodeAllItems" select="$altova:XBRLRoot/xbrli:xbrl//(* except (link:schemaRef, link:linkbaseRef, link:roleRef, link:arcroleRef, xbrli:context, xbrli:unit))[@contextRef]"/>
				<!-- Hidden -->
				<xsl:variable name="altova:nodeHidden">
					<ix:hidden xml:lang="{$altova:sIXBRLLanguage}">
						<!-- Footnotes -->
						<xsl:variable name="altova:sIdAllGeneratedFootnotes" select="altova:GetAllGeneratedFootnoteIds($altova:nodeReportedItemAnchorsVisible)"/>
						<xsl:variable name="altova:sIdVisibleFootnotes" select="distinct-values($altova:nodeReportedItemAnchorsVisible[@altova:ElementType eq 'IXBRLFootnote']/@altova:Id)"/>
						<xsl:variable name="altova:sIdHiddenFootnotes" select="$altova:sIdAllGeneratedFootnotes[not(exists(index-of($altova:sIdVisibleFootnotes, .)))]"/>
						<xsl:for-each select="$altova:sIdHiddenFootnotes">
							<xsl:element name="ix:footnote">
								<xsl:variable name="altova:nodeFootnote" select="$altova:XBRLRoot/key('altova:id-key', current())"/>
								<xsl:call-template name="altova:AddFootnoteAttributes">
									<xsl:with-param name="nodeFootnote" select="$altova:nodeFootnote"/>
								</xsl:call-template>
								<xsl:value-of select="$altova:nodeFootnote/text()"/>
							</xsl:element>
						</xsl:for-each>
						<!-- Fractions, Non-Fractions, and Non-Numerics -->
						<!-- If all facts need generating, ix:hidden contains all items except those that that are visibly reported by the design -->
						<!-- If only reported facts need generating, ix:hidden contains all items that are in a 'Hide' design element -->
						<xsl:variable name="altova:nodeHiddenItems" select="if ($altova:bIXBRLGenerateAllFacts) then $altova:nodeAllItems[not(exists(index-of($altova:nodeReportedItemAnchorsVisible/@altova:Id, generate-id())))] else $altova:XBRLRoot//*[exists(index-of($altova:nodeReportedItemAnchorsHidden/@altova:Id, generate-id()))]"/>
						<xsl:for-each select="$altova:nodeHiddenItems">
							<xsl:choose>
								<xsl:when test="xbrli:numerator and xbrli:denominator">
									<xsl:sequence select="altova:GenerateIXBRLFraction(.)"/>
								</xsl:when>
								<xsl:when test="@decimals or @precision">
									<xsl:sequence select="altova:GenerateIXBRLNonFraction(.)"/>
								</xsl:when>
								<xsl:otherwise>
									<xsl:sequence select="altova:GenerateIXBRLNonNumeric(.)"/>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:for-each>
						<!-- Tuples -->
						<xsl:variable name="altova:nodeAllGeneratedTuples" select="altova:GetAllGeneratedTuples($altova:nodeReportedItemAnchorsVisible)"/>
						<xsl:for-each select="$altova:nodeAllGeneratedTuples">
							<ix:tuple>
								<xsl:variable name="altova:sPrefix" select="substring-before(name(), ':')"/>
								<xsl:if test="$altova:sPrefix">
									<xsl:namespace name="{$altova:sPrefix}" select="namespace-uri()"/>
								</xsl:if>
								<xsl:variable name="altova:nodesFootnotes" select="altovaext:xbrl-footnotes(.)"/>
								<xsl:if test="exists($altova:nodesFootnotes)">
									<xsl:attribute name="footnoteRefs" select="string-join(for $i in $altova:nodesFootnotes return replace(generate-id($i), ':', '__'), ' ')"/>
								</xsl:if>
								<xsl:attribute name="name" select="name()"/>
								<xsl:attribute name="tupleID" select="replace(generate-id(), ':', '__')"/>
								<xsl:if test="altova:IsFactInTuple(.)">
									<xsl:attribute name="tupleRef" select="replace(generate-id(..), ':', '__')"/>
									<xsl:attribute name="order" select="count(preceding-sibling::*) + 1"/>
								</xsl:if>
								<xsl:sequence select="altova:GenerateIXBRLAttribute_NamespaceNotIXBRL(.)"/>
							</ix:tuple>
						</xsl:for-each>
					</ix:hidden>
				</xsl:variable>
				<xsl:if test="some $i in $altova:nodeHidden/ix:hidden/* satisfies exists($i)">
					<xsl:copy-of select="$altova:nodeHidden"/>
				</xsl:if>
				<!-- References -->
				<ix:references>
					<xsl:sequence select="altova:GenerateIXBRLAttribute_NamespaceNotIXBRL($altova:XBRLRoot/xbrli:xbrl)"/>
					<xsl:copy-of select="$altova:XBRLRoot/xbrli:xbrl/link:schemaRef"/>
					<xsl:copy-of select="$altova:XBRLRoot/xbrli:xbrl/link:linkbaseRef"/>
				</ix:references>
				<!-- Resources -->
				<ix:resources>
					<!-- RoleRefs -->
					<xsl:copy-of select="$altova:XBRLRoot/xbrli:xbrl/link:roleRef"/>
					<!-- ArcroleRefs -->
					<xsl:copy-of select="$altova:XBRLRoot/xbrli:xbrl/link:arcroleRef"/>
					<!-- Contexts -->
					<xsl:choose>
						<xsl:when test="$altova:bIXBRLGenerateAllFacts">
							<xsl:copy-of select="$altova:XBRLRoot//xbrli:context"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="altova:sContextIds" select="distinct-values($altova:DesignAfterStep1//ix:*/@contextRef)"/>
							<xsl:for-each select="$altova:sContextIds">
								<xsl:copy-of select="$altova:XBRLRoot//xbrli:context[@id = current()]"/>
							</xsl:for-each>
						</xsl:otherwise>
					</xsl:choose>
					<!-- Units -->
					<xsl:choose>
						<xsl:when test="$altova:bIXBRLGenerateAllFacts">
							<xsl:copy-of select="$altova:XBRLRoot//xbrli:unit"/>
						</xsl:when>
						<xsl:otherwise>
							<xsl:variable name="altova:sUnitIds" select="distinct-values($altova:DesignAfterStep1//ix:*/@unitRef)"/>
							<xsl:for-each select="$altova:sUnitIds">
								<xsl:copy-of select="$altova:XBRLRoot//xbrli:unit[@id = current()]"/>
							</xsl:for-each>
						</xsl:otherwise>
					</xsl:choose>
				</ix:resources>
			</ix:header>
		</div>
	</xsl:template>
	<xsl:function name="altova:GetAllGeneratedFootnoteIds">
		<xsl:param name="altova:nodeReportedItemAnchorsVisible"/>
		<xsl:choose>
			<xsl:when test="$altova:bIXBRLGenerateAllFacts">
				<xsl:sequence select="for $i in $altova:XBRLRoot/xbrli:xbrl/link:footnoteLink/link:footnote return generate-id($i)"/>
			</xsl:when>
			<xsl:otherwise>
				<!-- Get the IDs of directly reported footnotes -->
				<xsl:variable name="altova:sIdDirectlyReportedFootnotes" select="$altova:nodeReportedItemAnchorsVisible[@altova:ElementType='IXBRLFootnote']/@altova:Id"/>
				<!-- Get the IDs of the footnotes of reported facts -->
				<xsl:variable name="altova:nodeReportedFacts" select="for $i in $altova:nodeReportedItemAnchorsVisible/@altova:Id return $altova:XBRLRoot/key('altova:id-key', $i)"/>
				<xsl:variable name="altova:nodeIndirectlyReportedFootnotes" select="for $i in $altova:nodeReportedFacts return altovaext:xbrl-footnotes($i)"/>
				<xsl:variable name="altova:sIdIndirectlyReportedFootnotes" select="for $i in $altova:nodeIndirectlyReportedFootnotes return generate-id($i)[. ne '']"/>
				<!-- Get the unique IDs -->
				<xsl:sequence select="distinct-values(($altova:sIdDirectlyReportedFootnotes, $altova:sIdIndirectlyReportedFootnotes))"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:template match="altova:IXBRLAnchor" mode="altova:step2"/>
	<xsl:template match="altova:IXBRL-HiddenFactHolder" mode="altova:step2"/>
	<xsl:function name="altova:GetAllGeneratedTuples">
		<xsl:param name="altova:nodeReportedItemAnchorsVisible"/>
		<xsl:choose>
			<xsl:when test="$altova:bIXBRLGenerateAllFacts">
				<xsl:sequence select="for $i in $altova:XBRLRoot/xbrli:xbrl//* return if (exists($i/*) and altova:IsTuple($i)) then $i else ()"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="altova:sIdItemsReferringToTuple" select="distinct-values($altova:nodeReportedItemAnchorsVisible[exists(@altova:bHasTupleRef)]/@altova:Id)"/>
				<xsl:variable name="altova:nodeItemsReferringToTuple" select="for $i in $altova:sIdItemsReferringToTuple return $altova:XBRLRoot/key('altova:id-key', $i)"/>
				<xsl:sequence select="$altova:nodeItemsReferringToTuple/ancestor::* except $altova:XBRLRoot/xbrli:xbrl"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GenerateIXBRLAbsoluteValue">
		<xsl:param name="nodeParam"/>
		<xsl:sequence select="if (number($nodeParam &lt; 0)) then substring(normalize-space($nodeParam/text()), 2) else $nodeParam/text()"/>
	</xsl:function>
	<xsl:function name="altova:GenerateIXBRLAttribute_ContextRef">
		<xsl:param name="nodeItem"/>
		<xsl:attribute name="contextRef" select="$nodeItem/@contextRef"/>
	</xsl:function>
	<xsl:function name="altova:GenerateIXBRLAttribute_Decimals">
		<xsl:param name="nodeItem"/>
		<xsl:if test="$nodeItem/@decimals">
			<xsl:attribute name="decimals" select="$nodeItem/@decimals"/>
		</xsl:if>
	</xsl:function>
	<xsl:function name="altova:GenerateIXBRLAttribute_FootnoteRefs">
		<xsl:param name="nodeItem"/>
		<xsl:variable name="altova:nodesFootnotes" select="altovaext:xbrl-footnotes($nodeItem)"/>
		<xsl:if test="exists($altova:nodesFootnotes)">
			<xsl:attribute name="footnoteRefs" select="string-join(for $i in $altova:nodesFootnotes return replace(generate-id($i), ':', '__'), ' ')"/>
		</xsl:if>
	</xsl:function>
	<xsl:function name="altova:GenerateIXBRLAttribute_Id">
		<xsl:param name="nodeItem"/>
		<xsl:if test="$nodeItem/@id">
			<xsl:attribute name="id" select="$nodeItem/@id"/>
		</xsl:if>
	</xsl:function>
	<xsl:function name="altova:GenerateIXBRLAttribute_NamespaceNotIXBRL">
		<xsl:param name="nodeItem"/>
		<xsl:copy-of select="$nodeItem/@*[namespace-uri() ne 'http://www.xbrl.org/2008/inlineXBRL']"/>
	</xsl:function>
	<xsl:function name="altova:GenerateIXBRLAttribute_NameWithNamespace">
		<xsl:param name="nodeItem"/>
		<xsl:attribute name="name" select="$nodeItem/name()"/>
	</xsl:function>
	<xsl:function name="altova:GenerateIXBRLAttribute_Precision">
		<xsl:param name="nodeItem"/>
		<xsl:if test="$nodeItem/@precision">
			<xsl:attribute name="precision" select="$nodeItem/@precision"/>
		</xsl:if>
	</xsl:function>
	<xsl:function name="altova:GenerateIXBRLAttribute_Sign">
		<xsl:param name="nodeItem"/>
		<xsl:if test="number($nodeItem) &lt; 0">
			<xsl:attribute name="sign" select="'-'"/>
		</xsl:if>
	</xsl:function>
	<xsl:function name="altova:GenerateIXBRLAttribute_TupleRefAndOrder">
		<xsl:param name="nodeItem"/>
		<xsl:if test="altova:IsFactInTuple($nodeItem)">
			<xsl:attribute name="tupleRef" select="replace(generate-id($nodeItem/..), ':', '__')"/>
			<xsl:attribute name="order" select="count($nodeItem/preceding-sibling::*) + 1"/>
		</xsl:if>
	</xsl:function>
	<xsl:function name="altova:GenerateIXBRLAttribute_UnitRef">
		<xsl:param name="nodeItem"/>
		<xsl:attribute name="unitRef" select="$nodeItem/@unitRef"/>
	</xsl:function>
	<xsl:function name="altova:GenerateIXBRLFraction">
		<xsl:param name="nodeItem"/>
		<xsl:element name="ix:fraction">
			<xsl:sequence select="altova:GenerateIXBRLAttribute_ContextRef($nodeItem)"/>
			<xsl:sequence select="altova:GenerateIXBRLAttribute_FootnoteRefs($nodeItem)"/>
			<xsl:sequence select="altova:GenerateIXBRLAttribute_NameWithNamespace($nodeItem)"/>
			<xsl:sequence select="altova:GenerateIXBRLAttribute_UnitRef($nodeItem)"/>
			<xsl:sequence select="altova:GenerateIXBRLAttribute_NamespaceNotIXBRL($nodeItem)"/>
			<xsl:element name="ix:numerator">
				<xsl:sequence select="altova:GenerateIXBRLAttribute_Sign($nodeItem/xbrli:numerator)"/>
				<xsl:sequence select="altova:GenerateIXBRLAbsoluteValue($nodeItem/xbrli:numerator)"/>
			</xsl:element>
			<xsl:element name="ix:denominator">
				<xsl:sequence select="altova:GenerateIXBRLAttribute_Sign($nodeItem/xbrli:denominator)"/>
				<xsl:sequence select="altova:GenerateIXBRLAbsoluteValue($nodeItem/xbrli:denominator)"/>
			</xsl:element>
		</xsl:element>
	</xsl:function>
	<xsl:function name="altova:GenerateIXBRLNonFraction">
		<xsl:param name="nodeItem"/>
		<xsl:element name="ix:nonFraction">
			<xsl:sequence select="altova:GenerateIXBRLAttribute_ContextRef($nodeItem)"/>
			<xsl:sequence select="altova:GenerateIXBRLAttribute_Decimals($nodeItem)"/>
			<xsl:sequence select="altova:GenerateIXBRLAttribute_FootnoteRefs($nodeItem)"/>
			<xsl:sequence select="altova:GenerateIXBRLAttribute_NameWithNamespace($nodeItem)"/>
			<xsl:sequence select="altova:GenerateIXBRLAttribute_Precision($nodeItem)"/>
			<xsl:sequence select="altova:GenerateIXBRLAttribute_Sign($nodeItem)"/>
			<xsl:sequence select="altova:GenerateIXBRLAttribute_TupleRefAndOrder($nodeItem)"/>
			<xsl:sequence select="altova:GenerateIXBRLAttribute_UnitRef($nodeItem)"/>
			<xsl:sequence select="altova:GenerateIXBRLAttribute_NamespaceNotIXBRL($nodeItem)"/>
			<xsl:sequence select="altova:GenerateIXBRLAbsoluteValue($nodeItem)"/>
		</xsl:element>
	</xsl:function>
	<xsl:function name="altova:GenerateIXBRLNonNumeric">
		<xsl:param name="nodeItem"/>
		<xsl:element name="ix:nonNumeric">
			<xsl:sequence select="altova:GenerateIXBRLAttribute_ContextRef($nodeItem)"/>
			<xsl:sequence select="altova:GenerateIXBRLAttribute_FootnoteRefs($nodeItem)"/>
			<xsl:sequence select="altova:GenerateIXBRLAttribute_NameWithNamespace($nodeItem)"/>
			<xsl:sequence select="altova:GenerateIXBRLAttribute_TupleRefAndOrder($nodeItem)"/>
			<xsl:sequence select="altova:GenerateIXBRLAttribute_NamespaceNotIXBRL($nodeItem)"/>
			<xsl:value-of select="$nodeItem/text()"/>
		</xsl:element>
	</xsl:function>
	<xsl:function name="altova:IsNodeNameEqual">
		<xsl:param name="nodeParam"/>
		<xsl:param name="sUri"/>
		<xsl:param name="sLocalName"/>
		<xsl:sequence select="$nodeParam/namespace-uri() eq $sUri and $nodeParam/local-name() eq $sLocalName"/>
	</xsl:function>
	<xsl:function name="altova:IsTuple">
		<xsl:param name="nodeParam"/>
		<xsl:choose>
			<xsl:when test="$nodeParam/@contextRef">
				<xsl:sequence select="false()"/>
			</xsl:when>
			<xsl:when test="altova:IsNodeNameEqual($nodeParam, 'http://www.xbrl.org/2003/instance', 'xbrl')">
				<xsl:sequence select="false()"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:variable name="nodeAncestorBelowRoot" select="$nodeParam/ancestor-or-self::*[last() - 1]"/>
				<xsl:choose>
					<xsl:when test="							altova:IsNodeNameEqual($nodeAncestorBelowRoot, 'http://www.xbrl.org/2003/instance', 'xbrl') or 							altova:IsNodeNameEqual($nodeAncestorBelowRoot, 'http://www.xbrl.org/2003/linkbase', 'schemaRef') or 							altova:IsNodeNameEqual($nodeAncestorBelowRoot, 'http://www.xbrl.org/2003/linkbase', 'linkbaseRef') or 							altova:IsNodeNameEqual($nodeAncestorBelowRoot, 'http://www.xbrl.org/2003/linkbase', 'roleRef') or 							altova:IsNodeNameEqual($nodeAncestorBelowRoot, 'http://www.xbrl.org/2003/linkbase', 'arcroleRef') or 							altova:IsNodeNameEqual($nodeAncestorBelowRoot, 'http://www.xbrl.org/2003/instance', 'context') or 							altova:IsNodeNameEqual($nodeAncestorBelowRoot, 'http://www.xbrl.org/2003/instance', 'unit') or 							altova:IsNodeNameEqual($nodeAncestorBelowRoot, 'http://www.xbrl.org/2003/linkbase', 'footnoteLink')">
						<xsl:sequence select="false()"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:sequence select="true()"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:IsFactInTuple">
		<xsl:param name="nodeParam"/>
		<xsl:sequence select="altova:IsTuple($nodeParam/..)"/>
	</xsl:function>
</xsl:stylesheet>
